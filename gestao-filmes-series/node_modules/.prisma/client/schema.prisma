generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  UserId    Int      @id @default(autoincrement())
  Name      String
  Email     String   @unique
  Password  String
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  // Relacionamentos
  MovieComments  MovieComments[]
  SeriesComments SeriesComments[]
  MovieRatings   MovieRatings[]
  SeriesRatings  SeriesRatings[]
  MovieNotes     MovieNotes[]
  SeriesNotes    SeriesNotes[]
  Scheduling     Scheduling[]
  SharesSent     Shares[]         @relation("SharesSent")
  SharesReceived Shares[]         @relation("SharesReceived")
}

model Movies {
  MovieId     Int      @id @default(autoincrement())
  Title       String
  Genre       String
  ReleaseDate DateTime
  Description String?
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt

  // Relacionamentos
  MovieRatings           MovieRatings[]
  MovieComments          MovieComments[]
  MovieNotes             MovieNotes[]
  Scheduling             Scheduling[]
  MovieCategoryRelations MovieCategoryRelations[]
  Shares                 Shares[]
}

model Series {
  SeriesId     Int      @id @default(autoincrement())
  Title        String
  Genre        String
  ReleaseDate  DateTime
  Description  String?
  SeasonsCount Int
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt

  // Relacionamentos
  SeriesRatings           SeriesRatings[]
  SeriesComments          SeriesComments[]
  SeriesNotes             SeriesNotes[]
  Scheduling              Scheduling[]
  SeriesCategoryRelations SeriesCategoryRelations[]
  Shares                  Shares[]
}

model MovieRatings {
  MovieRatingId Int      @id @default(autoincrement())
  UserId        Int
  MovieId       Int
  Rating        Int
  CreatedAt     DateTime @default(now())
  UpdatedAt     DateTime @updatedAt

  // Relacionamentos
  User  Users  @relation(fields: [UserId], references: [UserId])
  Movie Movies @relation(fields: [MovieId], references: [MovieId])
}

model SeriesRatings {
  SeriesRatingId Int      @id @default(autoincrement())
  UserId         Int
  SeriesId       Int
  Rating         Int
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @updatedAt

  // Relacionamentos
  User   Users  @relation(fields: [UserId], references: [UserId])
  Series Series @relation(fields: [SeriesId], references: [SeriesId])
}

model MovieComments {
  MovieCommentId Int      @id @default(autoincrement())
  UserId         Int
  MovieId        Int
  CommentText    String
  CreatedAt      DateTime @default(now())
  UpdatedAt      DateTime @updatedAt

  // Relacionamentos
  User  Users  @relation(fields: [UserId], references: [UserId])
  Movie Movies @relation(fields: [MovieId], references: [MovieId])
}

model SeriesComments {
  SeriesCommentId Int      @id @default(autoincrement())
  UserId          Int
  SeriesId        Int
  CommentText     String
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime @updatedAt

  // Relacionamentos
  User   Users  @relation(fields: [UserId], references: [UserId])
  Series Series @relation(fields: [SeriesId], references: [SeriesId])
}

model MovieNotes {
  NoteId    Int      @id @default(autoincrement())
  UserId    Int
  MovieId   Int
  NoteText  String
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  // Relacionamentos
  User  Users  @relation(fields: [UserId], references: [UserId])
  Movie Movies @relation(fields: [MovieId], references: [MovieId])
}

model SeriesNotes {
  NoteId    Int      @id @default(autoincrement())
  UserId    Int
  SeriesId  Int
  NoteText  String
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  // Relacionamentos
  User   Users  @relation(fields: [UserId], references: [UserId])
  Series Series @relation(fields: [SeriesId], references: [SeriesId])
}

model Scheduling {
  EventId   Int      @id @default(autoincrement())
  UserId    Int
  MovieId   Int? // Campo opcional
  SeriesId  Int? // Campo opcional
  EventDate DateTime
  Note      String?
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt

  // Relacionamentos corrigidos
  User   Users   @relation(fields: [UserId], references: [UserId])
  Movie  Movies? @relation(fields: [MovieId], references: [MovieId]) // Relacionamento opcional
  Series Series? @relation(fields: [SeriesId], references: [SeriesId]) // Relacionamento opcional
}

model Shares {
  ShareId         Int      @id @default(autoincrement())
  SenderUserId    Int
  RecipientUserId Int
  MovieId         Int? // Campo opcional
  SeriesId        Int? // Campo opcional
  CreatedAt       DateTime @default(now())

  // Relacionamentos corrigidos
  SenderUser    Users   @relation("SharesSent", fields: [SenderUserId], references: [UserId])
  RecipientUser Users   @relation("SharesReceived", fields: [RecipientUserId], references: [UserId])
  Movie         Movies? @relation(fields: [MovieId], references: [MovieId]) // Relacionamento opcional
  Series        Series? @relation(fields: [SeriesId], references: [SeriesId]) // Relacionamento opcional
}

model MovieCategories {
  MovieCategoryId Int      @id @default(autoincrement())
  Name            String   @unique
  CreatedAt       DateTime @default(now())
  UpdatedAt       DateTime @updatedAt

  MovieCategoryRelations MovieCategoryRelations[]
}

model SeriesCategories {
  SeriesCategoryId Int      @id @default(autoincrement())
  Name             String   @unique
  CreatedAt        DateTime @default(now())
  UpdatedAt        DateTime @updatedAt

  SeriesCategoryRelations SeriesCategoryRelations[]
}

model MovieCategoryRelations {
  MovieCategoryRelationId Int      @id @default(autoincrement())
  MovieId                 Int
  MovieCategoryId         Int
  CreatedAt               DateTime @default(now())
  UpdatedAt               DateTime @updatedAt

  // Relacionamentos
  Movie         Movies          @relation(fields: [MovieId], references: [MovieId])
  MovieCategory MovieCategories @relation(fields: [MovieCategoryId], references: [MovieCategoryId])
}

model SeriesCategoryRelations {
  SeriesCategoryRelationId Int      @id @default(autoincrement())
  SeriesId                 Int
  SeriesCategoryId         Int
  CreatedAt                DateTime @default(now())
  UpdatedAt                DateTime @updatedAt

  // Relacionamentos
  Series         Series           @relation(fields: [SeriesId], references: [SeriesId])
  SeriesCategory SeriesCategories @relation(fields: [SeriesCategoryId], references: [SeriesCategoryId])
}
