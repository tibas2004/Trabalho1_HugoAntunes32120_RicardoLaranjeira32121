
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Movies
 * 
 */
export type Movies = $Result.DefaultSelection<Prisma.$MoviesPayload>
/**
 * Model Series
 * 
 */
export type Series = $Result.DefaultSelection<Prisma.$SeriesPayload>
/**
 * Model MovieRatings
 * 
 */
export type MovieRatings = $Result.DefaultSelection<Prisma.$MovieRatingsPayload>
/**
 * Model SeriesRatings
 * 
 */
export type SeriesRatings = $Result.DefaultSelection<Prisma.$SeriesRatingsPayload>
/**
 * Model MovieComments
 * 
 */
export type MovieComments = $Result.DefaultSelection<Prisma.$MovieCommentsPayload>
/**
 * Model SeriesComments
 * 
 */
export type SeriesComments = $Result.DefaultSelection<Prisma.$SeriesCommentsPayload>
/**
 * Model MovieNotes
 * 
 */
export type MovieNotes = $Result.DefaultSelection<Prisma.$MovieNotesPayload>
/**
 * Model SeriesNotes
 * 
 */
export type SeriesNotes = $Result.DefaultSelection<Prisma.$SeriesNotesPayload>
/**
 * Model Scheduling
 * 
 */
export type Scheduling = $Result.DefaultSelection<Prisma.$SchedulingPayload>
/**
 * Model Shares
 * 
 */
export type Shares = $Result.DefaultSelection<Prisma.$SharesPayload>
/**
 * Model MovieCategories
 * 
 */
export type MovieCategories = $Result.DefaultSelection<Prisma.$MovieCategoriesPayload>
/**
 * Model SeriesCategories
 * 
 */
export type SeriesCategories = $Result.DefaultSelection<Prisma.$SeriesCategoriesPayload>
/**
 * Model MovieCategoryRelations
 * 
 */
export type MovieCategoryRelations = $Result.DefaultSelection<Prisma.$MovieCategoryRelationsPayload>
/**
 * Model SeriesCategoryRelations
 * 
 */
export type SeriesCategoryRelations = $Result.DefaultSelection<Prisma.$SeriesCategoryRelationsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.movies`: Exposes CRUD operations for the **Movies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movies.findMany()
    * ```
    */
  get movies(): Prisma.MoviesDelegate<ExtArgs>;

  /**
   * `prisma.series`: Exposes CRUD operations for the **Series** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Series
    * const series = await prisma.series.findMany()
    * ```
    */
  get series(): Prisma.SeriesDelegate<ExtArgs>;

  /**
   * `prisma.movieRatings`: Exposes CRUD operations for the **MovieRatings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MovieRatings
    * const movieRatings = await prisma.movieRatings.findMany()
    * ```
    */
  get movieRatings(): Prisma.MovieRatingsDelegate<ExtArgs>;

  /**
   * `prisma.seriesRatings`: Exposes CRUD operations for the **SeriesRatings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeriesRatings
    * const seriesRatings = await prisma.seriesRatings.findMany()
    * ```
    */
  get seriesRatings(): Prisma.SeriesRatingsDelegate<ExtArgs>;

  /**
   * `prisma.movieComments`: Exposes CRUD operations for the **MovieComments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MovieComments
    * const movieComments = await prisma.movieComments.findMany()
    * ```
    */
  get movieComments(): Prisma.MovieCommentsDelegate<ExtArgs>;

  /**
   * `prisma.seriesComments`: Exposes CRUD operations for the **SeriesComments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeriesComments
    * const seriesComments = await prisma.seriesComments.findMany()
    * ```
    */
  get seriesComments(): Prisma.SeriesCommentsDelegate<ExtArgs>;

  /**
   * `prisma.movieNotes`: Exposes CRUD operations for the **MovieNotes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MovieNotes
    * const movieNotes = await prisma.movieNotes.findMany()
    * ```
    */
  get movieNotes(): Prisma.MovieNotesDelegate<ExtArgs>;

  /**
   * `prisma.seriesNotes`: Exposes CRUD operations for the **SeriesNotes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeriesNotes
    * const seriesNotes = await prisma.seriesNotes.findMany()
    * ```
    */
  get seriesNotes(): Prisma.SeriesNotesDelegate<ExtArgs>;

  /**
   * `prisma.scheduling`: Exposes CRUD operations for the **Scheduling** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedulings
    * const schedulings = await prisma.scheduling.findMany()
    * ```
    */
  get scheduling(): Prisma.SchedulingDelegate<ExtArgs>;

  /**
   * `prisma.shares`: Exposes CRUD operations for the **Shares** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shares
    * const shares = await prisma.shares.findMany()
    * ```
    */
  get shares(): Prisma.SharesDelegate<ExtArgs>;

  /**
   * `prisma.movieCategories`: Exposes CRUD operations for the **MovieCategories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MovieCategories
    * const movieCategories = await prisma.movieCategories.findMany()
    * ```
    */
  get movieCategories(): Prisma.MovieCategoriesDelegate<ExtArgs>;

  /**
   * `prisma.seriesCategories`: Exposes CRUD operations for the **SeriesCategories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeriesCategories
    * const seriesCategories = await prisma.seriesCategories.findMany()
    * ```
    */
  get seriesCategories(): Prisma.SeriesCategoriesDelegate<ExtArgs>;

  /**
   * `prisma.movieCategoryRelations`: Exposes CRUD operations for the **MovieCategoryRelations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MovieCategoryRelations
    * const movieCategoryRelations = await prisma.movieCategoryRelations.findMany()
    * ```
    */
  get movieCategoryRelations(): Prisma.MovieCategoryRelationsDelegate<ExtArgs>;

  /**
   * `prisma.seriesCategoryRelations`: Exposes CRUD operations for the **SeriesCategoryRelations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SeriesCategoryRelations
    * const seriesCategoryRelations = await prisma.seriesCategoryRelations.findMany()
    * ```
    */
  get seriesCategoryRelations(): Prisma.SeriesCategoryRelationsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Movies: 'Movies',
    Series: 'Series',
    MovieRatings: 'MovieRatings',
    SeriesRatings: 'SeriesRatings',
    MovieComments: 'MovieComments',
    SeriesComments: 'SeriesComments',
    MovieNotes: 'MovieNotes',
    SeriesNotes: 'SeriesNotes',
    Scheduling: 'Scheduling',
    Shares: 'Shares',
    MovieCategories: 'MovieCategories',
    SeriesCategories: 'SeriesCategories',
    MovieCategoryRelations: 'MovieCategoryRelations',
    SeriesCategoryRelations: 'SeriesCategoryRelations'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "users" | "movies" | "series" | "movieRatings" | "seriesRatings" | "movieComments" | "seriesComments" | "movieNotes" | "seriesNotes" | "scheduling" | "shares" | "movieCategories" | "seriesCategories" | "movieCategoryRelations" | "seriesCategoryRelations"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Movies: {
        payload: Prisma.$MoviesPayload<ExtArgs>
        fields: Prisma.MoviesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MoviesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MoviesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          findFirst: {
            args: Prisma.MoviesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MoviesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          findMany: {
            args: Prisma.MoviesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>[]
          }
          create: {
            args: Prisma.MoviesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          createMany: {
            args: Prisma.MoviesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MoviesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>[]
          }
          delete: {
            args: Prisma.MoviesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          update: {
            args: Prisma.MoviesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          deleteMany: {
            args: Prisma.MoviesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MoviesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MoviesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MoviesPayload>
          }
          aggregate: {
            args: Prisma.MoviesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovies>
          }
          groupBy: {
            args: Prisma.MoviesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MoviesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MoviesCountArgs<ExtArgs>
            result: $Utils.Optional<MoviesCountAggregateOutputType> | number
          }
        }
      }
      Series: {
        payload: Prisma.$SeriesPayload<ExtArgs>
        fields: Prisma.SeriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload>
          }
          findFirst: {
            args: Prisma.SeriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload>
          }
          findMany: {
            args: Prisma.SeriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload>[]
          }
          create: {
            args: Prisma.SeriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload>
          }
          createMany: {
            args: Prisma.SeriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload>[]
          }
          delete: {
            args: Prisma.SeriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload>
          }
          update: {
            args: Prisma.SeriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload>
          }
          deleteMany: {
            args: Prisma.SeriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesPayload>
          }
          aggregate: {
            args: Prisma.SeriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeries>
          }
          groupBy: {
            args: Prisma.SeriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeriesCountArgs<ExtArgs>
            result: $Utils.Optional<SeriesCountAggregateOutputType> | number
          }
        }
      }
      MovieRatings: {
        payload: Prisma.$MovieRatingsPayload<ExtArgs>
        fields: Prisma.MovieRatingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovieRatingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovieRatingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload>
          }
          findFirst: {
            args: Prisma.MovieRatingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovieRatingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload>
          }
          findMany: {
            args: Prisma.MovieRatingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload>[]
          }
          create: {
            args: Prisma.MovieRatingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload>
          }
          createMany: {
            args: Prisma.MovieRatingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovieRatingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload>[]
          }
          delete: {
            args: Prisma.MovieRatingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload>
          }
          update: {
            args: Prisma.MovieRatingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload>
          }
          deleteMany: {
            args: Prisma.MovieRatingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovieRatingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MovieRatingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieRatingsPayload>
          }
          aggregate: {
            args: Prisma.MovieRatingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovieRatings>
          }
          groupBy: {
            args: Prisma.MovieRatingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovieRatingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovieRatingsCountArgs<ExtArgs>
            result: $Utils.Optional<MovieRatingsCountAggregateOutputType> | number
          }
        }
      }
      SeriesRatings: {
        payload: Prisma.$SeriesRatingsPayload<ExtArgs>
        fields: Prisma.SeriesRatingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeriesRatingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeriesRatingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload>
          }
          findFirst: {
            args: Prisma.SeriesRatingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeriesRatingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload>
          }
          findMany: {
            args: Prisma.SeriesRatingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload>[]
          }
          create: {
            args: Prisma.SeriesRatingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload>
          }
          createMany: {
            args: Prisma.SeriesRatingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeriesRatingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload>[]
          }
          delete: {
            args: Prisma.SeriesRatingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload>
          }
          update: {
            args: Prisma.SeriesRatingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload>
          }
          deleteMany: {
            args: Prisma.SeriesRatingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeriesRatingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeriesRatingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesRatingsPayload>
          }
          aggregate: {
            args: Prisma.SeriesRatingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeriesRatings>
          }
          groupBy: {
            args: Prisma.SeriesRatingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeriesRatingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeriesRatingsCountArgs<ExtArgs>
            result: $Utils.Optional<SeriesRatingsCountAggregateOutputType> | number
          }
        }
      }
      MovieComments: {
        payload: Prisma.$MovieCommentsPayload<ExtArgs>
        fields: Prisma.MovieCommentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovieCommentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovieCommentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload>
          }
          findFirst: {
            args: Prisma.MovieCommentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovieCommentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload>
          }
          findMany: {
            args: Prisma.MovieCommentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload>[]
          }
          create: {
            args: Prisma.MovieCommentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload>
          }
          createMany: {
            args: Prisma.MovieCommentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovieCommentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload>[]
          }
          delete: {
            args: Prisma.MovieCommentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload>
          }
          update: {
            args: Prisma.MovieCommentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload>
          }
          deleteMany: {
            args: Prisma.MovieCommentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovieCommentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MovieCommentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCommentsPayload>
          }
          aggregate: {
            args: Prisma.MovieCommentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovieComments>
          }
          groupBy: {
            args: Prisma.MovieCommentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovieCommentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovieCommentsCountArgs<ExtArgs>
            result: $Utils.Optional<MovieCommentsCountAggregateOutputType> | number
          }
        }
      }
      SeriesComments: {
        payload: Prisma.$SeriesCommentsPayload<ExtArgs>
        fields: Prisma.SeriesCommentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeriesCommentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeriesCommentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload>
          }
          findFirst: {
            args: Prisma.SeriesCommentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeriesCommentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload>
          }
          findMany: {
            args: Prisma.SeriesCommentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload>[]
          }
          create: {
            args: Prisma.SeriesCommentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload>
          }
          createMany: {
            args: Prisma.SeriesCommentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeriesCommentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload>[]
          }
          delete: {
            args: Prisma.SeriesCommentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload>
          }
          update: {
            args: Prisma.SeriesCommentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload>
          }
          deleteMany: {
            args: Prisma.SeriesCommentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeriesCommentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeriesCommentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCommentsPayload>
          }
          aggregate: {
            args: Prisma.SeriesCommentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeriesComments>
          }
          groupBy: {
            args: Prisma.SeriesCommentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeriesCommentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeriesCommentsCountArgs<ExtArgs>
            result: $Utils.Optional<SeriesCommentsCountAggregateOutputType> | number
          }
        }
      }
      MovieNotes: {
        payload: Prisma.$MovieNotesPayload<ExtArgs>
        fields: Prisma.MovieNotesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovieNotesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovieNotesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload>
          }
          findFirst: {
            args: Prisma.MovieNotesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovieNotesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload>
          }
          findMany: {
            args: Prisma.MovieNotesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload>[]
          }
          create: {
            args: Prisma.MovieNotesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload>
          }
          createMany: {
            args: Prisma.MovieNotesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovieNotesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload>[]
          }
          delete: {
            args: Prisma.MovieNotesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload>
          }
          update: {
            args: Prisma.MovieNotesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload>
          }
          deleteMany: {
            args: Prisma.MovieNotesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovieNotesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MovieNotesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieNotesPayload>
          }
          aggregate: {
            args: Prisma.MovieNotesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovieNotes>
          }
          groupBy: {
            args: Prisma.MovieNotesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovieNotesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovieNotesCountArgs<ExtArgs>
            result: $Utils.Optional<MovieNotesCountAggregateOutputType> | number
          }
        }
      }
      SeriesNotes: {
        payload: Prisma.$SeriesNotesPayload<ExtArgs>
        fields: Prisma.SeriesNotesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeriesNotesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeriesNotesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload>
          }
          findFirst: {
            args: Prisma.SeriesNotesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeriesNotesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload>
          }
          findMany: {
            args: Prisma.SeriesNotesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload>[]
          }
          create: {
            args: Prisma.SeriesNotesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload>
          }
          createMany: {
            args: Prisma.SeriesNotesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeriesNotesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload>[]
          }
          delete: {
            args: Prisma.SeriesNotesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload>
          }
          update: {
            args: Prisma.SeriesNotesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload>
          }
          deleteMany: {
            args: Prisma.SeriesNotesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeriesNotesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeriesNotesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesNotesPayload>
          }
          aggregate: {
            args: Prisma.SeriesNotesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeriesNotes>
          }
          groupBy: {
            args: Prisma.SeriesNotesGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeriesNotesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeriesNotesCountArgs<ExtArgs>
            result: $Utils.Optional<SeriesNotesCountAggregateOutputType> | number
          }
        }
      }
      Scheduling: {
        payload: Prisma.$SchedulingPayload<ExtArgs>
        fields: Prisma.SchedulingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchedulingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchedulingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload>
          }
          findFirst: {
            args: Prisma.SchedulingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchedulingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload>
          }
          findMany: {
            args: Prisma.SchedulingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload>[]
          }
          create: {
            args: Prisma.SchedulingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload>
          }
          createMany: {
            args: Prisma.SchedulingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchedulingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload>[]
          }
          delete: {
            args: Prisma.SchedulingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload>
          }
          update: {
            args: Prisma.SchedulingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload>
          }
          deleteMany: {
            args: Prisma.SchedulingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchedulingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SchedulingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulingPayload>
          }
          aggregate: {
            args: Prisma.SchedulingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScheduling>
          }
          groupBy: {
            args: Prisma.SchedulingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchedulingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchedulingCountArgs<ExtArgs>
            result: $Utils.Optional<SchedulingCountAggregateOutputType> | number
          }
        }
      }
      Shares: {
        payload: Prisma.$SharesPayload<ExtArgs>
        fields: Prisma.SharesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SharesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SharesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload>
          }
          findFirst: {
            args: Prisma.SharesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SharesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload>
          }
          findMany: {
            args: Prisma.SharesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload>[]
          }
          create: {
            args: Prisma.SharesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload>
          }
          createMany: {
            args: Prisma.SharesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SharesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload>[]
          }
          delete: {
            args: Prisma.SharesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload>
          }
          update: {
            args: Prisma.SharesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload>
          }
          deleteMany: {
            args: Prisma.SharesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SharesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SharesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharesPayload>
          }
          aggregate: {
            args: Prisma.SharesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShares>
          }
          groupBy: {
            args: Prisma.SharesGroupByArgs<ExtArgs>
            result: $Utils.Optional<SharesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SharesCountArgs<ExtArgs>
            result: $Utils.Optional<SharesCountAggregateOutputType> | number
          }
        }
      }
      MovieCategories: {
        payload: Prisma.$MovieCategoriesPayload<ExtArgs>
        fields: Prisma.MovieCategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovieCategoriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovieCategoriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload>
          }
          findFirst: {
            args: Prisma.MovieCategoriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovieCategoriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload>
          }
          findMany: {
            args: Prisma.MovieCategoriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload>[]
          }
          create: {
            args: Prisma.MovieCategoriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload>
          }
          createMany: {
            args: Prisma.MovieCategoriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovieCategoriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload>[]
          }
          delete: {
            args: Prisma.MovieCategoriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload>
          }
          update: {
            args: Prisma.MovieCategoriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload>
          }
          deleteMany: {
            args: Prisma.MovieCategoriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovieCategoriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MovieCategoriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoriesPayload>
          }
          aggregate: {
            args: Prisma.MovieCategoriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovieCategories>
          }
          groupBy: {
            args: Prisma.MovieCategoriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovieCategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovieCategoriesCountArgs<ExtArgs>
            result: $Utils.Optional<MovieCategoriesCountAggregateOutputType> | number
          }
        }
      }
      SeriesCategories: {
        payload: Prisma.$SeriesCategoriesPayload<ExtArgs>
        fields: Prisma.SeriesCategoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeriesCategoriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeriesCategoriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload>
          }
          findFirst: {
            args: Prisma.SeriesCategoriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeriesCategoriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload>
          }
          findMany: {
            args: Prisma.SeriesCategoriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload>[]
          }
          create: {
            args: Prisma.SeriesCategoriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload>
          }
          createMany: {
            args: Prisma.SeriesCategoriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeriesCategoriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload>[]
          }
          delete: {
            args: Prisma.SeriesCategoriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload>
          }
          update: {
            args: Prisma.SeriesCategoriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload>
          }
          deleteMany: {
            args: Prisma.SeriesCategoriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeriesCategoriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeriesCategoriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoriesPayload>
          }
          aggregate: {
            args: Prisma.SeriesCategoriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeriesCategories>
          }
          groupBy: {
            args: Prisma.SeriesCategoriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeriesCategoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeriesCategoriesCountArgs<ExtArgs>
            result: $Utils.Optional<SeriesCategoriesCountAggregateOutputType> | number
          }
        }
      }
      MovieCategoryRelations: {
        payload: Prisma.$MovieCategoryRelationsPayload<ExtArgs>
        fields: Prisma.MovieCategoryRelationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MovieCategoryRelationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MovieCategoryRelationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload>
          }
          findFirst: {
            args: Prisma.MovieCategoryRelationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MovieCategoryRelationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload>
          }
          findMany: {
            args: Prisma.MovieCategoryRelationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload>[]
          }
          create: {
            args: Prisma.MovieCategoryRelationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload>
          }
          createMany: {
            args: Prisma.MovieCategoryRelationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MovieCategoryRelationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload>[]
          }
          delete: {
            args: Prisma.MovieCategoryRelationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload>
          }
          update: {
            args: Prisma.MovieCategoryRelationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload>
          }
          deleteMany: {
            args: Prisma.MovieCategoryRelationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MovieCategoryRelationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MovieCategoryRelationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MovieCategoryRelationsPayload>
          }
          aggregate: {
            args: Prisma.MovieCategoryRelationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMovieCategoryRelations>
          }
          groupBy: {
            args: Prisma.MovieCategoryRelationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MovieCategoryRelationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MovieCategoryRelationsCountArgs<ExtArgs>
            result: $Utils.Optional<MovieCategoryRelationsCountAggregateOutputType> | number
          }
        }
      }
      SeriesCategoryRelations: {
        payload: Prisma.$SeriesCategoryRelationsPayload<ExtArgs>
        fields: Prisma.SeriesCategoryRelationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SeriesCategoryRelationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SeriesCategoryRelationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload>
          }
          findFirst: {
            args: Prisma.SeriesCategoryRelationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SeriesCategoryRelationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload>
          }
          findMany: {
            args: Prisma.SeriesCategoryRelationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload>[]
          }
          create: {
            args: Prisma.SeriesCategoryRelationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload>
          }
          createMany: {
            args: Prisma.SeriesCategoryRelationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SeriesCategoryRelationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload>[]
          }
          delete: {
            args: Prisma.SeriesCategoryRelationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload>
          }
          update: {
            args: Prisma.SeriesCategoryRelationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload>
          }
          deleteMany: {
            args: Prisma.SeriesCategoryRelationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SeriesCategoryRelationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SeriesCategoryRelationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SeriesCategoryRelationsPayload>
          }
          aggregate: {
            args: Prisma.SeriesCategoryRelationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSeriesCategoryRelations>
          }
          groupBy: {
            args: Prisma.SeriesCategoryRelationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SeriesCategoryRelationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SeriesCategoryRelationsCountArgs<ExtArgs>
            result: $Utils.Optional<SeriesCategoryRelationsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    MovieComments: number
    SeriesComments: number
    MovieRatings: number
    SeriesRatings: number
    MovieNotes: number
    SeriesNotes: number
    Scheduling: number
    SharesSent: number
    SharesReceived: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MovieComments?: boolean | UsersCountOutputTypeCountMovieCommentsArgs
    SeriesComments?: boolean | UsersCountOutputTypeCountSeriesCommentsArgs
    MovieRatings?: boolean | UsersCountOutputTypeCountMovieRatingsArgs
    SeriesRatings?: boolean | UsersCountOutputTypeCountSeriesRatingsArgs
    MovieNotes?: boolean | UsersCountOutputTypeCountMovieNotesArgs
    SeriesNotes?: boolean | UsersCountOutputTypeCountSeriesNotesArgs
    Scheduling?: boolean | UsersCountOutputTypeCountSchedulingArgs
    SharesSent?: boolean | UsersCountOutputTypeCountSharesSentArgs
    SharesReceived?: boolean | UsersCountOutputTypeCountSharesReceivedArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMovieCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieCommentsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSeriesCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesCommentsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMovieRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieRatingsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSeriesRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesRatingsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountMovieNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieNotesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSeriesNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesNotesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSchedulingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchedulingWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSharesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SharesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountSharesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SharesWhereInput
  }


  /**
   * Count Type MoviesCountOutputType
   */

  export type MoviesCountOutputType = {
    MovieRatings: number
    MovieComments: number
    MovieNotes: number
    Scheduling: number
    MovieCategoryRelations: number
    Shares: number
  }

  export type MoviesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MovieRatings?: boolean | MoviesCountOutputTypeCountMovieRatingsArgs
    MovieComments?: boolean | MoviesCountOutputTypeCountMovieCommentsArgs
    MovieNotes?: boolean | MoviesCountOutputTypeCountMovieNotesArgs
    Scheduling?: boolean | MoviesCountOutputTypeCountSchedulingArgs
    MovieCategoryRelations?: boolean | MoviesCountOutputTypeCountMovieCategoryRelationsArgs
    Shares?: boolean | MoviesCountOutputTypeCountSharesArgs
  }

  // Custom InputTypes
  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MoviesCountOutputType
     */
    select?: MoviesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeCountMovieRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieRatingsWhereInput
  }

  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeCountMovieCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieCommentsWhereInput
  }

  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeCountMovieNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieNotesWhereInput
  }

  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeCountSchedulingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchedulingWhereInput
  }

  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeCountMovieCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieCategoryRelationsWhereInput
  }

  /**
   * MoviesCountOutputType without action
   */
  export type MoviesCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SharesWhereInput
  }


  /**
   * Count Type SeriesCountOutputType
   */

  export type SeriesCountOutputType = {
    SeriesRatings: number
    SeriesComments: number
    SeriesNotes: number
    Scheduling: number
    SeriesCategoryRelations: number
    Shares: number
  }

  export type SeriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SeriesRatings?: boolean | SeriesCountOutputTypeCountSeriesRatingsArgs
    SeriesComments?: boolean | SeriesCountOutputTypeCountSeriesCommentsArgs
    SeriesNotes?: boolean | SeriesCountOutputTypeCountSeriesNotesArgs
    Scheduling?: boolean | SeriesCountOutputTypeCountSchedulingArgs
    SeriesCategoryRelations?: boolean | SeriesCountOutputTypeCountSeriesCategoryRelationsArgs
    Shares?: boolean | SeriesCountOutputTypeCountSharesArgs
  }

  // Custom InputTypes
  /**
   * SeriesCountOutputType without action
   */
  export type SeriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCountOutputType
     */
    select?: SeriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeriesCountOutputType without action
   */
  export type SeriesCountOutputTypeCountSeriesRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesRatingsWhereInput
  }

  /**
   * SeriesCountOutputType without action
   */
  export type SeriesCountOutputTypeCountSeriesCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesCommentsWhereInput
  }

  /**
   * SeriesCountOutputType without action
   */
  export type SeriesCountOutputTypeCountSeriesNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesNotesWhereInput
  }

  /**
   * SeriesCountOutputType without action
   */
  export type SeriesCountOutputTypeCountSchedulingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchedulingWhereInput
  }

  /**
   * SeriesCountOutputType without action
   */
  export type SeriesCountOutputTypeCountSeriesCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesCategoryRelationsWhereInput
  }

  /**
   * SeriesCountOutputType without action
   */
  export type SeriesCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SharesWhereInput
  }


  /**
   * Count Type MovieCategoriesCountOutputType
   */

  export type MovieCategoriesCountOutputType = {
    MovieCategoryRelations: number
  }

  export type MovieCategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MovieCategoryRelations?: boolean | MovieCategoriesCountOutputTypeCountMovieCategoryRelationsArgs
  }

  // Custom InputTypes
  /**
   * MovieCategoriesCountOutputType without action
   */
  export type MovieCategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoriesCountOutputType
     */
    select?: MovieCategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MovieCategoriesCountOutputType without action
   */
  export type MovieCategoriesCountOutputTypeCountMovieCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieCategoryRelationsWhereInput
  }


  /**
   * Count Type SeriesCategoriesCountOutputType
   */

  export type SeriesCategoriesCountOutputType = {
    SeriesCategoryRelations: number
  }

  export type SeriesCategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SeriesCategoryRelations?: boolean | SeriesCategoriesCountOutputTypeCountSeriesCategoryRelationsArgs
  }

  // Custom InputTypes
  /**
   * SeriesCategoriesCountOutputType without action
   */
  export type SeriesCategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoriesCountOutputType
     */
    select?: SeriesCategoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SeriesCategoriesCountOutputType without action
   */
  export type SeriesCategoriesCountOutputTypeCountSeriesCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesCategoryRelationsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    UserId: number | null
  }

  export type UsersSumAggregateOutputType = {
    UserId: number | null
  }

  export type UsersMinAggregateOutputType = {
    UserId: number | null
    Name: string | null
    Email: string | null
    Password: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    UserId: number | null
    Name: string | null
    Email: string | null
    Password: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    UserId: number
    Name: number
    Email: number
    Password: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    UserId?: true
  }

  export type UsersSumAggregateInputType = {
    UserId?: true
  }

  export type UsersMinAggregateInputType = {
    UserId?: true
    Name?: true
    Email?: true
    Password?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    UserId?: true
    Name?: true
    Email?: true
    Password?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    UserId?: true
    Name?: true
    Email?: true
    Password?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    UserId: number
    Name: string
    Email: string
    Password: string
    CreatedAt: Date
    UpdatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserId?: boolean
    Name?: boolean
    Email?: boolean
    Password?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    MovieComments?: boolean | Users$MovieCommentsArgs<ExtArgs>
    SeriesComments?: boolean | Users$SeriesCommentsArgs<ExtArgs>
    MovieRatings?: boolean | Users$MovieRatingsArgs<ExtArgs>
    SeriesRatings?: boolean | Users$SeriesRatingsArgs<ExtArgs>
    MovieNotes?: boolean | Users$MovieNotesArgs<ExtArgs>
    SeriesNotes?: boolean | Users$SeriesNotesArgs<ExtArgs>
    Scheduling?: boolean | Users$SchedulingArgs<ExtArgs>
    SharesSent?: boolean | Users$SharesSentArgs<ExtArgs>
    SharesReceived?: boolean | Users$SharesReceivedArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UserId?: boolean
    Name?: boolean
    Email?: boolean
    Password?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    UserId?: boolean
    Name?: boolean
    Email?: boolean
    Password?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MovieComments?: boolean | Users$MovieCommentsArgs<ExtArgs>
    SeriesComments?: boolean | Users$SeriesCommentsArgs<ExtArgs>
    MovieRatings?: boolean | Users$MovieRatingsArgs<ExtArgs>
    SeriesRatings?: boolean | Users$SeriesRatingsArgs<ExtArgs>
    MovieNotes?: boolean | Users$MovieNotesArgs<ExtArgs>
    SeriesNotes?: boolean | Users$SeriesNotesArgs<ExtArgs>
    Scheduling?: boolean | Users$SchedulingArgs<ExtArgs>
    SharesSent?: boolean | Users$SharesSentArgs<ExtArgs>
    SharesReceived?: boolean | Users$SharesReceivedArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      MovieComments: Prisma.$MovieCommentsPayload<ExtArgs>[]
      SeriesComments: Prisma.$SeriesCommentsPayload<ExtArgs>[]
      MovieRatings: Prisma.$MovieRatingsPayload<ExtArgs>[]
      SeriesRatings: Prisma.$SeriesRatingsPayload<ExtArgs>[]
      MovieNotes: Prisma.$MovieNotesPayload<ExtArgs>[]
      SeriesNotes: Prisma.$SeriesNotesPayload<ExtArgs>[]
      Scheduling: Prisma.$SchedulingPayload<ExtArgs>[]
      SharesSent: Prisma.$SharesPayload<ExtArgs>[]
      SharesReceived: Prisma.$SharesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UserId: number
      Name: string
      Email: string
      Password: string
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `UserId`
     * const usersWithUserIdOnly = await prisma.users.findMany({ select: { UserId: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `UserId`
     * const usersWithUserIdOnly = await prisma.users.createManyAndReturn({ 
     *   select: { UserId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MovieComments<T extends Users$MovieCommentsArgs<ExtArgs> = {}>(args?: Subset<T, Users$MovieCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "findMany"> | Null>
    SeriesComments<T extends Users$SeriesCommentsArgs<ExtArgs> = {}>(args?: Subset<T, Users$SeriesCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "findMany"> | Null>
    MovieRatings<T extends Users$MovieRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Users$MovieRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "findMany"> | Null>
    SeriesRatings<T extends Users$SeriesRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Users$SeriesRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "findMany"> | Null>
    MovieNotes<T extends Users$MovieNotesArgs<ExtArgs> = {}>(args?: Subset<T, Users$MovieNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "findMany"> | Null>
    SeriesNotes<T extends Users$SeriesNotesArgs<ExtArgs> = {}>(args?: Subset<T, Users$SeriesNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "findMany"> | Null>
    Scheduling<T extends Users$SchedulingArgs<ExtArgs> = {}>(args?: Subset<T, Users$SchedulingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "findMany"> | Null>
    SharesSent<T extends Users$SharesSentArgs<ExtArgs> = {}>(args?: Subset<T, Users$SharesSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findMany"> | Null>
    SharesReceived<T extends Users$SharesReceivedArgs<ExtArgs> = {}>(args?: Subset<T, Users$SharesReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly UserId: FieldRef<"Users", 'Int'>
    readonly Name: FieldRef<"Users", 'String'>
    readonly Email: FieldRef<"Users", 'String'>
    readonly Password: FieldRef<"Users", 'String'>
    readonly CreatedAt: FieldRef<"Users", 'DateTime'>
    readonly UpdatedAt: FieldRef<"Users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }

  /**
   * Users.MovieComments
   */
  export type Users$MovieCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    where?: MovieCommentsWhereInput
    orderBy?: MovieCommentsOrderByWithRelationInput | MovieCommentsOrderByWithRelationInput[]
    cursor?: MovieCommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieCommentsScalarFieldEnum | MovieCommentsScalarFieldEnum[]
  }

  /**
   * Users.SeriesComments
   */
  export type Users$SeriesCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    where?: SeriesCommentsWhereInput
    orderBy?: SeriesCommentsOrderByWithRelationInput | SeriesCommentsOrderByWithRelationInput[]
    cursor?: SeriesCommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeriesCommentsScalarFieldEnum | SeriesCommentsScalarFieldEnum[]
  }

  /**
   * Users.MovieRatings
   */
  export type Users$MovieRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    where?: MovieRatingsWhereInput
    orderBy?: MovieRatingsOrderByWithRelationInput | MovieRatingsOrderByWithRelationInput[]
    cursor?: MovieRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieRatingsScalarFieldEnum | MovieRatingsScalarFieldEnum[]
  }

  /**
   * Users.SeriesRatings
   */
  export type Users$SeriesRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    where?: SeriesRatingsWhereInput
    orderBy?: SeriesRatingsOrderByWithRelationInput | SeriesRatingsOrderByWithRelationInput[]
    cursor?: SeriesRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeriesRatingsScalarFieldEnum | SeriesRatingsScalarFieldEnum[]
  }

  /**
   * Users.MovieNotes
   */
  export type Users$MovieNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    where?: MovieNotesWhereInput
    orderBy?: MovieNotesOrderByWithRelationInput | MovieNotesOrderByWithRelationInput[]
    cursor?: MovieNotesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieNotesScalarFieldEnum | MovieNotesScalarFieldEnum[]
  }

  /**
   * Users.SeriesNotes
   */
  export type Users$SeriesNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    where?: SeriesNotesWhereInput
    orderBy?: SeriesNotesOrderByWithRelationInput | SeriesNotesOrderByWithRelationInput[]
    cursor?: SeriesNotesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeriesNotesScalarFieldEnum | SeriesNotesScalarFieldEnum[]
  }

  /**
   * Users.Scheduling
   */
  export type Users$SchedulingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    where?: SchedulingWhereInput
    orderBy?: SchedulingOrderByWithRelationInput | SchedulingOrderByWithRelationInput[]
    cursor?: SchedulingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchedulingScalarFieldEnum | SchedulingScalarFieldEnum[]
  }

  /**
   * Users.SharesSent
   */
  export type Users$SharesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    where?: SharesWhereInput
    orderBy?: SharesOrderByWithRelationInput | SharesOrderByWithRelationInput[]
    cursor?: SharesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SharesScalarFieldEnum | SharesScalarFieldEnum[]
  }

  /**
   * Users.SharesReceived
   */
  export type Users$SharesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    where?: SharesWhereInput
    orderBy?: SharesOrderByWithRelationInput | SharesOrderByWithRelationInput[]
    cursor?: SharesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SharesScalarFieldEnum | SharesScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Movies
   */

  export type AggregateMovies = {
    _count: MoviesCountAggregateOutputType | null
    _avg: MoviesAvgAggregateOutputType | null
    _sum: MoviesSumAggregateOutputType | null
    _min: MoviesMinAggregateOutputType | null
    _max: MoviesMaxAggregateOutputType | null
  }

  export type MoviesAvgAggregateOutputType = {
    MovieId: number | null
  }

  export type MoviesSumAggregateOutputType = {
    MovieId: number | null
  }

  export type MoviesMinAggregateOutputType = {
    MovieId: number | null
    Title: string | null
    Genre: string | null
    ReleaseDate: Date | null
    Description: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MoviesMaxAggregateOutputType = {
    MovieId: number | null
    Title: string | null
    Genre: string | null
    ReleaseDate: Date | null
    Description: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MoviesCountAggregateOutputType = {
    MovieId: number
    Title: number
    Genre: number
    ReleaseDate: number
    Description: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type MoviesAvgAggregateInputType = {
    MovieId?: true
  }

  export type MoviesSumAggregateInputType = {
    MovieId?: true
  }

  export type MoviesMinAggregateInputType = {
    MovieId?: true
    Title?: true
    Genre?: true
    ReleaseDate?: true
    Description?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MoviesMaxAggregateInputType = {
    MovieId?: true
    Title?: true
    Genre?: true
    ReleaseDate?: true
    Description?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MoviesCountAggregateInputType = {
    MovieId?: true
    Title?: true
    Genre?: true
    ReleaseDate?: true
    Description?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type MoviesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movies to aggregate.
     */
    where?: MoviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MoviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movies
    **/
    _count?: true | MoviesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MoviesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MoviesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MoviesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MoviesMaxAggregateInputType
  }

  export type GetMoviesAggregateType<T extends MoviesAggregateArgs> = {
        [P in keyof T & keyof AggregateMovies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovies[P]>
      : GetScalarType<T[P], AggregateMovies[P]>
  }




  export type MoviesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MoviesWhereInput
    orderBy?: MoviesOrderByWithAggregationInput | MoviesOrderByWithAggregationInput[]
    by: MoviesScalarFieldEnum[] | MoviesScalarFieldEnum
    having?: MoviesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MoviesCountAggregateInputType | true
    _avg?: MoviesAvgAggregateInputType
    _sum?: MoviesSumAggregateInputType
    _min?: MoviesMinAggregateInputType
    _max?: MoviesMaxAggregateInputType
  }

  export type MoviesGroupByOutputType = {
    MovieId: number
    Title: string
    Genre: string
    ReleaseDate: Date
    Description: string | null
    CreatedAt: Date
    UpdatedAt: Date
    _count: MoviesCountAggregateOutputType | null
    _avg: MoviesAvgAggregateOutputType | null
    _sum: MoviesSumAggregateOutputType | null
    _min: MoviesMinAggregateOutputType | null
    _max: MoviesMaxAggregateOutputType | null
  }

  type GetMoviesGroupByPayload<T extends MoviesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MoviesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MoviesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MoviesGroupByOutputType[P]>
            : GetScalarType<T[P], MoviesGroupByOutputType[P]>
        }
      >
    >


  export type MoviesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieId?: boolean
    Title?: boolean
    Genre?: boolean
    ReleaseDate?: boolean
    Description?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    MovieRatings?: boolean | Movies$MovieRatingsArgs<ExtArgs>
    MovieComments?: boolean | Movies$MovieCommentsArgs<ExtArgs>
    MovieNotes?: boolean | Movies$MovieNotesArgs<ExtArgs>
    Scheduling?: boolean | Movies$SchedulingArgs<ExtArgs>
    MovieCategoryRelations?: boolean | Movies$MovieCategoryRelationsArgs<ExtArgs>
    Shares?: boolean | Movies$SharesArgs<ExtArgs>
    _count?: boolean | MoviesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movies"]>

  export type MoviesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieId?: boolean
    Title?: boolean
    Genre?: boolean
    ReleaseDate?: boolean
    Description?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }, ExtArgs["result"]["movies"]>

  export type MoviesSelectScalar = {
    MovieId?: boolean
    Title?: boolean
    Genre?: boolean
    ReleaseDate?: boolean
    Description?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type MoviesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MovieRatings?: boolean | Movies$MovieRatingsArgs<ExtArgs>
    MovieComments?: boolean | Movies$MovieCommentsArgs<ExtArgs>
    MovieNotes?: boolean | Movies$MovieNotesArgs<ExtArgs>
    Scheduling?: boolean | Movies$SchedulingArgs<ExtArgs>
    MovieCategoryRelations?: boolean | Movies$MovieCategoryRelationsArgs<ExtArgs>
    Shares?: boolean | Movies$SharesArgs<ExtArgs>
    _count?: boolean | MoviesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MoviesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MoviesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Movies"
    objects: {
      MovieRatings: Prisma.$MovieRatingsPayload<ExtArgs>[]
      MovieComments: Prisma.$MovieCommentsPayload<ExtArgs>[]
      MovieNotes: Prisma.$MovieNotesPayload<ExtArgs>[]
      Scheduling: Prisma.$SchedulingPayload<ExtArgs>[]
      MovieCategoryRelations: Prisma.$MovieCategoryRelationsPayload<ExtArgs>[]
      Shares: Prisma.$SharesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      MovieId: number
      Title: string
      Genre: string
      ReleaseDate: Date
      Description: string | null
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["movies"]>
    composites: {}
  }

  type MoviesGetPayload<S extends boolean | null | undefined | MoviesDefaultArgs> = $Result.GetResult<Prisma.$MoviesPayload, S>

  type MoviesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MoviesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MoviesCountAggregateInputType | true
    }

  export interface MoviesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Movies'], meta: { name: 'Movies' } }
    /**
     * Find zero or one Movies that matches the filter.
     * @param {MoviesFindUniqueArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MoviesFindUniqueArgs>(args: SelectSubset<T, MoviesFindUniqueArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Movies that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MoviesFindUniqueOrThrowArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MoviesFindUniqueOrThrowArgs>(args: SelectSubset<T, MoviesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesFindFirstArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MoviesFindFirstArgs>(args?: SelectSubset<T, MoviesFindFirstArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Movies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesFindFirstOrThrowArgs} args - Arguments to find a Movies
     * @example
     * // Get one Movies
     * const movies = await prisma.movies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MoviesFindFirstOrThrowArgs>(args?: SelectSubset<T, MoviesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Movies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movies
     * const movies = await prisma.movies.findMany()
     * 
     * // Get first 10 Movies
     * const movies = await prisma.movies.findMany({ take: 10 })
     * 
     * // Only select the `MovieId`
     * const moviesWithMovieIdOnly = await prisma.movies.findMany({ select: { MovieId: true } })
     * 
     */
    findMany<T extends MoviesFindManyArgs>(args?: SelectSubset<T, MoviesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Movies.
     * @param {MoviesCreateArgs} args - Arguments to create a Movies.
     * @example
     * // Create one Movies
     * const Movies = await prisma.movies.create({
     *   data: {
     *     // ... data to create a Movies
     *   }
     * })
     * 
     */
    create<T extends MoviesCreateArgs>(args: SelectSubset<T, MoviesCreateArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Movies.
     * @param {MoviesCreateManyArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movies = await prisma.movies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MoviesCreateManyArgs>(args?: SelectSubset<T, MoviesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Movies and returns the data saved in the database.
     * @param {MoviesCreateManyAndReturnArgs} args - Arguments to create many Movies.
     * @example
     * // Create many Movies
     * const movies = await prisma.movies.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Movies and only return the `MovieId`
     * const moviesWithMovieIdOnly = await prisma.movies.createManyAndReturn({ 
     *   select: { MovieId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MoviesCreateManyAndReturnArgs>(args?: SelectSubset<T, MoviesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Movies.
     * @param {MoviesDeleteArgs} args - Arguments to delete one Movies.
     * @example
     * // Delete one Movies
     * const Movies = await prisma.movies.delete({
     *   where: {
     *     // ... filter to delete one Movies
     *   }
     * })
     * 
     */
    delete<T extends MoviesDeleteArgs>(args: SelectSubset<T, MoviesDeleteArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Movies.
     * @param {MoviesUpdateArgs} args - Arguments to update one Movies.
     * @example
     * // Update one Movies
     * const movies = await prisma.movies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MoviesUpdateArgs>(args: SelectSubset<T, MoviesUpdateArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Movies.
     * @param {MoviesDeleteManyArgs} args - Arguments to filter Movies to delete.
     * @example
     * // Delete a few Movies
     * const { count } = await prisma.movies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MoviesDeleteManyArgs>(args?: SelectSubset<T, MoviesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movies
     * const movies = await prisma.movies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MoviesUpdateManyArgs>(args: SelectSubset<T, MoviesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Movies.
     * @param {MoviesUpsertArgs} args - Arguments to update or create a Movies.
     * @example
     * // Update or create a Movies
     * const movies = await prisma.movies.upsert({
     *   create: {
     *     // ... data to create a Movies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movies we want to update
     *   }
     * })
     */
    upsert<T extends MoviesUpsertArgs>(args: SelectSubset<T, MoviesUpsertArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesCountArgs} args - Arguments to filter Movies to count.
     * @example
     * // Count the number of Movies
     * const count = await prisma.movies.count({
     *   where: {
     *     // ... the filter for the Movies we want to count
     *   }
     * })
    **/
    count<T extends MoviesCountArgs>(
      args?: Subset<T, MoviesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MoviesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MoviesAggregateArgs>(args: Subset<T, MoviesAggregateArgs>): Prisma.PrismaPromise<GetMoviesAggregateType<T>>

    /**
     * Group by Movies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MoviesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MoviesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MoviesGroupByArgs['orderBy'] }
        : { orderBy?: MoviesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MoviesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMoviesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Movies model
   */
  readonly fields: MoviesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Movies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MoviesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MovieRatings<T extends Movies$MovieRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Movies$MovieRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "findMany"> | Null>
    MovieComments<T extends Movies$MovieCommentsArgs<ExtArgs> = {}>(args?: Subset<T, Movies$MovieCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "findMany"> | Null>
    MovieNotes<T extends Movies$MovieNotesArgs<ExtArgs> = {}>(args?: Subset<T, Movies$MovieNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "findMany"> | Null>
    Scheduling<T extends Movies$SchedulingArgs<ExtArgs> = {}>(args?: Subset<T, Movies$SchedulingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "findMany"> | Null>
    MovieCategoryRelations<T extends Movies$MovieCategoryRelationsArgs<ExtArgs> = {}>(args?: Subset<T, Movies$MovieCategoryRelationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "findMany"> | Null>
    Shares<T extends Movies$SharesArgs<ExtArgs> = {}>(args?: Subset<T, Movies$SharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Movies model
   */ 
  interface MoviesFieldRefs {
    readonly MovieId: FieldRef<"Movies", 'Int'>
    readonly Title: FieldRef<"Movies", 'String'>
    readonly Genre: FieldRef<"Movies", 'String'>
    readonly ReleaseDate: FieldRef<"Movies", 'DateTime'>
    readonly Description: FieldRef<"Movies", 'String'>
    readonly CreatedAt: FieldRef<"Movies", 'DateTime'>
    readonly UpdatedAt: FieldRef<"Movies", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Movies findUnique
   */
  export type MoviesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where: MoviesWhereUniqueInput
  }

  /**
   * Movies findUniqueOrThrow
   */
  export type MoviesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where: MoviesWhereUniqueInput
  }

  /**
   * Movies findFirst
   */
  export type MoviesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where?: MoviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
     */
    cursor?: MoviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movies.
     */
    distinct?: MoviesScalarFieldEnum | MoviesScalarFieldEnum[]
  }

  /**
   * Movies findFirstOrThrow
   */
  export type MoviesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where?: MoviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
     */
    cursor?: MoviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Movies.
     */
    distinct?: MoviesScalarFieldEnum | MoviesScalarFieldEnum[]
  }

  /**
   * Movies findMany
   */
  export type MoviesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter, which Movies to fetch.
     */
    where?: MoviesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Movies to fetch.
     */
    orderBy?: MoviesOrderByWithRelationInput | MoviesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movies.
     */
    cursor?: MoviesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
     */
    skip?: number
    distinct?: MoviesScalarFieldEnum | MoviesScalarFieldEnum[]
  }

  /**
   * Movies create
   */
  export type MoviesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * The data needed to create a Movies.
     */
    data: XOR<MoviesCreateInput, MoviesUncheckedCreateInput>
  }

  /**
   * Movies createMany
   */
  export type MoviesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Movies.
     */
    data: MoviesCreateManyInput | MoviesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movies createManyAndReturn
   */
  export type MoviesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Movies.
     */
    data: MoviesCreateManyInput | MoviesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Movies update
   */
  export type MoviesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * The data needed to update a Movies.
     */
    data: XOR<MoviesUpdateInput, MoviesUncheckedUpdateInput>
    /**
     * Choose, which Movies to update.
     */
    where: MoviesWhereUniqueInput
  }

  /**
   * Movies updateMany
   */
  export type MoviesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Movies.
     */
    data: XOR<MoviesUpdateManyMutationInput, MoviesUncheckedUpdateManyInput>
    /**
     * Filter which Movies to update
     */
    where?: MoviesWhereInput
  }

  /**
   * Movies upsert
   */
  export type MoviesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * The filter to search for the Movies to update in case it exists.
     */
    where: MoviesWhereUniqueInput
    /**
     * In case the Movies found by the `where` argument doesn't exist, create a new Movies with this data.
     */
    create: XOR<MoviesCreateInput, MoviesUncheckedCreateInput>
    /**
     * In case the Movies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MoviesUpdateInput, MoviesUncheckedUpdateInput>
  }

  /**
   * Movies delete
   */
  export type MoviesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    /**
     * Filter which Movies to delete.
     */
    where: MoviesWhereUniqueInput
  }

  /**
   * Movies deleteMany
   */
  export type MoviesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Movies to delete
     */
    where?: MoviesWhereInput
  }

  /**
   * Movies.MovieRatings
   */
  export type Movies$MovieRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    where?: MovieRatingsWhereInput
    orderBy?: MovieRatingsOrderByWithRelationInput | MovieRatingsOrderByWithRelationInput[]
    cursor?: MovieRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieRatingsScalarFieldEnum | MovieRatingsScalarFieldEnum[]
  }

  /**
   * Movies.MovieComments
   */
  export type Movies$MovieCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    where?: MovieCommentsWhereInput
    orderBy?: MovieCommentsOrderByWithRelationInput | MovieCommentsOrderByWithRelationInput[]
    cursor?: MovieCommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieCommentsScalarFieldEnum | MovieCommentsScalarFieldEnum[]
  }

  /**
   * Movies.MovieNotes
   */
  export type Movies$MovieNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    where?: MovieNotesWhereInput
    orderBy?: MovieNotesOrderByWithRelationInput | MovieNotesOrderByWithRelationInput[]
    cursor?: MovieNotesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieNotesScalarFieldEnum | MovieNotesScalarFieldEnum[]
  }

  /**
   * Movies.Scheduling
   */
  export type Movies$SchedulingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    where?: SchedulingWhereInput
    orderBy?: SchedulingOrderByWithRelationInput | SchedulingOrderByWithRelationInput[]
    cursor?: SchedulingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchedulingScalarFieldEnum | SchedulingScalarFieldEnum[]
  }

  /**
   * Movies.MovieCategoryRelations
   */
  export type Movies$MovieCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    where?: MovieCategoryRelationsWhereInput
    orderBy?: MovieCategoryRelationsOrderByWithRelationInput | MovieCategoryRelationsOrderByWithRelationInput[]
    cursor?: MovieCategoryRelationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieCategoryRelationsScalarFieldEnum | MovieCategoryRelationsScalarFieldEnum[]
  }

  /**
   * Movies.Shares
   */
  export type Movies$SharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    where?: SharesWhereInput
    orderBy?: SharesOrderByWithRelationInput | SharesOrderByWithRelationInput[]
    cursor?: SharesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SharesScalarFieldEnum | SharesScalarFieldEnum[]
  }

  /**
   * Movies without action
   */
  export type MoviesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
  }


  /**
   * Model Series
   */

  export type AggregateSeries = {
    _count: SeriesCountAggregateOutputType | null
    _avg: SeriesAvgAggregateOutputType | null
    _sum: SeriesSumAggregateOutputType | null
    _min: SeriesMinAggregateOutputType | null
    _max: SeriesMaxAggregateOutputType | null
  }

  export type SeriesAvgAggregateOutputType = {
    SeriesId: number | null
    SeasonsCount: number | null
  }

  export type SeriesSumAggregateOutputType = {
    SeriesId: number | null
    SeasonsCount: number | null
  }

  export type SeriesMinAggregateOutputType = {
    SeriesId: number | null
    Title: string | null
    Genre: string | null
    ReleaseDate: Date | null
    Description: string | null
    SeasonsCount: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesMaxAggregateOutputType = {
    SeriesId: number | null
    Title: string | null
    Genre: string | null
    ReleaseDate: Date | null
    Description: string | null
    SeasonsCount: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesCountAggregateOutputType = {
    SeriesId: number
    Title: number
    Genre: number
    ReleaseDate: number
    Description: number
    SeasonsCount: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type SeriesAvgAggregateInputType = {
    SeriesId?: true
    SeasonsCount?: true
  }

  export type SeriesSumAggregateInputType = {
    SeriesId?: true
    SeasonsCount?: true
  }

  export type SeriesMinAggregateInputType = {
    SeriesId?: true
    Title?: true
    Genre?: true
    ReleaseDate?: true
    Description?: true
    SeasonsCount?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesMaxAggregateInputType = {
    SeriesId?: true
    Title?: true
    Genre?: true
    ReleaseDate?: true
    Description?: true
    SeasonsCount?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesCountAggregateInputType = {
    SeriesId?: true
    Title?: true
    Genre?: true
    ReleaseDate?: true
    Description?: true
    SeasonsCount?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type SeriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Series to aggregate.
     */
    where?: SeriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: SeriesOrderByWithRelationInput | SeriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Series
    **/
    _count?: true | SeriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeriesMaxAggregateInputType
  }

  export type GetSeriesAggregateType<T extends SeriesAggregateArgs> = {
        [P in keyof T & keyof AggregateSeries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeries[P]>
      : GetScalarType<T[P], AggregateSeries[P]>
  }




  export type SeriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesWhereInput
    orderBy?: SeriesOrderByWithAggregationInput | SeriesOrderByWithAggregationInput[]
    by: SeriesScalarFieldEnum[] | SeriesScalarFieldEnum
    having?: SeriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeriesCountAggregateInputType | true
    _avg?: SeriesAvgAggregateInputType
    _sum?: SeriesSumAggregateInputType
    _min?: SeriesMinAggregateInputType
    _max?: SeriesMaxAggregateInputType
  }

  export type SeriesGroupByOutputType = {
    SeriesId: number
    Title: string
    Genre: string
    ReleaseDate: Date
    Description: string | null
    SeasonsCount: number
    CreatedAt: Date
    UpdatedAt: Date
    _count: SeriesCountAggregateOutputType | null
    _avg: SeriesAvgAggregateOutputType | null
    _sum: SeriesSumAggregateOutputType | null
    _min: SeriesMinAggregateOutputType | null
    _max: SeriesMaxAggregateOutputType | null
  }

  type GetSeriesGroupByPayload<T extends SeriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeriesGroupByOutputType[P]>
            : GetScalarType<T[P], SeriesGroupByOutputType[P]>
        }
      >
    >


  export type SeriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesId?: boolean
    Title?: boolean
    Genre?: boolean
    ReleaseDate?: boolean
    Description?: boolean
    SeasonsCount?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    SeriesRatings?: boolean | Series$SeriesRatingsArgs<ExtArgs>
    SeriesComments?: boolean | Series$SeriesCommentsArgs<ExtArgs>
    SeriesNotes?: boolean | Series$SeriesNotesArgs<ExtArgs>
    Scheduling?: boolean | Series$SchedulingArgs<ExtArgs>
    SeriesCategoryRelations?: boolean | Series$SeriesCategoryRelationsArgs<ExtArgs>
    Shares?: boolean | Series$SharesArgs<ExtArgs>
    _count?: boolean | SeriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["series"]>

  export type SeriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesId?: boolean
    Title?: boolean
    Genre?: boolean
    ReleaseDate?: boolean
    Description?: boolean
    SeasonsCount?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }, ExtArgs["result"]["series"]>

  export type SeriesSelectScalar = {
    SeriesId?: boolean
    Title?: boolean
    Genre?: boolean
    ReleaseDate?: boolean
    Description?: boolean
    SeasonsCount?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type SeriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SeriesRatings?: boolean | Series$SeriesRatingsArgs<ExtArgs>
    SeriesComments?: boolean | Series$SeriesCommentsArgs<ExtArgs>
    SeriesNotes?: boolean | Series$SeriesNotesArgs<ExtArgs>
    Scheduling?: boolean | Series$SchedulingArgs<ExtArgs>
    SeriesCategoryRelations?: boolean | Series$SeriesCategoryRelationsArgs<ExtArgs>
    Shares?: boolean | Series$SharesArgs<ExtArgs>
    _count?: boolean | SeriesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeriesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SeriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Series"
    objects: {
      SeriesRatings: Prisma.$SeriesRatingsPayload<ExtArgs>[]
      SeriesComments: Prisma.$SeriesCommentsPayload<ExtArgs>[]
      SeriesNotes: Prisma.$SeriesNotesPayload<ExtArgs>[]
      Scheduling: Prisma.$SchedulingPayload<ExtArgs>[]
      SeriesCategoryRelations: Prisma.$SeriesCategoryRelationsPayload<ExtArgs>[]
      Shares: Prisma.$SharesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      SeriesId: number
      Title: string
      Genre: string
      ReleaseDate: Date
      Description: string | null
      SeasonsCount: number
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["series"]>
    composites: {}
  }

  type SeriesGetPayload<S extends boolean | null | undefined | SeriesDefaultArgs> = $Result.GetResult<Prisma.$SeriesPayload, S>

  type SeriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeriesCountAggregateInputType | true
    }

  export interface SeriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Series'], meta: { name: 'Series' } }
    /**
     * Find zero or one Series that matches the filter.
     * @param {SeriesFindUniqueArgs} args - Arguments to find a Series
     * @example
     * // Get one Series
     * const series = await prisma.series.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeriesFindUniqueArgs>(args: SelectSubset<T, SeriesFindUniqueArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Series that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeriesFindUniqueOrThrowArgs} args - Arguments to find a Series
     * @example
     * // Get one Series
     * const series = await prisma.series.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeriesFindUniqueOrThrowArgs>(args: SelectSubset<T, SeriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Series that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesFindFirstArgs} args - Arguments to find a Series
     * @example
     * // Get one Series
     * const series = await prisma.series.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeriesFindFirstArgs>(args?: SelectSubset<T, SeriesFindFirstArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Series that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesFindFirstOrThrowArgs} args - Arguments to find a Series
     * @example
     * // Get one Series
     * const series = await prisma.series.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeriesFindFirstOrThrowArgs>(args?: SelectSubset<T, SeriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Series that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Series
     * const series = await prisma.series.findMany()
     * 
     * // Get first 10 Series
     * const series = await prisma.series.findMany({ take: 10 })
     * 
     * // Only select the `SeriesId`
     * const seriesWithSeriesIdOnly = await prisma.series.findMany({ select: { SeriesId: true } })
     * 
     */
    findMany<T extends SeriesFindManyArgs>(args?: SelectSubset<T, SeriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Series.
     * @param {SeriesCreateArgs} args - Arguments to create a Series.
     * @example
     * // Create one Series
     * const Series = await prisma.series.create({
     *   data: {
     *     // ... data to create a Series
     *   }
     * })
     * 
     */
    create<T extends SeriesCreateArgs>(args: SelectSubset<T, SeriesCreateArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Series.
     * @param {SeriesCreateManyArgs} args - Arguments to create many Series.
     * @example
     * // Create many Series
     * const series = await prisma.series.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeriesCreateManyArgs>(args?: SelectSubset<T, SeriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Series and returns the data saved in the database.
     * @param {SeriesCreateManyAndReturnArgs} args - Arguments to create many Series.
     * @example
     * // Create many Series
     * const series = await prisma.series.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Series and only return the `SeriesId`
     * const seriesWithSeriesIdOnly = await prisma.series.createManyAndReturn({ 
     *   select: { SeriesId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeriesCreateManyAndReturnArgs>(args?: SelectSubset<T, SeriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Series.
     * @param {SeriesDeleteArgs} args - Arguments to delete one Series.
     * @example
     * // Delete one Series
     * const Series = await prisma.series.delete({
     *   where: {
     *     // ... filter to delete one Series
     *   }
     * })
     * 
     */
    delete<T extends SeriesDeleteArgs>(args: SelectSubset<T, SeriesDeleteArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Series.
     * @param {SeriesUpdateArgs} args - Arguments to update one Series.
     * @example
     * // Update one Series
     * const series = await prisma.series.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeriesUpdateArgs>(args: SelectSubset<T, SeriesUpdateArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Series.
     * @param {SeriesDeleteManyArgs} args - Arguments to filter Series to delete.
     * @example
     * // Delete a few Series
     * const { count } = await prisma.series.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeriesDeleteManyArgs>(args?: SelectSubset<T, SeriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Series
     * const series = await prisma.series.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeriesUpdateManyArgs>(args: SelectSubset<T, SeriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Series.
     * @param {SeriesUpsertArgs} args - Arguments to update or create a Series.
     * @example
     * // Update or create a Series
     * const series = await prisma.series.upsert({
     *   create: {
     *     // ... data to create a Series
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Series we want to update
     *   }
     * })
     */
    upsert<T extends SeriesUpsertArgs>(args: SelectSubset<T, SeriesUpsertArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCountArgs} args - Arguments to filter Series to count.
     * @example
     * // Count the number of Series
     * const count = await prisma.series.count({
     *   where: {
     *     // ... the filter for the Series we want to count
     *   }
     * })
    **/
    count<T extends SeriesCountArgs>(
      args?: Subset<T, SeriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeriesAggregateArgs>(args: Subset<T, SeriesAggregateArgs>): Prisma.PrismaPromise<GetSeriesAggregateType<T>>

    /**
     * Group by Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeriesGroupByArgs['orderBy'] }
        : { orderBy?: SeriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Series model
   */
  readonly fields: SeriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Series.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    SeriesRatings<T extends Series$SeriesRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Series$SeriesRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "findMany"> | Null>
    SeriesComments<T extends Series$SeriesCommentsArgs<ExtArgs> = {}>(args?: Subset<T, Series$SeriesCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "findMany"> | Null>
    SeriesNotes<T extends Series$SeriesNotesArgs<ExtArgs> = {}>(args?: Subset<T, Series$SeriesNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "findMany"> | Null>
    Scheduling<T extends Series$SchedulingArgs<ExtArgs> = {}>(args?: Subset<T, Series$SchedulingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "findMany"> | Null>
    SeriesCategoryRelations<T extends Series$SeriesCategoryRelationsArgs<ExtArgs> = {}>(args?: Subset<T, Series$SeriesCategoryRelationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "findMany"> | Null>
    Shares<T extends Series$SharesArgs<ExtArgs> = {}>(args?: Subset<T, Series$SharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Series model
   */ 
  interface SeriesFieldRefs {
    readonly SeriesId: FieldRef<"Series", 'Int'>
    readonly Title: FieldRef<"Series", 'String'>
    readonly Genre: FieldRef<"Series", 'String'>
    readonly ReleaseDate: FieldRef<"Series", 'DateTime'>
    readonly Description: FieldRef<"Series", 'String'>
    readonly SeasonsCount: FieldRef<"Series", 'Int'>
    readonly CreatedAt: FieldRef<"Series", 'DateTime'>
    readonly UpdatedAt: FieldRef<"Series", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Series findUnique
   */
  export type SeriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * Filter, which Series to fetch.
     */
    where: SeriesWhereUniqueInput
  }

  /**
   * Series findUniqueOrThrow
   */
  export type SeriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * Filter, which Series to fetch.
     */
    where: SeriesWhereUniqueInput
  }

  /**
   * Series findFirst
   */
  export type SeriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * Filter, which Series to fetch.
     */
    where?: SeriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: SeriesOrderByWithRelationInput | SeriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Series.
     */
    cursor?: SeriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Series.
     */
    distinct?: SeriesScalarFieldEnum | SeriesScalarFieldEnum[]
  }

  /**
   * Series findFirstOrThrow
   */
  export type SeriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * Filter, which Series to fetch.
     */
    where?: SeriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: SeriesOrderByWithRelationInput | SeriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Series.
     */
    cursor?: SeriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Series.
     */
    distinct?: SeriesScalarFieldEnum | SeriesScalarFieldEnum[]
  }

  /**
   * Series findMany
   */
  export type SeriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * Filter, which Series to fetch.
     */
    where?: SeriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: SeriesOrderByWithRelationInput | SeriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Series.
     */
    cursor?: SeriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    distinct?: SeriesScalarFieldEnum | SeriesScalarFieldEnum[]
  }

  /**
   * Series create
   */
  export type SeriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * The data needed to create a Series.
     */
    data: XOR<SeriesCreateInput, SeriesUncheckedCreateInput>
  }

  /**
   * Series createMany
   */
  export type SeriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Series.
     */
    data: SeriesCreateManyInput | SeriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Series createManyAndReturn
   */
  export type SeriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Series.
     */
    data: SeriesCreateManyInput | SeriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Series update
   */
  export type SeriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * The data needed to update a Series.
     */
    data: XOR<SeriesUpdateInput, SeriesUncheckedUpdateInput>
    /**
     * Choose, which Series to update.
     */
    where: SeriesWhereUniqueInput
  }

  /**
   * Series updateMany
   */
  export type SeriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Series.
     */
    data: XOR<SeriesUpdateManyMutationInput, SeriesUncheckedUpdateManyInput>
    /**
     * Filter which Series to update
     */
    where?: SeriesWhereInput
  }

  /**
   * Series upsert
   */
  export type SeriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * The filter to search for the Series to update in case it exists.
     */
    where: SeriesWhereUniqueInput
    /**
     * In case the Series found by the `where` argument doesn't exist, create a new Series with this data.
     */
    create: XOR<SeriesCreateInput, SeriesUncheckedCreateInput>
    /**
     * In case the Series was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeriesUpdateInput, SeriesUncheckedUpdateInput>
  }

  /**
   * Series delete
   */
  export type SeriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    /**
     * Filter which Series to delete.
     */
    where: SeriesWhereUniqueInput
  }

  /**
   * Series deleteMany
   */
  export type SeriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Series to delete
     */
    where?: SeriesWhereInput
  }

  /**
   * Series.SeriesRatings
   */
  export type Series$SeriesRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    where?: SeriesRatingsWhereInput
    orderBy?: SeriesRatingsOrderByWithRelationInput | SeriesRatingsOrderByWithRelationInput[]
    cursor?: SeriesRatingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeriesRatingsScalarFieldEnum | SeriesRatingsScalarFieldEnum[]
  }

  /**
   * Series.SeriesComments
   */
  export type Series$SeriesCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    where?: SeriesCommentsWhereInput
    orderBy?: SeriesCommentsOrderByWithRelationInput | SeriesCommentsOrderByWithRelationInput[]
    cursor?: SeriesCommentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeriesCommentsScalarFieldEnum | SeriesCommentsScalarFieldEnum[]
  }

  /**
   * Series.SeriesNotes
   */
  export type Series$SeriesNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    where?: SeriesNotesWhereInput
    orderBy?: SeriesNotesOrderByWithRelationInput | SeriesNotesOrderByWithRelationInput[]
    cursor?: SeriesNotesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeriesNotesScalarFieldEnum | SeriesNotesScalarFieldEnum[]
  }

  /**
   * Series.Scheduling
   */
  export type Series$SchedulingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    where?: SchedulingWhereInput
    orderBy?: SchedulingOrderByWithRelationInput | SchedulingOrderByWithRelationInput[]
    cursor?: SchedulingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchedulingScalarFieldEnum | SchedulingScalarFieldEnum[]
  }

  /**
   * Series.SeriesCategoryRelations
   */
  export type Series$SeriesCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    where?: SeriesCategoryRelationsWhereInput
    orderBy?: SeriesCategoryRelationsOrderByWithRelationInput | SeriesCategoryRelationsOrderByWithRelationInput[]
    cursor?: SeriesCategoryRelationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeriesCategoryRelationsScalarFieldEnum | SeriesCategoryRelationsScalarFieldEnum[]
  }

  /**
   * Series.Shares
   */
  export type Series$SharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    where?: SharesWhereInput
    orderBy?: SharesOrderByWithRelationInput | SharesOrderByWithRelationInput[]
    cursor?: SharesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SharesScalarFieldEnum | SharesScalarFieldEnum[]
  }

  /**
   * Series without action
   */
  export type SeriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
  }


  /**
   * Model MovieRatings
   */

  export type AggregateMovieRatings = {
    _count: MovieRatingsCountAggregateOutputType | null
    _avg: MovieRatingsAvgAggregateOutputType | null
    _sum: MovieRatingsSumAggregateOutputType | null
    _min: MovieRatingsMinAggregateOutputType | null
    _max: MovieRatingsMaxAggregateOutputType | null
  }

  export type MovieRatingsAvgAggregateOutputType = {
    MovieRatingId: number | null
    UserId: number | null
    MovieId: number | null
    Rating: number | null
  }

  export type MovieRatingsSumAggregateOutputType = {
    MovieRatingId: number | null
    UserId: number | null
    MovieId: number | null
    Rating: number | null
  }

  export type MovieRatingsMinAggregateOutputType = {
    MovieRatingId: number | null
    UserId: number | null
    MovieId: number | null
    Rating: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieRatingsMaxAggregateOutputType = {
    MovieRatingId: number | null
    UserId: number | null
    MovieId: number | null
    Rating: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieRatingsCountAggregateOutputType = {
    MovieRatingId: number
    UserId: number
    MovieId: number
    Rating: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type MovieRatingsAvgAggregateInputType = {
    MovieRatingId?: true
    UserId?: true
    MovieId?: true
    Rating?: true
  }

  export type MovieRatingsSumAggregateInputType = {
    MovieRatingId?: true
    UserId?: true
    MovieId?: true
    Rating?: true
  }

  export type MovieRatingsMinAggregateInputType = {
    MovieRatingId?: true
    UserId?: true
    MovieId?: true
    Rating?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieRatingsMaxAggregateInputType = {
    MovieRatingId?: true
    UserId?: true
    MovieId?: true
    Rating?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieRatingsCountAggregateInputType = {
    MovieRatingId?: true
    UserId?: true
    MovieId?: true
    Rating?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type MovieRatingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieRatings to aggregate.
     */
    where?: MovieRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieRatings to fetch.
     */
    orderBy?: MovieRatingsOrderByWithRelationInput | MovieRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovieRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MovieRatings
    **/
    _count?: true | MovieRatingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieRatingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieRatingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieRatingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieRatingsMaxAggregateInputType
  }

  export type GetMovieRatingsAggregateType<T extends MovieRatingsAggregateArgs> = {
        [P in keyof T & keyof AggregateMovieRatings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovieRatings[P]>
      : GetScalarType<T[P], AggregateMovieRatings[P]>
  }




  export type MovieRatingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieRatingsWhereInput
    orderBy?: MovieRatingsOrderByWithAggregationInput | MovieRatingsOrderByWithAggregationInput[]
    by: MovieRatingsScalarFieldEnum[] | MovieRatingsScalarFieldEnum
    having?: MovieRatingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieRatingsCountAggregateInputType | true
    _avg?: MovieRatingsAvgAggregateInputType
    _sum?: MovieRatingsSumAggregateInputType
    _min?: MovieRatingsMinAggregateInputType
    _max?: MovieRatingsMaxAggregateInputType
  }

  export type MovieRatingsGroupByOutputType = {
    MovieRatingId: number
    UserId: number
    MovieId: number
    Rating: number
    CreatedAt: Date
    UpdatedAt: Date
    _count: MovieRatingsCountAggregateOutputType | null
    _avg: MovieRatingsAvgAggregateOutputType | null
    _sum: MovieRatingsSumAggregateOutputType | null
    _min: MovieRatingsMinAggregateOutputType | null
    _max: MovieRatingsMaxAggregateOutputType | null
  }

  type GetMovieRatingsGroupByPayload<T extends MovieRatingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieRatingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieRatingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieRatingsGroupByOutputType[P]>
            : GetScalarType<T[P], MovieRatingsGroupByOutputType[P]>
        }
      >
    >


  export type MovieRatingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieRatingId?: boolean
    UserId?: boolean
    MovieId?: boolean
    Rating?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieRatings"]>

  export type MovieRatingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieRatingId?: boolean
    UserId?: boolean
    MovieId?: boolean
    Rating?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieRatings"]>

  export type MovieRatingsSelectScalar = {
    MovieRatingId?: boolean
    UserId?: boolean
    MovieId?: boolean
    Rating?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type MovieRatingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }
  export type MovieRatingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }

  export type $MovieRatingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MovieRatings"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Movie: Prisma.$MoviesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      MovieRatingId: number
      UserId: number
      MovieId: number
      Rating: number
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["movieRatings"]>
    composites: {}
  }

  type MovieRatingsGetPayload<S extends boolean | null | undefined | MovieRatingsDefaultArgs> = $Result.GetResult<Prisma.$MovieRatingsPayload, S>

  type MovieRatingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovieRatingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovieRatingsCountAggregateInputType | true
    }

  export interface MovieRatingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MovieRatings'], meta: { name: 'MovieRatings' } }
    /**
     * Find zero or one MovieRatings that matches the filter.
     * @param {MovieRatingsFindUniqueArgs} args - Arguments to find a MovieRatings
     * @example
     * // Get one MovieRatings
     * const movieRatings = await prisma.movieRatings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovieRatingsFindUniqueArgs>(args: SelectSubset<T, MovieRatingsFindUniqueArgs<ExtArgs>>): Prisma__MovieRatingsClient<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MovieRatings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovieRatingsFindUniqueOrThrowArgs} args - Arguments to find a MovieRatings
     * @example
     * // Get one MovieRatings
     * const movieRatings = await prisma.movieRatings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovieRatingsFindUniqueOrThrowArgs>(args: SelectSubset<T, MovieRatingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovieRatingsClient<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MovieRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieRatingsFindFirstArgs} args - Arguments to find a MovieRatings
     * @example
     * // Get one MovieRatings
     * const movieRatings = await prisma.movieRatings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovieRatingsFindFirstArgs>(args?: SelectSubset<T, MovieRatingsFindFirstArgs<ExtArgs>>): Prisma__MovieRatingsClient<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MovieRatings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieRatingsFindFirstOrThrowArgs} args - Arguments to find a MovieRatings
     * @example
     * // Get one MovieRatings
     * const movieRatings = await prisma.movieRatings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovieRatingsFindFirstOrThrowArgs>(args?: SelectSubset<T, MovieRatingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovieRatingsClient<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MovieRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieRatingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MovieRatings
     * const movieRatings = await prisma.movieRatings.findMany()
     * 
     * // Get first 10 MovieRatings
     * const movieRatings = await prisma.movieRatings.findMany({ take: 10 })
     * 
     * // Only select the `MovieRatingId`
     * const movieRatingsWithMovieRatingIdOnly = await prisma.movieRatings.findMany({ select: { MovieRatingId: true } })
     * 
     */
    findMany<T extends MovieRatingsFindManyArgs>(args?: SelectSubset<T, MovieRatingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MovieRatings.
     * @param {MovieRatingsCreateArgs} args - Arguments to create a MovieRatings.
     * @example
     * // Create one MovieRatings
     * const MovieRatings = await prisma.movieRatings.create({
     *   data: {
     *     // ... data to create a MovieRatings
     *   }
     * })
     * 
     */
    create<T extends MovieRatingsCreateArgs>(args: SelectSubset<T, MovieRatingsCreateArgs<ExtArgs>>): Prisma__MovieRatingsClient<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MovieRatings.
     * @param {MovieRatingsCreateManyArgs} args - Arguments to create many MovieRatings.
     * @example
     * // Create many MovieRatings
     * const movieRatings = await prisma.movieRatings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovieRatingsCreateManyArgs>(args?: SelectSubset<T, MovieRatingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MovieRatings and returns the data saved in the database.
     * @param {MovieRatingsCreateManyAndReturnArgs} args - Arguments to create many MovieRatings.
     * @example
     * // Create many MovieRatings
     * const movieRatings = await prisma.movieRatings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MovieRatings and only return the `MovieRatingId`
     * const movieRatingsWithMovieRatingIdOnly = await prisma.movieRatings.createManyAndReturn({ 
     *   select: { MovieRatingId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovieRatingsCreateManyAndReturnArgs>(args?: SelectSubset<T, MovieRatingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MovieRatings.
     * @param {MovieRatingsDeleteArgs} args - Arguments to delete one MovieRatings.
     * @example
     * // Delete one MovieRatings
     * const MovieRatings = await prisma.movieRatings.delete({
     *   where: {
     *     // ... filter to delete one MovieRatings
     *   }
     * })
     * 
     */
    delete<T extends MovieRatingsDeleteArgs>(args: SelectSubset<T, MovieRatingsDeleteArgs<ExtArgs>>): Prisma__MovieRatingsClient<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MovieRatings.
     * @param {MovieRatingsUpdateArgs} args - Arguments to update one MovieRatings.
     * @example
     * // Update one MovieRatings
     * const movieRatings = await prisma.movieRatings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovieRatingsUpdateArgs>(args: SelectSubset<T, MovieRatingsUpdateArgs<ExtArgs>>): Prisma__MovieRatingsClient<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MovieRatings.
     * @param {MovieRatingsDeleteManyArgs} args - Arguments to filter MovieRatings to delete.
     * @example
     * // Delete a few MovieRatings
     * const { count } = await prisma.movieRatings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovieRatingsDeleteManyArgs>(args?: SelectSubset<T, MovieRatingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovieRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieRatingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MovieRatings
     * const movieRatings = await prisma.movieRatings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovieRatingsUpdateManyArgs>(args: SelectSubset<T, MovieRatingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MovieRatings.
     * @param {MovieRatingsUpsertArgs} args - Arguments to update or create a MovieRatings.
     * @example
     * // Update or create a MovieRatings
     * const movieRatings = await prisma.movieRatings.upsert({
     *   create: {
     *     // ... data to create a MovieRatings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MovieRatings we want to update
     *   }
     * })
     */
    upsert<T extends MovieRatingsUpsertArgs>(args: SelectSubset<T, MovieRatingsUpsertArgs<ExtArgs>>): Prisma__MovieRatingsClient<$Result.GetResult<Prisma.$MovieRatingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MovieRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieRatingsCountArgs} args - Arguments to filter MovieRatings to count.
     * @example
     * // Count the number of MovieRatings
     * const count = await prisma.movieRatings.count({
     *   where: {
     *     // ... the filter for the MovieRatings we want to count
     *   }
     * })
    **/
    count<T extends MovieRatingsCountArgs>(
      args?: Subset<T, MovieRatingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieRatingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MovieRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieRatingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieRatingsAggregateArgs>(args: Subset<T, MovieRatingsAggregateArgs>): Prisma.PrismaPromise<GetMovieRatingsAggregateType<T>>

    /**
     * Group by MovieRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieRatingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieRatingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieRatingsGroupByArgs['orderBy'] }
        : { orderBy?: MovieRatingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieRatingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieRatingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MovieRatings model
   */
  readonly fields: MovieRatingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MovieRatings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovieRatingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Movie<T extends MoviesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MoviesDefaultArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MovieRatings model
   */ 
  interface MovieRatingsFieldRefs {
    readonly MovieRatingId: FieldRef<"MovieRatings", 'Int'>
    readonly UserId: FieldRef<"MovieRatings", 'Int'>
    readonly MovieId: FieldRef<"MovieRatings", 'Int'>
    readonly Rating: FieldRef<"MovieRatings", 'Int'>
    readonly CreatedAt: FieldRef<"MovieRatings", 'DateTime'>
    readonly UpdatedAt: FieldRef<"MovieRatings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MovieRatings findUnique
   */
  export type MovieRatingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MovieRatings to fetch.
     */
    where: MovieRatingsWhereUniqueInput
  }

  /**
   * MovieRatings findUniqueOrThrow
   */
  export type MovieRatingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MovieRatings to fetch.
     */
    where: MovieRatingsWhereUniqueInput
  }

  /**
   * MovieRatings findFirst
   */
  export type MovieRatingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MovieRatings to fetch.
     */
    where?: MovieRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieRatings to fetch.
     */
    orderBy?: MovieRatingsOrderByWithRelationInput | MovieRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieRatings.
     */
    cursor?: MovieRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieRatings.
     */
    distinct?: MovieRatingsScalarFieldEnum | MovieRatingsScalarFieldEnum[]
  }

  /**
   * MovieRatings findFirstOrThrow
   */
  export type MovieRatingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MovieRatings to fetch.
     */
    where?: MovieRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieRatings to fetch.
     */
    orderBy?: MovieRatingsOrderByWithRelationInput | MovieRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieRatings.
     */
    cursor?: MovieRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieRatings.
     */
    distinct?: MovieRatingsScalarFieldEnum | MovieRatingsScalarFieldEnum[]
  }

  /**
   * MovieRatings findMany
   */
  export type MovieRatingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * Filter, which MovieRatings to fetch.
     */
    where?: MovieRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieRatings to fetch.
     */
    orderBy?: MovieRatingsOrderByWithRelationInput | MovieRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MovieRatings.
     */
    cursor?: MovieRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieRatings.
     */
    skip?: number
    distinct?: MovieRatingsScalarFieldEnum | MovieRatingsScalarFieldEnum[]
  }

  /**
   * MovieRatings create
   */
  export type MovieRatingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * The data needed to create a MovieRatings.
     */
    data: XOR<MovieRatingsCreateInput, MovieRatingsUncheckedCreateInput>
  }

  /**
   * MovieRatings createMany
   */
  export type MovieRatingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MovieRatings.
     */
    data: MovieRatingsCreateManyInput | MovieRatingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MovieRatings createManyAndReturn
   */
  export type MovieRatingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MovieRatings.
     */
    data: MovieRatingsCreateManyInput | MovieRatingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MovieRatings update
   */
  export type MovieRatingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * The data needed to update a MovieRatings.
     */
    data: XOR<MovieRatingsUpdateInput, MovieRatingsUncheckedUpdateInput>
    /**
     * Choose, which MovieRatings to update.
     */
    where: MovieRatingsWhereUniqueInput
  }

  /**
   * MovieRatings updateMany
   */
  export type MovieRatingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MovieRatings.
     */
    data: XOR<MovieRatingsUpdateManyMutationInput, MovieRatingsUncheckedUpdateManyInput>
    /**
     * Filter which MovieRatings to update
     */
    where?: MovieRatingsWhereInput
  }

  /**
   * MovieRatings upsert
   */
  export type MovieRatingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * The filter to search for the MovieRatings to update in case it exists.
     */
    where: MovieRatingsWhereUniqueInput
    /**
     * In case the MovieRatings found by the `where` argument doesn't exist, create a new MovieRatings with this data.
     */
    create: XOR<MovieRatingsCreateInput, MovieRatingsUncheckedCreateInput>
    /**
     * In case the MovieRatings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovieRatingsUpdateInput, MovieRatingsUncheckedUpdateInput>
  }

  /**
   * MovieRatings delete
   */
  export type MovieRatingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
    /**
     * Filter which MovieRatings to delete.
     */
    where: MovieRatingsWhereUniqueInput
  }

  /**
   * MovieRatings deleteMany
   */
  export type MovieRatingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieRatings to delete
     */
    where?: MovieRatingsWhereInput
  }

  /**
   * MovieRatings without action
   */
  export type MovieRatingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieRatings
     */
    select?: MovieRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieRatingsInclude<ExtArgs> | null
  }


  /**
   * Model SeriesRatings
   */

  export type AggregateSeriesRatings = {
    _count: SeriesRatingsCountAggregateOutputType | null
    _avg: SeriesRatingsAvgAggregateOutputType | null
    _sum: SeriesRatingsSumAggregateOutputType | null
    _min: SeriesRatingsMinAggregateOutputType | null
    _max: SeriesRatingsMaxAggregateOutputType | null
  }

  export type SeriesRatingsAvgAggregateOutputType = {
    SeriesRatingId: number | null
    UserId: number | null
    SeriesId: number | null
    Rating: number | null
  }

  export type SeriesRatingsSumAggregateOutputType = {
    SeriesRatingId: number | null
    UserId: number | null
    SeriesId: number | null
    Rating: number | null
  }

  export type SeriesRatingsMinAggregateOutputType = {
    SeriesRatingId: number | null
    UserId: number | null
    SeriesId: number | null
    Rating: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesRatingsMaxAggregateOutputType = {
    SeriesRatingId: number | null
    UserId: number | null
    SeriesId: number | null
    Rating: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesRatingsCountAggregateOutputType = {
    SeriesRatingId: number
    UserId: number
    SeriesId: number
    Rating: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type SeriesRatingsAvgAggregateInputType = {
    SeriesRatingId?: true
    UserId?: true
    SeriesId?: true
    Rating?: true
  }

  export type SeriesRatingsSumAggregateInputType = {
    SeriesRatingId?: true
    UserId?: true
    SeriesId?: true
    Rating?: true
  }

  export type SeriesRatingsMinAggregateInputType = {
    SeriesRatingId?: true
    UserId?: true
    SeriesId?: true
    Rating?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesRatingsMaxAggregateInputType = {
    SeriesRatingId?: true
    UserId?: true
    SeriesId?: true
    Rating?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesRatingsCountAggregateInputType = {
    SeriesRatingId?: true
    UserId?: true
    SeriesId?: true
    Rating?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type SeriesRatingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesRatings to aggregate.
     */
    where?: SeriesRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesRatings to fetch.
     */
    orderBy?: SeriesRatingsOrderByWithRelationInput | SeriesRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeriesRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeriesRatings
    **/
    _count?: true | SeriesRatingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeriesRatingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeriesRatingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeriesRatingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeriesRatingsMaxAggregateInputType
  }

  export type GetSeriesRatingsAggregateType<T extends SeriesRatingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSeriesRatings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeriesRatings[P]>
      : GetScalarType<T[P], AggregateSeriesRatings[P]>
  }




  export type SeriesRatingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesRatingsWhereInput
    orderBy?: SeriesRatingsOrderByWithAggregationInput | SeriesRatingsOrderByWithAggregationInput[]
    by: SeriesRatingsScalarFieldEnum[] | SeriesRatingsScalarFieldEnum
    having?: SeriesRatingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeriesRatingsCountAggregateInputType | true
    _avg?: SeriesRatingsAvgAggregateInputType
    _sum?: SeriesRatingsSumAggregateInputType
    _min?: SeriesRatingsMinAggregateInputType
    _max?: SeriesRatingsMaxAggregateInputType
  }

  export type SeriesRatingsGroupByOutputType = {
    SeriesRatingId: number
    UserId: number
    SeriesId: number
    Rating: number
    CreatedAt: Date
    UpdatedAt: Date
    _count: SeriesRatingsCountAggregateOutputType | null
    _avg: SeriesRatingsAvgAggregateOutputType | null
    _sum: SeriesRatingsSumAggregateOutputType | null
    _min: SeriesRatingsMinAggregateOutputType | null
    _max: SeriesRatingsMaxAggregateOutputType | null
  }

  type GetSeriesRatingsGroupByPayload<T extends SeriesRatingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeriesRatingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeriesRatingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeriesRatingsGroupByOutputType[P]>
            : GetScalarType<T[P], SeriesRatingsGroupByOutputType[P]>
        }
      >
    >


  export type SeriesRatingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesRatingId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    Rating?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesRatings"]>

  export type SeriesRatingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesRatingId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    Rating?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesRatings"]>

  export type SeriesRatingsSelectScalar = {
    SeriesRatingId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    Rating?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type SeriesRatingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }
  export type SeriesRatingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }

  export type $SeriesRatingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeriesRatings"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Series: Prisma.$SeriesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      SeriesRatingId: number
      UserId: number
      SeriesId: number
      Rating: number
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["seriesRatings"]>
    composites: {}
  }

  type SeriesRatingsGetPayload<S extends boolean | null | undefined | SeriesRatingsDefaultArgs> = $Result.GetResult<Prisma.$SeriesRatingsPayload, S>

  type SeriesRatingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeriesRatingsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeriesRatingsCountAggregateInputType | true
    }

  export interface SeriesRatingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeriesRatings'], meta: { name: 'SeriesRatings' } }
    /**
     * Find zero or one SeriesRatings that matches the filter.
     * @param {SeriesRatingsFindUniqueArgs} args - Arguments to find a SeriesRatings
     * @example
     * // Get one SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeriesRatingsFindUniqueArgs>(args: SelectSubset<T, SeriesRatingsFindUniqueArgs<ExtArgs>>): Prisma__SeriesRatingsClient<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeriesRatings that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeriesRatingsFindUniqueOrThrowArgs} args - Arguments to find a SeriesRatings
     * @example
     * // Get one SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeriesRatingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SeriesRatingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeriesRatingsClient<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeriesRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesRatingsFindFirstArgs} args - Arguments to find a SeriesRatings
     * @example
     * // Get one SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeriesRatingsFindFirstArgs>(args?: SelectSubset<T, SeriesRatingsFindFirstArgs<ExtArgs>>): Prisma__SeriesRatingsClient<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeriesRatings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesRatingsFindFirstOrThrowArgs} args - Arguments to find a SeriesRatings
     * @example
     * // Get one SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeriesRatingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SeriesRatingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeriesRatingsClient<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeriesRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesRatingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.findMany()
     * 
     * // Get first 10 SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.findMany({ take: 10 })
     * 
     * // Only select the `SeriesRatingId`
     * const seriesRatingsWithSeriesRatingIdOnly = await prisma.seriesRatings.findMany({ select: { SeriesRatingId: true } })
     * 
     */
    findMany<T extends SeriesRatingsFindManyArgs>(args?: SelectSubset<T, SeriesRatingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeriesRatings.
     * @param {SeriesRatingsCreateArgs} args - Arguments to create a SeriesRatings.
     * @example
     * // Create one SeriesRatings
     * const SeriesRatings = await prisma.seriesRatings.create({
     *   data: {
     *     // ... data to create a SeriesRatings
     *   }
     * })
     * 
     */
    create<T extends SeriesRatingsCreateArgs>(args: SelectSubset<T, SeriesRatingsCreateArgs<ExtArgs>>): Prisma__SeriesRatingsClient<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeriesRatings.
     * @param {SeriesRatingsCreateManyArgs} args - Arguments to create many SeriesRatings.
     * @example
     * // Create many SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeriesRatingsCreateManyArgs>(args?: SelectSubset<T, SeriesRatingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeriesRatings and returns the data saved in the database.
     * @param {SeriesRatingsCreateManyAndReturnArgs} args - Arguments to create many SeriesRatings.
     * @example
     * // Create many SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeriesRatings and only return the `SeriesRatingId`
     * const seriesRatingsWithSeriesRatingIdOnly = await prisma.seriesRatings.createManyAndReturn({ 
     *   select: { SeriesRatingId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeriesRatingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SeriesRatingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeriesRatings.
     * @param {SeriesRatingsDeleteArgs} args - Arguments to delete one SeriesRatings.
     * @example
     * // Delete one SeriesRatings
     * const SeriesRatings = await prisma.seriesRatings.delete({
     *   where: {
     *     // ... filter to delete one SeriesRatings
     *   }
     * })
     * 
     */
    delete<T extends SeriesRatingsDeleteArgs>(args: SelectSubset<T, SeriesRatingsDeleteArgs<ExtArgs>>): Prisma__SeriesRatingsClient<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeriesRatings.
     * @param {SeriesRatingsUpdateArgs} args - Arguments to update one SeriesRatings.
     * @example
     * // Update one SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeriesRatingsUpdateArgs>(args: SelectSubset<T, SeriesRatingsUpdateArgs<ExtArgs>>): Prisma__SeriesRatingsClient<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeriesRatings.
     * @param {SeriesRatingsDeleteManyArgs} args - Arguments to filter SeriesRatings to delete.
     * @example
     * // Delete a few SeriesRatings
     * const { count } = await prisma.seriesRatings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeriesRatingsDeleteManyArgs>(args?: SelectSubset<T, SeriesRatingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeriesRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesRatingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeriesRatingsUpdateManyArgs>(args: SelectSubset<T, SeriesRatingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeriesRatings.
     * @param {SeriesRatingsUpsertArgs} args - Arguments to update or create a SeriesRatings.
     * @example
     * // Update or create a SeriesRatings
     * const seriesRatings = await prisma.seriesRatings.upsert({
     *   create: {
     *     // ... data to create a SeriesRatings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeriesRatings we want to update
     *   }
     * })
     */
    upsert<T extends SeriesRatingsUpsertArgs>(args: SelectSubset<T, SeriesRatingsUpsertArgs<ExtArgs>>): Prisma__SeriesRatingsClient<$Result.GetResult<Prisma.$SeriesRatingsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeriesRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesRatingsCountArgs} args - Arguments to filter SeriesRatings to count.
     * @example
     * // Count the number of SeriesRatings
     * const count = await prisma.seriesRatings.count({
     *   where: {
     *     // ... the filter for the SeriesRatings we want to count
     *   }
     * })
    **/
    count<T extends SeriesRatingsCountArgs>(
      args?: Subset<T, SeriesRatingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeriesRatingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeriesRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesRatingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeriesRatingsAggregateArgs>(args: Subset<T, SeriesRatingsAggregateArgs>): Prisma.PrismaPromise<GetSeriesRatingsAggregateType<T>>

    /**
     * Group by SeriesRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesRatingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeriesRatingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeriesRatingsGroupByArgs['orderBy'] }
        : { orderBy?: SeriesRatingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeriesRatingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeriesRatingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeriesRatings model
   */
  readonly fields: SeriesRatingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeriesRatings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeriesRatingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Series<T extends SeriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeriesDefaultArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeriesRatings model
   */ 
  interface SeriesRatingsFieldRefs {
    readonly SeriesRatingId: FieldRef<"SeriesRatings", 'Int'>
    readonly UserId: FieldRef<"SeriesRatings", 'Int'>
    readonly SeriesId: FieldRef<"SeriesRatings", 'Int'>
    readonly Rating: FieldRef<"SeriesRatings", 'Int'>
    readonly CreatedAt: FieldRef<"SeriesRatings", 'DateTime'>
    readonly UpdatedAt: FieldRef<"SeriesRatings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SeriesRatings findUnique
   */
  export type SeriesRatingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesRatings to fetch.
     */
    where: SeriesRatingsWhereUniqueInput
  }

  /**
   * SeriesRatings findUniqueOrThrow
   */
  export type SeriesRatingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesRatings to fetch.
     */
    where: SeriesRatingsWhereUniqueInput
  }

  /**
   * SeriesRatings findFirst
   */
  export type SeriesRatingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesRatings to fetch.
     */
    where?: SeriesRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesRatings to fetch.
     */
    orderBy?: SeriesRatingsOrderByWithRelationInput | SeriesRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesRatings.
     */
    cursor?: SeriesRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesRatings.
     */
    distinct?: SeriesRatingsScalarFieldEnum | SeriesRatingsScalarFieldEnum[]
  }

  /**
   * SeriesRatings findFirstOrThrow
   */
  export type SeriesRatingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesRatings to fetch.
     */
    where?: SeriesRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesRatings to fetch.
     */
    orderBy?: SeriesRatingsOrderByWithRelationInput | SeriesRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesRatings.
     */
    cursor?: SeriesRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesRatings.
     */
    distinct?: SeriesRatingsScalarFieldEnum | SeriesRatingsScalarFieldEnum[]
  }

  /**
   * SeriesRatings findMany
   */
  export type SeriesRatingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesRatings to fetch.
     */
    where?: SeriesRatingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesRatings to fetch.
     */
    orderBy?: SeriesRatingsOrderByWithRelationInput | SeriesRatingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeriesRatings.
     */
    cursor?: SeriesRatingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesRatings.
     */
    skip?: number
    distinct?: SeriesRatingsScalarFieldEnum | SeriesRatingsScalarFieldEnum[]
  }

  /**
   * SeriesRatings create
   */
  export type SeriesRatingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * The data needed to create a SeriesRatings.
     */
    data: XOR<SeriesRatingsCreateInput, SeriesRatingsUncheckedCreateInput>
  }

  /**
   * SeriesRatings createMany
   */
  export type SeriesRatingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeriesRatings.
     */
    data: SeriesRatingsCreateManyInput | SeriesRatingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeriesRatings createManyAndReturn
   */
  export type SeriesRatingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeriesRatings.
     */
    data: SeriesRatingsCreateManyInput | SeriesRatingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeriesRatings update
   */
  export type SeriesRatingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * The data needed to update a SeriesRatings.
     */
    data: XOR<SeriesRatingsUpdateInput, SeriesRatingsUncheckedUpdateInput>
    /**
     * Choose, which SeriesRatings to update.
     */
    where: SeriesRatingsWhereUniqueInput
  }

  /**
   * SeriesRatings updateMany
   */
  export type SeriesRatingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeriesRatings.
     */
    data: XOR<SeriesRatingsUpdateManyMutationInput, SeriesRatingsUncheckedUpdateManyInput>
    /**
     * Filter which SeriesRatings to update
     */
    where?: SeriesRatingsWhereInput
  }

  /**
   * SeriesRatings upsert
   */
  export type SeriesRatingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * The filter to search for the SeriesRatings to update in case it exists.
     */
    where: SeriesRatingsWhereUniqueInput
    /**
     * In case the SeriesRatings found by the `where` argument doesn't exist, create a new SeriesRatings with this data.
     */
    create: XOR<SeriesRatingsCreateInput, SeriesRatingsUncheckedCreateInput>
    /**
     * In case the SeriesRatings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeriesRatingsUpdateInput, SeriesRatingsUncheckedUpdateInput>
  }

  /**
   * SeriesRatings delete
   */
  export type SeriesRatingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
    /**
     * Filter which SeriesRatings to delete.
     */
    where: SeriesRatingsWhereUniqueInput
  }

  /**
   * SeriesRatings deleteMany
   */
  export type SeriesRatingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesRatings to delete
     */
    where?: SeriesRatingsWhereInput
  }

  /**
   * SeriesRatings without action
   */
  export type SeriesRatingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesRatings
     */
    select?: SeriesRatingsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesRatingsInclude<ExtArgs> | null
  }


  /**
   * Model MovieComments
   */

  export type AggregateMovieComments = {
    _count: MovieCommentsCountAggregateOutputType | null
    _avg: MovieCommentsAvgAggregateOutputType | null
    _sum: MovieCommentsSumAggregateOutputType | null
    _min: MovieCommentsMinAggregateOutputType | null
    _max: MovieCommentsMaxAggregateOutputType | null
  }

  export type MovieCommentsAvgAggregateOutputType = {
    MovieCommentId: number | null
    UserId: number | null
    MovieId: number | null
  }

  export type MovieCommentsSumAggregateOutputType = {
    MovieCommentId: number | null
    UserId: number | null
    MovieId: number | null
  }

  export type MovieCommentsMinAggregateOutputType = {
    MovieCommentId: number | null
    UserId: number | null
    MovieId: number | null
    CommentText: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieCommentsMaxAggregateOutputType = {
    MovieCommentId: number | null
    UserId: number | null
    MovieId: number | null
    CommentText: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieCommentsCountAggregateOutputType = {
    MovieCommentId: number
    UserId: number
    MovieId: number
    CommentText: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type MovieCommentsAvgAggregateInputType = {
    MovieCommentId?: true
    UserId?: true
    MovieId?: true
  }

  export type MovieCommentsSumAggregateInputType = {
    MovieCommentId?: true
    UserId?: true
    MovieId?: true
  }

  export type MovieCommentsMinAggregateInputType = {
    MovieCommentId?: true
    UserId?: true
    MovieId?: true
    CommentText?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieCommentsMaxAggregateInputType = {
    MovieCommentId?: true
    UserId?: true
    MovieId?: true
    CommentText?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieCommentsCountAggregateInputType = {
    MovieCommentId?: true
    UserId?: true
    MovieId?: true
    CommentText?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type MovieCommentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieComments to aggregate.
     */
    where?: MovieCommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieComments to fetch.
     */
    orderBy?: MovieCommentsOrderByWithRelationInput | MovieCommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovieCommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MovieComments
    **/
    _count?: true | MovieCommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieCommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieCommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieCommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieCommentsMaxAggregateInputType
  }

  export type GetMovieCommentsAggregateType<T extends MovieCommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateMovieComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovieComments[P]>
      : GetScalarType<T[P], AggregateMovieComments[P]>
  }




  export type MovieCommentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieCommentsWhereInput
    orderBy?: MovieCommentsOrderByWithAggregationInput | MovieCommentsOrderByWithAggregationInput[]
    by: MovieCommentsScalarFieldEnum[] | MovieCommentsScalarFieldEnum
    having?: MovieCommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieCommentsCountAggregateInputType | true
    _avg?: MovieCommentsAvgAggregateInputType
    _sum?: MovieCommentsSumAggregateInputType
    _min?: MovieCommentsMinAggregateInputType
    _max?: MovieCommentsMaxAggregateInputType
  }

  export type MovieCommentsGroupByOutputType = {
    MovieCommentId: number
    UserId: number
    MovieId: number
    CommentText: string
    CreatedAt: Date
    UpdatedAt: Date
    _count: MovieCommentsCountAggregateOutputType | null
    _avg: MovieCommentsAvgAggregateOutputType | null
    _sum: MovieCommentsSumAggregateOutputType | null
    _min: MovieCommentsMinAggregateOutputType | null
    _max: MovieCommentsMaxAggregateOutputType | null
  }

  type GetMovieCommentsGroupByPayload<T extends MovieCommentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieCommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieCommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieCommentsGroupByOutputType[P]>
            : GetScalarType<T[P], MovieCommentsGroupByOutputType[P]>
        }
      >
    >


  export type MovieCommentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieCommentId?: boolean
    UserId?: boolean
    MovieId?: boolean
    CommentText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieComments"]>

  export type MovieCommentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieCommentId?: boolean
    UserId?: boolean
    MovieId?: boolean
    CommentText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieComments"]>

  export type MovieCommentsSelectScalar = {
    MovieCommentId?: boolean
    UserId?: boolean
    MovieId?: boolean
    CommentText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type MovieCommentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }
  export type MovieCommentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }

  export type $MovieCommentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MovieComments"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Movie: Prisma.$MoviesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      MovieCommentId: number
      UserId: number
      MovieId: number
      CommentText: string
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["movieComments"]>
    composites: {}
  }

  type MovieCommentsGetPayload<S extends boolean | null | undefined | MovieCommentsDefaultArgs> = $Result.GetResult<Prisma.$MovieCommentsPayload, S>

  type MovieCommentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovieCommentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovieCommentsCountAggregateInputType | true
    }

  export interface MovieCommentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MovieComments'], meta: { name: 'MovieComments' } }
    /**
     * Find zero or one MovieComments that matches the filter.
     * @param {MovieCommentsFindUniqueArgs} args - Arguments to find a MovieComments
     * @example
     * // Get one MovieComments
     * const movieComments = await prisma.movieComments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovieCommentsFindUniqueArgs>(args: SelectSubset<T, MovieCommentsFindUniqueArgs<ExtArgs>>): Prisma__MovieCommentsClient<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MovieComments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovieCommentsFindUniqueOrThrowArgs} args - Arguments to find a MovieComments
     * @example
     * // Get one MovieComments
     * const movieComments = await prisma.movieComments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovieCommentsFindUniqueOrThrowArgs>(args: SelectSubset<T, MovieCommentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovieCommentsClient<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MovieComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCommentsFindFirstArgs} args - Arguments to find a MovieComments
     * @example
     * // Get one MovieComments
     * const movieComments = await prisma.movieComments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovieCommentsFindFirstArgs>(args?: SelectSubset<T, MovieCommentsFindFirstArgs<ExtArgs>>): Prisma__MovieCommentsClient<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MovieComments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCommentsFindFirstOrThrowArgs} args - Arguments to find a MovieComments
     * @example
     * // Get one MovieComments
     * const movieComments = await prisma.movieComments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovieCommentsFindFirstOrThrowArgs>(args?: SelectSubset<T, MovieCommentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovieCommentsClient<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MovieComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCommentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MovieComments
     * const movieComments = await prisma.movieComments.findMany()
     * 
     * // Get first 10 MovieComments
     * const movieComments = await prisma.movieComments.findMany({ take: 10 })
     * 
     * // Only select the `MovieCommentId`
     * const movieCommentsWithMovieCommentIdOnly = await prisma.movieComments.findMany({ select: { MovieCommentId: true } })
     * 
     */
    findMany<T extends MovieCommentsFindManyArgs>(args?: SelectSubset<T, MovieCommentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MovieComments.
     * @param {MovieCommentsCreateArgs} args - Arguments to create a MovieComments.
     * @example
     * // Create one MovieComments
     * const MovieComments = await prisma.movieComments.create({
     *   data: {
     *     // ... data to create a MovieComments
     *   }
     * })
     * 
     */
    create<T extends MovieCommentsCreateArgs>(args: SelectSubset<T, MovieCommentsCreateArgs<ExtArgs>>): Prisma__MovieCommentsClient<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MovieComments.
     * @param {MovieCommentsCreateManyArgs} args - Arguments to create many MovieComments.
     * @example
     * // Create many MovieComments
     * const movieComments = await prisma.movieComments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovieCommentsCreateManyArgs>(args?: SelectSubset<T, MovieCommentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MovieComments and returns the data saved in the database.
     * @param {MovieCommentsCreateManyAndReturnArgs} args - Arguments to create many MovieComments.
     * @example
     * // Create many MovieComments
     * const movieComments = await prisma.movieComments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MovieComments and only return the `MovieCommentId`
     * const movieCommentsWithMovieCommentIdOnly = await prisma.movieComments.createManyAndReturn({ 
     *   select: { MovieCommentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovieCommentsCreateManyAndReturnArgs>(args?: SelectSubset<T, MovieCommentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MovieComments.
     * @param {MovieCommentsDeleteArgs} args - Arguments to delete one MovieComments.
     * @example
     * // Delete one MovieComments
     * const MovieComments = await prisma.movieComments.delete({
     *   where: {
     *     // ... filter to delete one MovieComments
     *   }
     * })
     * 
     */
    delete<T extends MovieCommentsDeleteArgs>(args: SelectSubset<T, MovieCommentsDeleteArgs<ExtArgs>>): Prisma__MovieCommentsClient<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MovieComments.
     * @param {MovieCommentsUpdateArgs} args - Arguments to update one MovieComments.
     * @example
     * // Update one MovieComments
     * const movieComments = await prisma.movieComments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovieCommentsUpdateArgs>(args: SelectSubset<T, MovieCommentsUpdateArgs<ExtArgs>>): Prisma__MovieCommentsClient<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MovieComments.
     * @param {MovieCommentsDeleteManyArgs} args - Arguments to filter MovieComments to delete.
     * @example
     * // Delete a few MovieComments
     * const { count } = await prisma.movieComments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovieCommentsDeleteManyArgs>(args?: SelectSubset<T, MovieCommentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovieComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MovieComments
     * const movieComments = await prisma.movieComments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovieCommentsUpdateManyArgs>(args: SelectSubset<T, MovieCommentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MovieComments.
     * @param {MovieCommentsUpsertArgs} args - Arguments to update or create a MovieComments.
     * @example
     * // Update or create a MovieComments
     * const movieComments = await prisma.movieComments.upsert({
     *   create: {
     *     // ... data to create a MovieComments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MovieComments we want to update
     *   }
     * })
     */
    upsert<T extends MovieCommentsUpsertArgs>(args: SelectSubset<T, MovieCommentsUpsertArgs<ExtArgs>>): Prisma__MovieCommentsClient<$Result.GetResult<Prisma.$MovieCommentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MovieComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCommentsCountArgs} args - Arguments to filter MovieComments to count.
     * @example
     * // Count the number of MovieComments
     * const count = await prisma.movieComments.count({
     *   where: {
     *     // ... the filter for the MovieComments we want to count
     *   }
     * })
    **/
    count<T extends MovieCommentsCountArgs>(
      args?: Subset<T, MovieCommentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieCommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MovieComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieCommentsAggregateArgs>(args: Subset<T, MovieCommentsAggregateArgs>): Prisma.PrismaPromise<GetMovieCommentsAggregateType<T>>

    /**
     * Group by MovieComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieCommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieCommentsGroupByArgs['orderBy'] }
        : { orderBy?: MovieCommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieCommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MovieComments model
   */
  readonly fields: MovieCommentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MovieComments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovieCommentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Movie<T extends MoviesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MoviesDefaultArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MovieComments model
   */ 
  interface MovieCommentsFieldRefs {
    readonly MovieCommentId: FieldRef<"MovieComments", 'Int'>
    readonly UserId: FieldRef<"MovieComments", 'Int'>
    readonly MovieId: FieldRef<"MovieComments", 'Int'>
    readonly CommentText: FieldRef<"MovieComments", 'String'>
    readonly CreatedAt: FieldRef<"MovieComments", 'DateTime'>
    readonly UpdatedAt: FieldRef<"MovieComments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MovieComments findUnique
   */
  export type MovieCommentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * Filter, which MovieComments to fetch.
     */
    where: MovieCommentsWhereUniqueInput
  }

  /**
   * MovieComments findUniqueOrThrow
   */
  export type MovieCommentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * Filter, which MovieComments to fetch.
     */
    where: MovieCommentsWhereUniqueInput
  }

  /**
   * MovieComments findFirst
   */
  export type MovieCommentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * Filter, which MovieComments to fetch.
     */
    where?: MovieCommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieComments to fetch.
     */
    orderBy?: MovieCommentsOrderByWithRelationInput | MovieCommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieComments.
     */
    cursor?: MovieCommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieComments.
     */
    distinct?: MovieCommentsScalarFieldEnum | MovieCommentsScalarFieldEnum[]
  }

  /**
   * MovieComments findFirstOrThrow
   */
  export type MovieCommentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * Filter, which MovieComments to fetch.
     */
    where?: MovieCommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieComments to fetch.
     */
    orderBy?: MovieCommentsOrderByWithRelationInput | MovieCommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieComments.
     */
    cursor?: MovieCommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieComments.
     */
    distinct?: MovieCommentsScalarFieldEnum | MovieCommentsScalarFieldEnum[]
  }

  /**
   * MovieComments findMany
   */
  export type MovieCommentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * Filter, which MovieComments to fetch.
     */
    where?: MovieCommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieComments to fetch.
     */
    orderBy?: MovieCommentsOrderByWithRelationInput | MovieCommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MovieComments.
     */
    cursor?: MovieCommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieComments.
     */
    skip?: number
    distinct?: MovieCommentsScalarFieldEnum | MovieCommentsScalarFieldEnum[]
  }

  /**
   * MovieComments create
   */
  export type MovieCommentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * The data needed to create a MovieComments.
     */
    data: XOR<MovieCommentsCreateInput, MovieCommentsUncheckedCreateInput>
  }

  /**
   * MovieComments createMany
   */
  export type MovieCommentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MovieComments.
     */
    data: MovieCommentsCreateManyInput | MovieCommentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MovieComments createManyAndReturn
   */
  export type MovieCommentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MovieComments.
     */
    data: MovieCommentsCreateManyInput | MovieCommentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MovieComments update
   */
  export type MovieCommentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * The data needed to update a MovieComments.
     */
    data: XOR<MovieCommentsUpdateInput, MovieCommentsUncheckedUpdateInput>
    /**
     * Choose, which MovieComments to update.
     */
    where: MovieCommentsWhereUniqueInput
  }

  /**
   * MovieComments updateMany
   */
  export type MovieCommentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MovieComments.
     */
    data: XOR<MovieCommentsUpdateManyMutationInput, MovieCommentsUncheckedUpdateManyInput>
    /**
     * Filter which MovieComments to update
     */
    where?: MovieCommentsWhereInput
  }

  /**
   * MovieComments upsert
   */
  export type MovieCommentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * The filter to search for the MovieComments to update in case it exists.
     */
    where: MovieCommentsWhereUniqueInput
    /**
     * In case the MovieComments found by the `where` argument doesn't exist, create a new MovieComments with this data.
     */
    create: XOR<MovieCommentsCreateInput, MovieCommentsUncheckedCreateInput>
    /**
     * In case the MovieComments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovieCommentsUpdateInput, MovieCommentsUncheckedUpdateInput>
  }

  /**
   * MovieComments delete
   */
  export type MovieCommentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
    /**
     * Filter which MovieComments to delete.
     */
    where: MovieCommentsWhereUniqueInput
  }

  /**
   * MovieComments deleteMany
   */
  export type MovieCommentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieComments to delete
     */
    where?: MovieCommentsWhereInput
  }

  /**
   * MovieComments without action
   */
  export type MovieCommentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieComments
     */
    select?: MovieCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCommentsInclude<ExtArgs> | null
  }


  /**
   * Model SeriesComments
   */

  export type AggregateSeriesComments = {
    _count: SeriesCommentsCountAggregateOutputType | null
    _avg: SeriesCommentsAvgAggregateOutputType | null
    _sum: SeriesCommentsSumAggregateOutputType | null
    _min: SeriesCommentsMinAggregateOutputType | null
    _max: SeriesCommentsMaxAggregateOutputType | null
  }

  export type SeriesCommentsAvgAggregateOutputType = {
    SeriesCommentId: number | null
    UserId: number | null
    SeriesId: number | null
  }

  export type SeriesCommentsSumAggregateOutputType = {
    SeriesCommentId: number | null
    UserId: number | null
    SeriesId: number | null
  }

  export type SeriesCommentsMinAggregateOutputType = {
    SeriesCommentId: number | null
    UserId: number | null
    SeriesId: number | null
    CommentText: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesCommentsMaxAggregateOutputType = {
    SeriesCommentId: number | null
    UserId: number | null
    SeriesId: number | null
    CommentText: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesCommentsCountAggregateOutputType = {
    SeriesCommentId: number
    UserId: number
    SeriesId: number
    CommentText: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type SeriesCommentsAvgAggregateInputType = {
    SeriesCommentId?: true
    UserId?: true
    SeriesId?: true
  }

  export type SeriesCommentsSumAggregateInputType = {
    SeriesCommentId?: true
    UserId?: true
    SeriesId?: true
  }

  export type SeriesCommentsMinAggregateInputType = {
    SeriesCommentId?: true
    UserId?: true
    SeriesId?: true
    CommentText?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesCommentsMaxAggregateInputType = {
    SeriesCommentId?: true
    UserId?: true
    SeriesId?: true
    CommentText?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesCommentsCountAggregateInputType = {
    SeriesCommentId?: true
    UserId?: true
    SeriesId?: true
    CommentText?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type SeriesCommentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesComments to aggregate.
     */
    where?: SeriesCommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesComments to fetch.
     */
    orderBy?: SeriesCommentsOrderByWithRelationInput | SeriesCommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeriesCommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeriesComments
    **/
    _count?: true | SeriesCommentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeriesCommentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeriesCommentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeriesCommentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeriesCommentsMaxAggregateInputType
  }

  export type GetSeriesCommentsAggregateType<T extends SeriesCommentsAggregateArgs> = {
        [P in keyof T & keyof AggregateSeriesComments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeriesComments[P]>
      : GetScalarType<T[P], AggregateSeriesComments[P]>
  }




  export type SeriesCommentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesCommentsWhereInput
    orderBy?: SeriesCommentsOrderByWithAggregationInput | SeriesCommentsOrderByWithAggregationInput[]
    by: SeriesCommentsScalarFieldEnum[] | SeriesCommentsScalarFieldEnum
    having?: SeriesCommentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeriesCommentsCountAggregateInputType | true
    _avg?: SeriesCommentsAvgAggregateInputType
    _sum?: SeriesCommentsSumAggregateInputType
    _min?: SeriesCommentsMinAggregateInputType
    _max?: SeriesCommentsMaxAggregateInputType
  }

  export type SeriesCommentsGroupByOutputType = {
    SeriesCommentId: number
    UserId: number
    SeriesId: number
    CommentText: string
    CreatedAt: Date
    UpdatedAt: Date
    _count: SeriesCommentsCountAggregateOutputType | null
    _avg: SeriesCommentsAvgAggregateOutputType | null
    _sum: SeriesCommentsSumAggregateOutputType | null
    _min: SeriesCommentsMinAggregateOutputType | null
    _max: SeriesCommentsMaxAggregateOutputType | null
  }

  type GetSeriesCommentsGroupByPayload<T extends SeriesCommentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeriesCommentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeriesCommentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeriesCommentsGroupByOutputType[P]>
            : GetScalarType<T[P], SeriesCommentsGroupByOutputType[P]>
        }
      >
    >


  export type SeriesCommentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesCommentId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    CommentText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesComments"]>

  export type SeriesCommentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesCommentId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    CommentText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesComments"]>

  export type SeriesCommentsSelectScalar = {
    SeriesCommentId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    CommentText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type SeriesCommentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }
  export type SeriesCommentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }

  export type $SeriesCommentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeriesComments"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Series: Prisma.$SeriesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      SeriesCommentId: number
      UserId: number
      SeriesId: number
      CommentText: string
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["seriesComments"]>
    composites: {}
  }

  type SeriesCommentsGetPayload<S extends boolean | null | undefined | SeriesCommentsDefaultArgs> = $Result.GetResult<Prisma.$SeriesCommentsPayload, S>

  type SeriesCommentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeriesCommentsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeriesCommentsCountAggregateInputType | true
    }

  export interface SeriesCommentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeriesComments'], meta: { name: 'SeriesComments' } }
    /**
     * Find zero or one SeriesComments that matches the filter.
     * @param {SeriesCommentsFindUniqueArgs} args - Arguments to find a SeriesComments
     * @example
     * // Get one SeriesComments
     * const seriesComments = await prisma.seriesComments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeriesCommentsFindUniqueArgs>(args: SelectSubset<T, SeriesCommentsFindUniqueArgs<ExtArgs>>): Prisma__SeriesCommentsClient<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeriesComments that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeriesCommentsFindUniqueOrThrowArgs} args - Arguments to find a SeriesComments
     * @example
     * // Get one SeriesComments
     * const seriesComments = await prisma.seriesComments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeriesCommentsFindUniqueOrThrowArgs>(args: SelectSubset<T, SeriesCommentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeriesCommentsClient<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeriesComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCommentsFindFirstArgs} args - Arguments to find a SeriesComments
     * @example
     * // Get one SeriesComments
     * const seriesComments = await prisma.seriesComments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeriesCommentsFindFirstArgs>(args?: SelectSubset<T, SeriesCommentsFindFirstArgs<ExtArgs>>): Prisma__SeriesCommentsClient<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeriesComments that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCommentsFindFirstOrThrowArgs} args - Arguments to find a SeriesComments
     * @example
     * // Get one SeriesComments
     * const seriesComments = await prisma.seriesComments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeriesCommentsFindFirstOrThrowArgs>(args?: SelectSubset<T, SeriesCommentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeriesCommentsClient<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeriesComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCommentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeriesComments
     * const seriesComments = await prisma.seriesComments.findMany()
     * 
     * // Get first 10 SeriesComments
     * const seriesComments = await prisma.seriesComments.findMany({ take: 10 })
     * 
     * // Only select the `SeriesCommentId`
     * const seriesCommentsWithSeriesCommentIdOnly = await prisma.seriesComments.findMany({ select: { SeriesCommentId: true } })
     * 
     */
    findMany<T extends SeriesCommentsFindManyArgs>(args?: SelectSubset<T, SeriesCommentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeriesComments.
     * @param {SeriesCommentsCreateArgs} args - Arguments to create a SeriesComments.
     * @example
     * // Create one SeriesComments
     * const SeriesComments = await prisma.seriesComments.create({
     *   data: {
     *     // ... data to create a SeriesComments
     *   }
     * })
     * 
     */
    create<T extends SeriesCommentsCreateArgs>(args: SelectSubset<T, SeriesCommentsCreateArgs<ExtArgs>>): Prisma__SeriesCommentsClient<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeriesComments.
     * @param {SeriesCommentsCreateManyArgs} args - Arguments to create many SeriesComments.
     * @example
     * // Create many SeriesComments
     * const seriesComments = await prisma.seriesComments.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeriesCommentsCreateManyArgs>(args?: SelectSubset<T, SeriesCommentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeriesComments and returns the data saved in the database.
     * @param {SeriesCommentsCreateManyAndReturnArgs} args - Arguments to create many SeriesComments.
     * @example
     * // Create many SeriesComments
     * const seriesComments = await prisma.seriesComments.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeriesComments and only return the `SeriesCommentId`
     * const seriesCommentsWithSeriesCommentIdOnly = await prisma.seriesComments.createManyAndReturn({ 
     *   select: { SeriesCommentId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeriesCommentsCreateManyAndReturnArgs>(args?: SelectSubset<T, SeriesCommentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeriesComments.
     * @param {SeriesCommentsDeleteArgs} args - Arguments to delete one SeriesComments.
     * @example
     * // Delete one SeriesComments
     * const SeriesComments = await prisma.seriesComments.delete({
     *   where: {
     *     // ... filter to delete one SeriesComments
     *   }
     * })
     * 
     */
    delete<T extends SeriesCommentsDeleteArgs>(args: SelectSubset<T, SeriesCommentsDeleteArgs<ExtArgs>>): Prisma__SeriesCommentsClient<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeriesComments.
     * @param {SeriesCommentsUpdateArgs} args - Arguments to update one SeriesComments.
     * @example
     * // Update one SeriesComments
     * const seriesComments = await prisma.seriesComments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeriesCommentsUpdateArgs>(args: SelectSubset<T, SeriesCommentsUpdateArgs<ExtArgs>>): Prisma__SeriesCommentsClient<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeriesComments.
     * @param {SeriesCommentsDeleteManyArgs} args - Arguments to filter SeriesComments to delete.
     * @example
     * // Delete a few SeriesComments
     * const { count } = await prisma.seriesComments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeriesCommentsDeleteManyArgs>(args?: SelectSubset<T, SeriesCommentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeriesComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCommentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeriesComments
     * const seriesComments = await prisma.seriesComments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeriesCommentsUpdateManyArgs>(args: SelectSubset<T, SeriesCommentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeriesComments.
     * @param {SeriesCommentsUpsertArgs} args - Arguments to update or create a SeriesComments.
     * @example
     * // Update or create a SeriesComments
     * const seriesComments = await prisma.seriesComments.upsert({
     *   create: {
     *     // ... data to create a SeriesComments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeriesComments we want to update
     *   }
     * })
     */
    upsert<T extends SeriesCommentsUpsertArgs>(args: SelectSubset<T, SeriesCommentsUpsertArgs<ExtArgs>>): Prisma__SeriesCommentsClient<$Result.GetResult<Prisma.$SeriesCommentsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeriesComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCommentsCountArgs} args - Arguments to filter SeriesComments to count.
     * @example
     * // Count the number of SeriesComments
     * const count = await prisma.seriesComments.count({
     *   where: {
     *     // ... the filter for the SeriesComments we want to count
     *   }
     * })
    **/
    count<T extends SeriesCommentsCountArgs>(
      args?: Subset<T, SeriesCommentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeriesCommentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeriesComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeriesCommentsAggregateArgs>(args: Subset<T, SeriesCommentsAggregateArgs>): Prisma.PrismaPromise<GetSeriesCommentsAggregateType<T>>

    /**
     * Group by SeriesComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCommentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeriesCommentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeriesCommentsGroupByArgs['orderBy'] }
        : { orderBy?: SeriesCommentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeriesCommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeriesCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeriesComments model
   */
  readonly fields: SeriesCommentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeriesComments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeriesCommentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Series<T extends SeriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeriesDefaultArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeriesComments model
   */ 
  interface SeriesCommentsFieldRefs {
    readonly SeriesCommentId: FieldRef<"SeriesComments", 'Int'>
    readonly UserId: FieldRef<"SeriesComments", 'Int'>
    readonly SeriesId: FieldRef<"SeriesComments", 'Int'>
    readonly CommentText: FieldRef<"SeriesComments", 'String'>
    readonly CreatedAt: FieldRef<"SeriesComments", 'DateTime'>
    readonly UpdatedAt: FieldRef<"SeriesComments", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SeriesComments findUnique
   */
  export type SeriesCommentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesComments to fetch.
     */
    where: SeriesCommentsWhereUniqueInput
  }

  /**
   * SeriesComments findUniqueOrThrow
   */
  export type SeriesCommentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesComments to fetch.
     */
    where: SeriesCommentsWhereUniqueInput
  }

  /**
   * SeriesComments findFirst
   */
  export type SeriesCommentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesComments to fetch.
     */
    where?: SeriesCommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesComments to fetch.
     */
    orderBy?: SeriesCommentsOrderByWithRelationInput | SeriesCommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesComments.
     */
    cursor?: SeriesCommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesComments.
     */
    distinct?: SeriesCommentsScalarFieldEnum | SeriesCommentsScalarFieldEnum[]
  }

  /**
   * SeriesComments findFirstOrThrow
   */
  export type SeriesCommentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesComments to fetch.
     */
    where?: SeriesCommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesComments to fetch.
     */
    orderBy?: SeriesCommentsOrderByWithRelationInput | SeriesCommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesComments.
     */
    cursor?: SeriesCommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesComments.
     */
    distinct?: SeriesCommentsScalarFieldEnum | SeriesCommentsScalarFieldEnum[]
  }

  /**
   * SeriesComments findMany
   */
  export type SeriesCommentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesComments to fetch.
     */
    where?: SeriesCommentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesComments to fetch.
     */
    orderBy?: SeriesCommentsOrderByWithRelationInput | SeriesCommentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeriesComments.
     */
    cursor?: SeriesCommentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesComments.
     */
    skip?: number
    distinct?: SeriesCommentsScalarFieldEnum | SeriesCommentsScalarFieldEnum[]
  }

  /**
   * SeriesComments create
   */
  export type SeriesCommentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * The data needed to create a SeriesComments.
     */
    data: XOR<SeriesCommentsCreateInput, SeriesCommentsUncheckedCreateInput>
  }

  /**
   * SeriesComments createMany
   */
  export type SeriesCommentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeriesComments.
     */
    data: SeriesCommentsCreateManyInput | SeriesCommentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeriesComments createManyAndReturn
   */
  export type SeriesCommentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeriesComments.
     */
    data: SeriesCommentsCreateManyInput | SeriesCommentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeriesComments update
   */
  export type SeriesCommentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * The data needed to update a SeriesComments.
     */
    data: XOR<SeriesCommentsUpdateInput, SeriesCommentsUncheckedUpdateInput>
    /**
     * Choose, which SeriesComments to update.
     */
    where: SeriesCommentsWhereUniqueInput
  }

  /**
   * SeriesComments updateMany
   */
  export type SeriesCommentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeriesComments.
     */
    data: XOR<SeriesCommentsUpdateManyMutationInput, SeriesCommentsUncheckedUpdateManyInput>
    /**
     * Filter which SeriesComments to update
     */
    where?: SeriesCommentsWhereInput
  }

  /**
   * SeriesComments upsert
   */
  export type SeriesCommentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * The filter to search for the SeriesComments to update in case it exists.
     */
    where: SeriesCommentsWhereUniqueInput
    /**
     * In case the SeriesComments found by the `where` argument doesn't exist, create a new SeriesComments with this data.
     */
    create: XOR<SeriesCommentsCreateInput, SeriesCommentsUncheckedCreateInput>
    /**
     * In case the SeriesComments was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeriesCommentsUpdateInput, SeriesCommentsUncheckedUpdateInput>
  }

  /**
   * SeriesComments delete
   */
  export type SeriesCommentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
    /**
     * Filter which SeriesComments to delete.
     */
    where: SeriesCommentsWhereUniqueInput
  }

  /**
   * SeriesComments deleteMany
   */
  export type SeriesCommentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesComments to delete
     */
    where?: SeriesCommentsWhereInput
  }

  /**
   * SeriesComments without action
   */
  export type SeriesCommentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesComments
     */
    select?: SeriesCommentsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCommentsInclude<ExtArgs> | null
  }


  /**
   * Model MovieNotes
   */

  export type AggregateMovieNotes = {
    _count: MovieNotesCountAggregateOutputType | null
    _avg: MovieNotesAvgAggregateOutputType | null
    _sum: MovieNotesSumAggregateOutputType | null
    _min: MovieNotesMinAggregateOutputType | null
    _max: MovieNotesMaxAggregateOutputType | null
  }

  export type MovieNotesAvgAggregateOutputType = {
    NoteId: number | null
    UserId: number | null
    MovieId: number | null
  }

  export type MovieNotesSumAggregateOutputType = {
    NoteId: number | null
    UserId: number | null
    MovieId: number | null
  }

  export type MovieNotesMinAggregateOutputType = {
    NoteId: number | null
    UserId: number | null
    MovieId: number | null
    NoteText: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieNotesMaxAggregateOutputType = {
    NoteId: number | null
    UserId: number | null
    MovieId: number | null
    NoteText: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieNotesCountAggregateOutputType = {
    NoteId: number
    UserId: number
    MovieId: number
    NoteText: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type MovieNotesAvgAggregateInputType = {
    NoteId?: true
    UserId?: true
    MovieId?: true
  }

  export type MovieNotesSumAggregateInputType = {
    NoteId?: true
    UserId?: true
    MovieId?: true
  }

  export type MovieNotesMinAggregateInputType = {
    NoteId?: true
    UserId?: true
    MovieId?: true
    NoteText?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieNotesMaxAggregateInputType = {
    NoteId?: true
    UserId?: true
    MovieId?: true
    NoteText?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieNotesCountAggregateInputType = {
    NoteId?: true
    UserId?: true
    MovieId?: true
    NoteText?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type MovieNotesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieNotes to aggregate.
     */
    where?: MovieNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieNotes to fetch.
     */
    orderBy?: MovieNotesOrderByWithRelationInput | MovieNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovieNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MovieNotes
    **/
    _count?: true | MovieNotesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieNotesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieNotesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieNotesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieNotesMaxAggregateInputType
  }

  export type GetMovieNotesAggregateType<T extends MovieNotesAggregateArgs> = {
        [P in keyof T & keyof AggregateMovieNotes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovieNotes[P]>
      : GetScalarType<T[P], AggregateMovieNotes[P]>
  }




  export type MovieNotesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieNotesWhereInput
    orderBy?: MovieNotesOrderByWithAggregationInput | MovieNotesOrderByWithAggregationInput[]
    by: MovieNotesScalarFieldEnum[] | MovieNotesScalarFieldEnum
    having?: MovieNotesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieNotesCountAggregateInputType | true
    _avg?: MovieNotesAvgAggregateInputType
    _sum?: MovieNotesSumAggregateInputType
    _min?: MovieNotesMinAggregateInputType
    _max?: MovieNotesMaxAggregateInputType
  }

  export type MovieNotesGroupByOutputType = {
    NoteId: number
    UserId: number
    MovieId: number
    NoteText: string
    CreatedAt: Date
    UpdatedAt: Date
    _count: MovieNotesCountAggregateOutputType | null
    _avg: MovieNotesAvgAggregateOutputType | null
    _sum: MovieNotesSumAggregateOutputType | null
    _min: MovieNotesMinAggregateOutputType | null
    _max: MovieNotesMaxAggregateOutputType | null
  }

  type GetMovieNotesGroupByPayload<T extends MovieNotesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieNotesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieNotesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieNotesGroupByOutputType[P]>
            : GetScalarType<T[P], MovieNotesGroupByOutputType[P]>
        }
      >
    >


  export type MovieNotesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    NoteId?: boolean
    UserId?: boolean
    MovieId?: boolean
    NoteText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieNotes"]>

  export type MovieNotesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    NoteId?: boolean
    UserId?: boolean
    MovieId?: boolean
    NoteText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieNotes"]>

  export type MovieNotesSelectScalar = {
    NoteId?: boolean
    UserId?: boolean
    MovieId?: boolean
    NoteText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type MovieNotesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }
  export type MovieNotesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
  }

  export type $MovieNotesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MovieNotes"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Movie: Prisma.$MoviesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      NoteId: number
      UserId: number
      MovieId: number
      NoteText: string
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["movieNotes"]>
    composites: {}
  }

  type MovieNotesGetPayload<S extends boolean | null | undefined | MovieNotesDefaultArgs> = $Result.GetResult<Prisma.$MovieNotesPayload, S>

  type MovieNotesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovieNotesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovieNotesCountAggregateInputType | true
    }

  export interface MovieNotesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MovieNotes'], meta: { name: 'MovieNotes' } }
    /**
     * Find zero or one MovieNotes that matches the filter.
     * @param {MovieNotesFindUniqueArgs} args - Arguments to find a MovieNotes
     * @example
     * // Get one MovieNotes
     * const movieNotes = await prisma.movieNotes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovieNotesFindUniqueArgs>(args: SelectSubset<T, MovieNotesFindUniqueArgs<ExtArgs>>): Prisma__MovieNotesClient<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MovieNotes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovieNotesFindUniqueOrThrowArgs} args - Arguments to find a MovieNotes
     * @example
     * // Get one MovieNotes
     * const movieNotes = await prisma.movieNotes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovieNotesFindUniqueOrThrowArgs>(args: SelectSubset<T, MovieNotesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovieNotesClient<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MovieNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieNotesFindFirstArgs} args - Arguments to find a MovieNotes
     * @example
     * // Get one MovieNotes
     * const movieNotes = await prisma.movieNotes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovieNotesFindFirstArgs>(args?: SelectSubset<T, MovieNotesFindFirstArgs<ExtArgs>>): Prisma__MovieNotesClient<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MovieNotes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieNotesFindFirstOrThrowArgs} args - Arguments to find a MovieNotes
     * @example
     * // Get one MovieNotes
     * const movieNotes = await prisma.movieNotes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovieNotesFindFirstOrThrowArgs>(args?: SelectSubset<T, MovieNotesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovieNotesClient<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MovieNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieNotesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MovieNotes
     * const movieNotes = await prisma.movieNotes.findMany()
     * 
     * // Get first 10 MovieNotes
     * const movieNotes = await prisma.movieNotes.findMany({ take: 10 })
     * 
     * // Only select the `NoteId`
     * const movieNotesWithNoteIdOnly = await prisma.movieNotes.findMany({ select: { NoteId: true } })
     * 
     */
    findMany<T extends MovieNotesFindManyArgs>(args?: SelectSubset<T, MovieNotesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MovieNotes.
     * @param {MovieNotesCreateArgs} args - Arguments to create a MovieNotes.
     * @example
     * // Create one MovieNotes
     * const MovieNotes = await prisma.movieNotes.create({
     *   data: {
     *     // ... data to create a MovieNotes
     *   }
     * })
     * 
     */
    create<T extends MovieNotesCreateArgs>(args: SelectSubset<T, MovieNotesCreateArgs<ExtArgs>>): Prisma__MovieNotesClient<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MovieNotes.
     * @param {MovieNotesCreateManyArgs} args - Arguments to create many MovieNotes.
     * @example
     * // Create many MovieNotes
     * const movieNotes = await prisma.movieNotes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovieNotesCreateManyArgs>(args?: SelectSubset<T, MovieNotesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MovieNotes and returns the data saved in the database.
     * @param {MovieNotesCreateManyAndReturnArgs} args - Arguments to create many MovieNotes.
     * @example
     * // Create many MovieNotes
     * const movieNotes = await prisma.movieNotes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MovieNotes and only return the `NoteId`
     * const movieNotesWithNoteIdOnly = await prisma.movieNotes.createManyAndReturn({ 
     *   select: { NoteId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovieNotesCreateManyAndReturnArgs>(args?: SelectSubset<T, MovieNotesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MovieNotes.
     * @param {MovieNotesDeleteArgs} args - Arguments to delete one MovieNotes.
     * @example
     * // Delete one MovieNotes
     * const MovieNotes = await prisma.movieNotes.delete({
     *   where: {
     *     // ... filter to delete one MovieNotes
     *   }
     * })
     * 
     */
    delete<T extends MovieNotesDeleteArgs>(args: SelectSubset<T, MovieNotesDeleteArgs<ExtArgs>>): Prisma__MovieNotesClient<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MovieNotes.
     * @param {MovieNotesUpdateArgs} args - Arguments to update one MovieNotes.
     * @example
     * // Update one MovieNotes
     * const movieNotes = await prisma.movieNotes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovieNotesUpdateArgs>(args: SelectSubset<T, MovieNotesUpdateArgs<ExtArgs>>): Prisma__MovieNotesClient<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MovieNotes.
     * @param {MovieNotesDeleteManyArgs} args - Arguments to filter MovieNotes to delete.
     * @example
     * // Delete a few MovieNotes
     * const { count } = await prisma.movieNotes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovieNotesDeleteManyArgs>(args?: SelectSubset<T, MovieNotesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovieNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieNotesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MovieNotes
     * const movieNotes = await prisma.movieNotes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovieNotesUpdateManyArgs>(args: SelectSubset<T, MovieNotesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MovieNotes.
     * @param {MovieNotesUpsertArgs} args - Arguments to update or create a MovieNotes.
     * @example
     * // Update or create a MovieNotes
     * const movieNotes = await prisma.movieNotes.upsert({
     *   create: {
     *     // ... data to create a MovieNotes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MovieNotes we want to update
     *   }
     * })
     */
    upsert<T extends MovieNotesUpsertArgs>(args: SelectSubset<T, MovieNotesUpsertArgs<ExtArgs>>): Prisma__MovieNotesClient<$Result.GetResult<Prisma.$MovieNotesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MovieNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieNotesCountArgs} args - Arguments to filter MovieNotes to count.
     * @example
     * // Count the number of MovieNotes
     * const count = await prisma.movieNotes.count({
     *   where: {
     *     // ... the filter for the MovieNotes we want to count
     *   }
     * })
    **/
    count<T extends MovieNotesCountArgs>(
      args?: Subset<T, MovieNotesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieNotesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MovieNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieNotesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieNotesAggregateArgs>(args: Subset<T, MovieNotesAggregateArgs>): Prisma.PrismaPromise<GetMovieNotesAggregateType<T>>

    /**
     * Group by MovieNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieNotesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieNotesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieNotesGroupByArgs['orderBy'] }
        : { orderBy?: MovieNotesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieNotesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieNotesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MovieNotes model
   */
  readonly fields: MovieNotesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MovieNotes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovieNotesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Movie<T extends MoviesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MoviesDefaultArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MovieNotes model
   */ 
  interface MovieNotesFieldRefs {
    readonly NoteId: FieldRef<"MovieNotes", 'Int'>
    readonly UserId: FieldRef<"MovieNotes", 'Int'>
    readonly MovieId: FieldRef<"MovieNotes", 'Int'>
    readonly NoteText: FieldRef<"MovieNotes", 'String'>
    readonly CreatedAt: FieldRef<"MovieNotes", 'DateTime'>
    readonly UpdatedAt: FieldRef<"MovieNotes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MovieNotes findUnique
   */
  export type MovieNotesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * Filter, which MovieNotes to fetch.
     */
    where: MovieNotesWhereUniqueInput
  }

  /**
   * MovieNotes findUniqueOrThrow
   */
  export type MovieNotesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * Filter, which MovieNotes to fetch.
     */
    where: MovieNotesWhereUniqueInput
  }

  /**
   * MovieNotes findFirst
   */
  export type MovieNotesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * Filter, which MovieNotes to fetch.
     */
    where?: MovieNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieNotes to fetch.
     */
    orderBy?: MovieNotesOrderByWithRelationInput | MovieNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieNotes.
     */
    cursor?: MovieNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieNotes.
     */
    distinct?: MovieNotesScalarFieldEnum | MovieNotesScalarFieldEnum[]
  }

  /**
   * MovieNotes findFirstOrThrow
   */
  export type MovieNotesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * Filter, which MovieNotes to fetch.
     */
    where?: MovieNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieNotes to fetch.
     */
    orderBy?: MovieNotesOrderByWithRelationInput | MovieNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieNotes.
     */
    cursor?: MovieNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieNotes.
     */
    distinct?: MovieNotesScalarFieldEnum | MovieNotesScalarFieldEnum[]
  }

  /**
   * MovieNotes findMany
   */
  export type MovieNotesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * Filter, which MovieNotes to fetch.
     */
    where?: MovieNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieNotes to fetch.
     */
    orderBy?: MovieNotesOrderByWithRelationInput | MovieNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MovieNotes.
     */
    cursor?: MovieNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieNotes.
     */
    skip?: number
    distinct?: MovieNotesScalarFieldEnum | MovieNotesScalarFieldEnum[]
  }

  /**
   * MovieNotes create
   */
  export type MovieNotesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * The data needed to create a MovieNotes.
     */
    data: XOR<MovieNotesCreateInput, MovieNotesUncheckedCreateInput>
  }

  /**
   * MovieNotes createMany
   */
  export type MovieNotesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MovieNotes.
     */
    data: MovieNotesCreateManyInput | MovieNotesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MovieNotes createManyAndReturn
   */
  export type MovieNotesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MovieNotes.
     */
    data: MovieNotesCreateManyInput | MovieNotesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MovieNotes update
   */
  export type MovieNotesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * The data needed to update a MovieNotes.
     */
    data: XOR<MovieNotesUpdateInput, MovieNotesUncheckedUpdateInput>
    /**
     * Choose, which MovieNotes to update.
     */
    where: MovieNotesWhereUniqueInput
  }

  /**
   * MovieNotes updateMany
   */
  export type MovieNotesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MovieNotes.
     */
    data: XOR<MovieNotesUpdateManyMutationInput, MovieNotesUncheckedUpdateManyInput>
    /**
     * Filter which MovieNotes to update
     */
    where?: MovieNotesWhereInput
  }

  /**
   * MovieNotes upsert
   */
  export type MovieNotesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * The filter to search for the MovieNotes to update in case it exists.
     */
    where: MovieNotesWhereUniqueInput
    /**
     * In case the MovieNotes found by the `where` argument doesn't exist, create a new MovieNotes with this data.
     */
    create: XOR<MovieNotesCreateInput, MovieNotesUncheckedCreateInput>
    /**
     * In case the MovieNotes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovieNotesUpdateInput, MovieNotesUncheckedUpdateInput>
  }

  /**
   * MovieNotes delete
   */
  export type MovieNotesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
    /**
     * Filter which MovieNotes to delete.
     */
    where: MovieNotesWhereUniqueInput
  }

  /**
   * MovieNotes deleteMany
   */
  export type MovieNotesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieNotes to delete
     */
    where?: MovieNotesWhereInput
  }

  /**
   * MovieNotes without action
   */
  export type MovieNotesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieNotes
     */
    select?: MovieNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieNotesInclude<ExtArgs> | null
  }


  /**
   * Model SeriesNotes
   */

  export type AggregateSeriesNotes = {
    _count: SeriesNotesCountAggregateOutputType | null
    _avg: SeriesNotesAvgAggregateOutputType | null
    _sum: SeriesNotesSumAggregateOutputType | null
    _min: SeriesNotesMinAggregateOutputType | null
    _max: SeriesNotesMaxAggregateOutputType | null
  }

  export type SeriesNotesAvgAggregateOutputType = {
    NoteId: number | null
    UserId: number | null
    SeriesId: number | null
  }

  export type SeriesNotesSumAggregateOutputType = {
    NoteId: number | null
    UserId: number | null
    SeriesId: number | null
  }

  export type SeriesNotesMinAggregateOutputType = {
    NoteId: number | null
    UserId: number | null
    SeriesId: number | null
    NoteText: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesNotesMaxAggregateOutputType = {
    NoteId: number | null
    UserId: number | null
    SeriesId: number | null
    NoteText: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesNotesCountAggregateOutputType = {
    NoteId: number
    UserId: number
    SeriesId: number
    NoteText: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type SeriesNotesAvgAggregateInputType = {
    NoteId?: true
    UserId?: true
    SeriesId?: true
  }

  export type SeriesNotesSumAggregateInputType = {
    NoteId?: true
    UserId?: true
    SeriesId?: true
  }

  export type SeriesNotesMinAggregateInputType = {
    NoteId?: true
    UserId?: true
    SeriesId?: true
    NoteText?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesNotesMaxAggregateInputType = {
    NoteId?: true
    UserId?: true
    SeriesId?: true
    NoteText?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesNotesCountAggregateInputType = {
    NoteId?: true
    UserId?: true
    SeriesId?: true
    NoteText?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type SeriesNotesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesNotes to aggregate.
     */
    where?: SeriesNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesNotes to fetch.
     */
    orderBy?: SeriesNotesOrderByWithRelationInput | SeriesNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeriesNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeriesNotes
    **/
    _count?: true | SeriesNotesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeriesNotesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeriesNotesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeriesNotesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeriesNotesMaxAggregateInputType
  }

  export type GetSeriesNotesAggregateType<T extends SeriesNotesAggregateArgs> = {
        [P in keyof T & keyof AggregateSeriesNotes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeriesNotes[P]>
      : GetScalarType<T[P], AggregateSeriesNotes[P]>
  }




  export type SeriesNotesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesNotesWhereInput
    orderBy?: SeriesNotesOrderByWithAggregationInput | SeriesNotesOrderByWithAggregationInput[]
    by: SeriesNotesScalarFieldEnum[] | SeriesNotesScalarFieldEnum
    having?: SeriesNotesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeriesNotesCountAggregateInputType | true
    _avg?: SeriesNotesAvgAggregateInputType
    _sum?: SeriesNotesSumAggregateInputType
    _min?: SeriesNotesMinAggregateInputType
    _max?: SeriesNotesMaxAggregateInputType
  }

  export type SeriesNotesGroupByOutputType = {
    NoteId: number
    UserId: number
    SeriesId: number
    NoteText: string
    CreatedAt: Date
    UpdatedAt: Date
    _count: SeriesNotesCountAggregateOutputType | null
    _avg: SeriesNotesAvgAggregateOutputType | null
    _sum: SeriesNotesSumAggregateOutputType | null
    _min: SeriesNotesMinAggregateOutputType | null
    _max: SeriesNotesMaxAggregateOutputType | null
  }

  type GetSeriesNotesGroupByPayload<T extends SeriesNotesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeriesNotesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeriesNotesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeriesNotesGroupByOutputType[P]>
            : GetScalarType<T[P], SeriesNotesGroupByOutputType[P]>
        }
      >
    >


  export type SeriesNotesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    NoteId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    NoteText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesNotes"]>

  export type SeriesNotesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    NoteId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    NoteText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesNotes"]>

  export type SeriesNotesSelectScalar = {
    NoteId?: boolean
    UserId?: boolean
    SeriesId?: boolean
    NoteText?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type SeriesNotesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }
  export type SeriesNotesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
  }

  export type $SeriesNotesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeriesNotes"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Series: Prisma.$SeriesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      NoteId: number
      UserId: number
      SeriesId: number
      NoteText: string
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["seriesNotes"]>
    composites: {}
  }

  type SeriesNotesGetPayload<S extends boolean | null | undefined | SeriesNotesDefaultArgs> = $Result.GetResult<Prisma.$SeriesNotesPayload, S>

  type SeriesNotesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeriesNotesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeriesNotesCountAggregateInputType | true
    }

  export interface SeriesNotesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeriesNotes'], meta: { name: 'SeriesNotes' } }
    /**
     * Find zero or one SeriesNotes that matches the filter.
     * @param {SeriesNotesFindUniqueArgs} args - Arguments to find a SeriesNotes
     * @example
     * // Get one SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeriesNotesFindUniqueArgs>(args: SelectSubset<T, SeriesNotesFindUniqueArgs<ExtArgs>>): Prisma__SeriesNotesClient<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeriesNotes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeriesNotesFindUniqueOrThrowArgs} args - Arguments to find a SeriesNotes
     * @example
     * // Get one SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeriesNotesFindUniqueOrThrowArgs>(args: SelectSubset<T, SeriesNotesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeriesNotesClient<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeriesNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesNotesFindFirstArgs} args - Arguments to find a SeriesNotes
     * @example
     * // Get one SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeriesNotesFindFirstArgs>(args?: SelectSubset<T, SeriesNotesFindFirstArgs<ExtArgs>>): Prisma__SeriesNotesClient<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeriesNotes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesNotesFindFirstOrThrowArgs} args - Arguments to find a SeriesNotes
     * @example
     * // Get one SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeriesNotesFindFirstOrThrowArgs>(args?: SelectSubset<T, SeriesNotesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeriesNotesClient<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeriesNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesNotesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.findMany()
     * 
     * // Get first 10 SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.findMany({ take: 10 })
     * 
     * // Only select the `NoteId`
     * const seriesNotesWithNoteIdOnly = await prisma.seriesNotes.findMany({ select: { NoteId: true } })
     * 
     */
    findMany<T extends SeriesNotesFindManyArgs>(args?: SelectSubset<T, SeriesNotesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeriesNotes.
     * @param {SeriesNotesCreateArgs} args - Arguments to create a SeriesNotes.
     * @example
     * // Create one SeriesNotes
     * const SeriesNotes = await prisma.seriesNotes.create({
     *   data: {
     *     // ... data to create a SeriesNotes
     *   }
     * })
     * 
     */
    create<T extends SeriesNotesCreateArgs>(args: SelectSubset<T, SeriesNotesCreateArgs<ExtArgs>>): Prisma__SeriesNotesClient<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeriesNotes.
     * @param {SeriesNotesCreateManyArgs} args - Arguments to create many SeriesNotes.
     * @example
     * // Create many SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeriesNotesCreateManyArgs>(args?: SelectSubset<T, SeriesNotesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeriesNotes and returns the data saved in the database.
     * @param {SeriesNotesCreateManyAndReturnArgs} args - Arguments to create many SeriesNotes.
     * @example
     * // Create many SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeriesNotes and only return the `NoteId`
     * const seriesNotesWithNoteIdOnly = await prisma.seriesNotes.createManyAndReturn({ 
     *   select: { NoteId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeriesNotesCreateManyAndReturnArgs>(args?: SelectSubset<T, SeriesNotesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeriesNotes.
     * @param {SeriesNotesDeleteArgs} args - Arguments to delete one SeriesNotes.
     * @example
     * // Delete one SeriesNotes
     * const SeriesNotes = await prisma.seriesNotes.delete({
     *   where: {
     *     // ... filter to delete one SeriesNotes
     *   }
     * })
     * 
     */
    delete<T extends SeriesNotesDeleteArgs>(args: SelectSubset<T, SeriesNotesDeleteArgs<ExtArgs>>): Prisma__SeriesNotesClient<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeriesNotes.
     * @param {SeriesNotesUpdateArgs} args - Arguments to update one SeriesNotes.
     * @example
     * // Update one SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeriesNotesUpdateArgs>(args: SelectSubset<T, SeriesNotesUpdateArgs<ExtArgs>>): Prisma__SeriesNotesClient<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeriesNotes.
     * @param {SeriesNotesDeleteManyArgs} args - Arguments to filter SeriesNotes to delete.
     * @example
     * // Delete a few SeriesNotes
     * const { count } = await prisma.seriesNotes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeriesNotesDeleteManyArgs>(args?: SelectSubset<T, SeriesNotesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeriesNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesNotesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeriesNotesUpdateManyArgs>(args: SelectSubset<T, SeriesNotesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeriesNotes.
     * @param {SeriesNotesUpsertArgs} args - Arguments to update or create a SeriesNotes.
     * @example
     * // Update or create a SeriesNotes
     * const seriesNotes = await prisma.seriesNotes.upsert({
     *   create: {
     *     // ... data to create a SeriesNotes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeriesNotes we want to update
     *   }
     * })
     */
    upsert<T extends SeriesNotesUpsertArgs>(args: SelectSubset<T, SeriesNotesUpsertArgs<ExtArgs>>): Prisma__SeriesNotesClient<$Result.GetResult<Prisma.$SeriesNotesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeriesNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesNotesCountArgs} args - Arguments to filter SeriesNotes to count.
     * @example
     * // Count the number of SeriesNotes
     * const count = await prisma.seriesNotes.count({
     *   where: {
     *     // ... the filter for the SeriesNotes we want to count
     *   }
     * })
    **/
    count<T extends SeriesNotesCountArgs>(
      args?: Subset<T, SeriesNotesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeriesNotesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeriesNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesNotesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeriesNotesAggregateArgs>(args: Subset<T, SeriesNotesAggregateArgs>): Prisma.PrismaPromise<GetSeriesNotesAggregateType<T>>

    /**
     * Group by SeriesNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesNotesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeriesNotesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeriesNotesGroupByArgs['orderBy'] }
        : { orderBy?: SeriesNotesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeriesNotesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeriesNotesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeriesNotes model
   */
  readonly fields: SeriesNotesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeriesNotes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeriesNotesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Series<T extends SeriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeriesDefaultArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeriesNotes model
   */ 
  interface SeriesNotesFieldRefs {
    readonly NoteId: FieldRef<"SeriesNotes", 'Int'>
    readonly UserId: FieldRef<"SeriesNotes", 'Int'>
    readonly SeriesId: FieldRef<"SeriesNotes", 'Int'>
    readonly NoteText: FieldRef<"SeriesNotes", 'String'>
    readonly CreatedAt: FieldRef<"SeriesNotes", 'DateTime'>
    readonly UpdatedAt: FieldRef<"SeriesNotes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SeriesNotes findUnique
   */
  export type SeriesNotesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesNotes to fetch.
     */
    where: SeriesNotesWhereUniqueInput
  }

  /**
   * SeriesNotes findUniqueOrThrow
   */
  export type SeriesNotesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesNotes to fetch.
     */
    where: SeriesNotesWhereUniqueInput
  }

  /**
   * SeriesNotes findFirst
   */
  export type SeriesNotesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesNotes to fetch.
     */
    where?: SeriesNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesNotes to fetch.
     */
    orderBy?: SeriesNotesOrderByWithRelationInput | SeriesNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesNotes.
     */
    cursor?: SeriesNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesNotes.
     */
    distinct?: SeriesNotesScalarFieldEnum | SeriesNotesScalarFieldEnum[]
  }

  /**
   * SeriesNotes findFirstOrThrow
   */
  export type SeriesNotesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesNotes to fetch.
     */
    where?: SeriesNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesNotes to fetch.
     */
    orderBy?: SeriesNotesOrderByWithRelationInput | SeriesNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesNotes.
     */
    cursor?: SeriesNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesNotes.
     */
    distinct?: SeriesNotesScalarFieldEnum | SeriesNotesScalarFieldEnum[]
  }

  /**
   * SeriesNotes findMany
   */
  export type SeriesNotesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesNotes to fetch.
     */
    where?: SeriesNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesNotes to fetch.
     */
    orderBy?: SeriesNotesOrderByWithRelationInput | SeriesNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeriesNotes.
     */
    cursor?: SeriesNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesNotes.
     */
    skip?: number
    distinct?: SeriesNotesScalarFieldEnum | SeriesNotesScalarFieldEnum[]
  }

  /**
   * SeriesNotes create
   */
  export type SeriesNotesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * The data needed to create a SeriesNotes.
     */
    data: XOR<SeriesNotesCreateInput, SeriesNotesUncheckedCreateInput>
  }

  /**
   * SeriesNotes createMany
   */
  export type SeriesNotesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeriesNotes.
     */
    data: SeriesNotesCreateManyInput | SeriesNotesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeriesNotes createManyAndReturn
   */
  export type SeriesNotesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeriesNotes.
     */
    data: SeriesNotesCreateManyInput | SeriesNotesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeriesNotes update
   */
  export type SeriesNotesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * The data needed to update a SeriesNotes.
     */
    data: XOR<SeriesNotesUpdateInput, SeriesNotesUncheckedUpdateInput>
    /**
     * Choose, which SeriesNotes to update.
     */
    where: SeriesNotesWhereUniqueInput
  }

  /**
   * SeriesNotes updateMany
   */
  export type SeriesNotesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeriesNotes.
     */
    data: XOR<SeriesNotesUpdateManyMutationInput, SeriesNotesUncheckedUpdateManyInput>
    /**
     * Filter which SeriesNotes to update
     */
    where?: SeriesNotesWhereInput
  }

  /**
   * SeriesNotes upsert
   */
  export type SeriesNotesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * The filter to search for the SeriesNotes to update in case it exists.
     */
    where: SeriesNotesWhereUniqueInput
    /**
     * In case the SeriesNotes found by the `where` argument doesn't exist, create a new SeriesNotes with this data.
     */
    create: XOR<SeriesNotesCreateInput, SeriesNotesUncheckedCreateInput>
    /**
     * In case the SeriesNotes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeriesNotesUpdateInput, SeriesNotesUncheckedUpdateInput>
  }

  /**
   * SeriesNotes delete
   */
  export type SeriesNotesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
    /**
     * Filter which SeriesNotes to delete.
     */
    where: SeriesNotesWhereUniqueInput
  }

  /**
   * SeriesNotes deleteMany
   */
  export type SeriesNotesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesNotes to delete
     */
    where?: SeriesNotesWhereInput
  }

  /**
   * SeriesNotes without action
   */
  export type SeriesNotesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesNotes
     */
    select?: SeriesNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesNotesInclude<ExtArgs> | null
  }


  /**
   * Model Scheduling
   */

  export type AggregateScheduling = {
    _count: SchedulingCountAggregateOutputType | null
    _avg: SchedulingAvgAggregateOutputType | null
    _sum: SchedulingSumAggregateOutputType | null
    _min: SchedulingMinAggregateOutputType | null
    _max: SchedulingMaxAggregateOutputType | null
  }

  export type SchedulingAvgAggregateOutputType = {
    EventId: number | null
    UserId: number | null
    MovieId: number | null
    SeriesId: number | null
  }

  export type SchedulingSumAggregateOutputType = {
    EventId: number | null
    UserId: number | null
    MovieId: number | null
    SeriesId: number | null
  }

  export type SchedulingMinAggregateOutputType = {
    EventId: number | null
    UserId: number | null
    MovieId: number | null
    SeriesId: number | null
    EventDate: Date | null
    Note: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SchedulingMaxAggregateOutputType = {
    EventId: number | null
    UserId: number | null
    MovieId: number | null
    SeriesId: number | null
    EventDate: Date | null
    Note: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SchedulingCountAggregateOutputType = {
    EventId: number
    UserId: number
    MovieId: number
    SeriesId: number
    EventDate: number
    Note: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type SchedulingAvgAggregateInputType = {
    EventId?: true
    UserId?: true
    MovieId?: true
    SeriesId?: true
  }

  export type SchedulingSumAggregateInputType = {
    EventId?: true
    UserId?: true
    MovieId?: true
    SeriesId?: true
  }

  export type SchedulingMinAggregateInputType = {
    EventId?: true
    UserId?: true
    MovieId?: true
    SeriesId?: true
    EventDate?: true
    Note?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SchedulingMaxAggregateInputType = {
    EventId?: true
    UserId?: true
    MovieId?: true
    SeriesId?: true
    EventDate?: true
    Note?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SchedulingCountAggregateInputType = {
    EventId?: true
    UserId?: true
    MovieId?: true
    SeriesId?: true
    EventDate?: true
    Note?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type SchedulingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Scheduling to aggregate.
     */
    where?: SchedulingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedulings to fetch.
     */
    orderBy?: SchedulingOrderByWithRelationInput | SchedulingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchedulingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedulings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedulings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedulings
    **/
    _count?: true | SchedulingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchedulingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchedulingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchedulingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchedulingMaxAggregateInputType
  }

  export type GetSchedulingAggregateType<T extends SchedulingAggregateArgs> = {
        [P in keyof T & keyof AggregateScheduling]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScheduling[P]>
      : GetScalarType<T[P], AggregateScheduling[P]>
  }




  export type SchedulingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchedulingWhereInput
    orderBy?: SchedulingOrderByWithAggregationInput | SchedulingOrderByWithAggregationInput[]
    by: SchedulingScalarFieldEnum[] | SchedulingScalarFieldEnum
    having?: SchedulingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchedulingCountAggregateInputType | true
    _avg?: SchedulingAvgAggregateInputType
    _sum?: SchedulingSumAggregateInputType
    _min?: SchedulingMinAggregateInputType
    _max?: SchedulingMaxAggregateInputType
  }

  export type SchedulingGroupByOutputType = {
    EventId: number
    UserId: number
    MovieId: number | null
    SeriesId: number | null
    EventDate: Date
    Note: string | null
    CreatedAt: Date
    UpdatedAt: Date
    _count: SchedulingCountAggregateOutputType | null
    _avg: SchedulingAvgAggregateOutputType | null
    _sum: SchedulingSumAggregateOutputType | null
    _min: SchedulingMinAggregateOutputType | null
    _max: SchedulingMaxAggregateOutputType | null
  }

  type GetSchedulingGroupByPayload<T extends SchedulingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchedulingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchedulingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchedulingGroupByOutputType[P]>
            : GetScalarType<T[P], SchedulingGroupByOutputType[P]>
        }
      >
    >


  export type SchedulingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    EventId?: boolean
    UserId?: boolean
    MovieId?: boolean
    SeriesId?: boolean
    EventDate?: boolean
    Note?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | Scheduling$MovieArgs<ExtArgs>
    Series?: boolean | Scheduling$SeriesArgs<ExtArgs>
  }, ExtArgs["result"]["scheduling"]>

  export type SchedulingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    EventId?: boolean
    UserId?: boolean
    MovieId?: boolean
    SeriesId?: boolean
    EventDate?: boolean
    Note?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | Scheduling$MovieArgs<ExtArgs>
    Series?: boolean | Scheduling$SeriesArgs<ExtArgs>
  }, ExtArgs["result"]["scheduling"]>

  export type SchedulingSelectScalar = {
    EventId?: boolean
    UserId?: boolean
    MovieId?: boolean
    SeriesId?: boolean
    EventDate?: boolean
    Note?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type SchedulingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | Scheduling$MovieArgs<ExtArgs>
    Series?: boolean | Scheduling$SeriesArgs<ExtArgs>
  }
  export type SchedulingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    User?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | Scheduling$MovieArgs<ExtArgs>
    Series?: boolean | Scheduling$SeriesArgs<ExtArgs>
  }

  export type $SchedulingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Scheduling"
    objects: {
      User: Prisma.$UsersPayload<ExtArgs>
      Movie: Prisma.$MoviesPayload<ExtArgs> | null
      Series: Prisma.$SeriesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      EventId: number
      UserId: number
      MovieId: number | null
      SeriesId: number | null
      EventDate: Date
      Note: string | null
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["scheduling"]>
    composites: {}
  }

  type SchedulingGetPayload<S extends boolean | null | undefined | SchedulingDefaultArgs> = $Result.GetResult<Prisma.$SchedulingPayload, S>

  type SchedulingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchedulingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SchedulingCountAggregateInputType | true
    }

  export interface SchedulingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Scheduling'], meta: { name: 'Scheduling' } }
    /**
     * Find zero or one Scheduling that matches the filter.
     * @param {SchedulingFindUniqueArgs} args - Arguments to find a Scheduling
     * @example
     * // Get one Scheduling
     * const scheduling = await prisma.scheduling.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchedulingFindUniqueArgs>(args: SelectSubset<T, SchedulingFindUniqueArgs<ExtArgs>>): Prisma__SchedulingClient<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Scheduling that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SchedulingFindUniqueOrThrowArgs} args - Arguments to find a Scheduling
     * @example
     * // Get one Scheduling
     * const scheduling = await prisma.scheduling.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchedulingFindUniqueOrThrowArgs>(args: SelectSubset<T, SchedulingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchedulingClient<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Scheduling that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchedulingFindFirstArgs} args - Arguments to find a Scheduling
     * @example
     * // Get one Scheduling
     * const scheduling = await prisma.scheduling.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchedulingFindFirstArgs>(args?: SelectSubset<T, SchedulingFindFirstArgs<ExtArgs>>): Prisma__SchedulingClient<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Scheduling that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchedulingFindFirstOrThrowArgs} args - Arguments to find a Scheduling
     * @example
     * // Get one Scheduling
     * const scheduling = await prisma.scheduling.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchedulingFindFirstOrThrowArgs>(args?: SelectSubset<T, SchedulingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchedulingClient<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schedulings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchedulingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedulings
     * const schedulings = await prisma.scheduling.findMany()
     * 
     * // Get first 10 Schedulings
     * const schedulings = await prisma.scheduling.findMany({ take: 10 })
     * 
     * // Only select the `EventId`
     * const schedulingWithEventIdOnly = await prisma.scheduling.findMany({ select: { EventId: true } })
     * 
     */
    findMany<T extends SchedulingFindManyArgs>(args?: SelectSubset<T, SchedulingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Scheduling.
     * @param {SchedulingCreateArgs} args - Arguments to create a Scheduling.
     * @example
     * // Create one Scheduling
     * const Scheduling = await prisma.scheduling.create({
     *   data: {
     *     // ... data to create a Scheduling
     *   }
     * })
     * 
     */
    create<T extends SchedulingCreateArgs>(args: SelectSubset<T, SchedulingCreateArgs<ExtArgs>>): Prisma__SchedulingClient<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schedulings.
     * @param {SchedulingCreateManyArgs} args - Arguments to create many Schedulings.
     * @example
     * // Create many Schedulings
     * const scheduling = await prisma.scheduling.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchedulingCreateManyArgs>(args?: SelectSubset<T, SchedulingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schedulings and returns the data saved in the database.
     * @param {SchedulingCreateManyAndReturnArgs} args - Arguments to create many Schedulings.
     * @example
     * // Create many Schedulings
     * const scheduling = await prisma.scheduling.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schedulings and only return the `EventId`
     * const schedulingWithEventIdOnly = await prisma.scheduling.createManyAndReturn({ 
     *   select: { EventId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchedulingCreateManyAndReturnArgs>(args?: SelectSubset<T, SchedulingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Scheduling.
     * @param {SchedulingDeleteArgs} args - Arguments to delete one Scheduling.
     * @example
     * // Delete one Scheduling
     * const Scheduling = await prisma.scheduling.delete({
     *   where: {
     *     // ... filter to delete one Scheduling
     *   }
     * })
     * 
     */
    delete<T extends SchedulingDeleteArgs>(args: SelectSubset<T, SchedulingDeleteArgs<ExtArgs>>): Prisma__SchedulingClient<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Scheduling.
     * @param {SchedulingUpdateArgs} args - Arguments to update one Scheduling.
     * @example
     * // Update one Scheduling
     * const scheduling = await prisma.scheduling.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchedulingUpdateArgs>(args: SelectSubset<T, SchedulingUpdateArgs<ExtArgs>>): Prisma__SchedulingClient<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schedulings.
     * @param {SchedulingDeleteManyArgs} args - Arguments to filter Schedulings to delete.
     * @example
     * // Delete a few Schedulings
     * const { count } = await prisma.scheduling.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchedulingDeleteManyArgs>(args?: SelectSubset<T, SchedulingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedulings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchedulingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedulings
     * const scheduling = await prisma.scheduling.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchedulingUpdateManyArgs>(args: SelectSubset<T, SchedulingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Scheduling.
     * @param {SchedulingUpsertArgs} args - Arguments to update or create a Scheduling.
     * @example
     * // Update or create a Scheduling
     * const scheduling = await prisma.scheduling.upsert({
     *   create: {
     *     // ... data to create a Scheduling
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Scheduling we want to update
     *   }
     * })
     */
    upsert<T extends SchedulingUpsertArgs>(args: SelectSubset<T, SchedulingUpsertArgs<ExtArgs>>): Prisma__SchedulingClient<$Result.GetResult<Prisma.$SchedulingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schedulings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchedulingCountArgs} args - Arguments to filter Schedulings to count.
     * @example
     * // Count the number of Schedulings
     * const count = await prisma.scheduling.count({
     *   where: {
     *     // ... the filter for the Schedulings we want to count
     *   }
     * })
    **/
    count<T extends SchedulingCountArgs>(
      args?: Subset<T, SchedulingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchedulingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Scheduling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchedulingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchedulingAggregateArgs>(args: Subset<T, SchedulingAggregateArgs>): Prisma.PrismaPromise<GetSchedulingAggregateType<T>>

    /**
     * Group by Scheduling.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchedulingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchedulingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchedulingGroupByArgs['orderBy'] }
        : { orderBy?: SchedulingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchedulingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchedulingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Scheduling model
   */
  readonly fields: SchedulingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Scheduling.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchedulingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    User<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Movie<T extends Scheduling$MovieArgs<ExtArgs> = {}>(args?: Subset<T, Scheduling$MovieArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Series<T extends Scheduling$SeriesArgs<ExtArgs> = {}>(args?: Subset<T, Scheduling$SeriesArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Scheduling model
   */ 
  interface SchedulingFieldRefs {
    readonly EventId: FieldRef<"Scheduling", 'Int'>
    readonly UserId: FieldRef<"Scheduling", 'Int'>
    readonly MovieId: FieldRef<"Scheduling", 'Int'>
    readonly SeriesId: FieldRef<"Scheduling", 'Int'>
    readonly EventDate: FieldRef<"Scheduling", 'DateTime'>
    readonly Note: FieldRef<"Scheduling", 'String'>
    readonly CreatedAt: FieldRef<"Scheduling", 'DateTime'>
    readonly UpdatedAt: FieldRef<"Scheduling", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Scheduling findUnique
   */
  export type SchedulingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * Filter, which Scheduling to fetch.
     */
    where: SchedulingWhereUniqueInput
  }

  /**
   * Scheduling findUniqueOrThrow
   */
  export type SchedulingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * Filter, which Scheduling to fetch.
     */
    where: SchedulingWhereUniqueInput
  }

  /**
   * Scheduling findFirst
   */
  export type SchedulingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * Filter, which Scheduling to fetch.
     */
    where?: SchedulingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedulings to fetch.
     */
    orderBy?: SchedulingOrderByWithRelationInput | SchedulingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedulings.
     */
    cursor?: SchedulingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedulings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedulings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedulings.
     */
    distinct?: SchedulingScalarFieldEnum | SchedulingScalarFieldEnum[]
  }

  /**
   * Scheduling findFirstOrThrow
   */
  export type SchedulingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * Filter, which Scheduling to fetch.
     */
    where?: SchedulingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedulings to fetch.
     */
    orderBy?: SchedulingOrderByWithRelationInput | SchedulingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedulings.
     */
    cursor?: SchedulingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedulings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedulings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedulings.
     */
    distinct?: SchedulingScalarFieldEnum | SchedulingScalarFieldEnum[]
  }

  /**
   * Scheduling findMany
   */
  export type SchedulingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * Filter, which Schedulings to fetch.
     */
    where?: SchedulingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedulings to fetch.
     */
    orderBy?: SchedulingOrderByWithRelationInput | SchedulingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedulings.
     */
    cursor?: SchedulingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedulings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedulings.
     */
    skip?: number
    distinct?: SchedulingScalarFieldEnum | SchedulingScalarFieldEnum[]
  }

  /**
   * Scheduling create
   */
  export type SchedulingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * The data needed to create a Scheduling.
     */
    data: XOR<SchedulingCreateInput, SchedulingUncheckedCreateInput>
  }

  /**
   * Scheduling createMany
   */
  export type SchedulingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedulings.
     */
    data: SchedulingCreateManyInput | SchedulingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Scheduling createManyAndReturn
   */
  export type SchedulingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Schedulings.
     */
    data: SchedulingCreateManyInput | SchedulingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Scheduling update
   */
  export type SchedulingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * The data needed to update a Scheduling.
     */
    data: XOR<SchedulingUpdateInput, SchedulingUncheckedUpdateInput>
    /**
     * Choose, which Scheduling to update.
     */
    where: SchedulingWhereUniqueInput
  }

  /**
   * Scheduling updateMany
   */
  export type SchedulingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedulings.
     */
    data: XOR<SchedulingUpdateManyMutationInput, SchedulingUncheckedUpdateManyInput>
    /**
     * Filter which Schedulings to update
     */
    where?: SchedulingWhereInput
  }

  /**
   * Scheduling upsert
   */
  export type SchedulingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * The filter to search for the Scheduling to update in case it exists.
     */
    where: SchedulingWhereUniqueInput
    /**
     * In case the Scheduling found by the `where` argument doesn't exist, create a new Scheduling with this data.
     */
    create: XOR<SchedulingCreateInput, SchedulingUncheckedCreateInput>
    /**
     * In case the Scheduling was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchedulingUpdateInput, SchedulingUncheckedUpdateInput>
  }

  /**
   * Scheduling delete
   */
  export type SchedulingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
    /**
     * Filter which Scheduling to delete.
     */
    where: SchedulingWhereUniqueInput
  }

  /**
   * Scheduling deleteMany
   */
  export type SchedulingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedulings to delete
     */
    where?: SchedulingWhereInput
  }

  /**
   * Scheduling.Movie
   */
  export type Scheduling$MovieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    where?: MoviesWhereInput
  }

  /**
   * Scheduling.Series
   */
  export type Scheduling$SeriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    where?: SeriesWhereInput
  }

  /**
   * Scheduling without action
   */
  export type SchedulingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Scheduling
     */
    select?: SchedulingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchedulingInclude<ExtArgs> | null
  }


  /**
   * Model Shares
   */

  export type AggregateShares = {
    _count: SharesCountAggregateOutputType | null
    _avg: SharesAvgAggregateOutputType | null
    _sum: SharesSumAggregateOutputType | null
    _min: SharesMinAggregateOutputType | null
    _max: SharesMaxAggregateOutputType | null
  }

  export type SharesAvgAggregateOutputType = {
    ShareId: number | null
    SenderUserId: number | null
    RecipientUserId: number | null
    MovieId: number | null
    SeriesId: number | null
  }

  export type SharesSumAggregateOutputType = {
    ShareId: number | null
    SenderUserId: number | null
    RecipientUserId: number | null
    MovieId: number | null
    SeriesId: number | null
  }

  export type SharesMinAggregateOutputType = {
    ShareId: number | null
    SenderUserId: number | null
    RecipientUserId: number | null
    MovieId: number | null
    SeriesId: number | null
    CreatedAt: Date | null
  }

  export type SharesMaxAggregateOutputType = {
    ShareId: number | null
    SenderUserId: number | null
    RecipientUserId: number | null
    MovieId: number | null
    SeriesId: number | null
    CreatedAt: Date | null
  }

  export type SharesCountAggregateOutputType = {
    ShareId: number
    SenderUserId: number
    RecipientUserId: number
    MovieId: number
    SeriesId: number
    CreatedAt: number
    _all: number
  }


  export type SharesAvgAggregateInputType = {
    ShareId?: true
    SenderUserId?: true
    RecipientUserId?: true
    MovieId?: true
    SeriesId?: true
  }

  export type SharesSumAggregateInputType = {
    ShareId?: true
    SenderUserId?: true
    RecipientUserId?: true
    MovieId?: true
    SeriesId?: true
  }

  export type SharesMinAggregateInputType = {
    ShareId?: true
    SenderUserId?: true
    RecipientUserId?: true
    MovieId?: true
    SeriesId?: true
    CreatedAt?: true
  }

  export type SharesMaxAggregateInputType = {
    ShareId?: true
    SenderUserId?: true
    RecipientUserId?: true
    MovieId?: true
    SeriesId?: true
    CreatedAt?: true
  }

  export type SharesCountAggregateInputType = {
    ShareId?: true
    SenderUserId?: true
    RecipientUserId?: true
    MovieId?: true
    SeriesId?: true
    CreatedAt?: true
    _all?: true
  }

  export type SharesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shares to aggregate.
     */
    where?: SharesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: SharesOrderByWithRelationInput | SharesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SharesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shares
    **/
    _count?: true | SharesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SharesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SharesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SharesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SharesMaxAggregateInputType
  }

  export type GetSharesAggregateType<T extends SharesAggregateArgs> = {
        [P in keyof T & keyof AggregateShares]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShares[P]>
      : GetScalarType<T[P], AggregateShares[P]>
  }




  export type SharesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SharesWhereInput
    orderBy?: SharesOrderByWithAggregationInput | SharesOrderByWithAggregationInput[]
    by: SharesScalarFieldEnum[] | SharesScalarFieldEnum
    having?: SharesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SharesCountAggregateInputType | true
    _avg?: SharesAvgAggregateInputType
    _sum?: SharesSumAggregateInputType
    _min?: SharesMinAggregateInputType
    _max?: SharesMaxAggregateInputType
  }

  export type SharesGroupByOutputType = {
    ShareId: number
    SenderUserId: number
    RecipientUserId: number
    MovieId: number | null
    SeriesId: number | null
    CreatedAt: Date
    _count: SharesCountAggregateOutputType | null
    _avg: SharesAvgAggregateOutputType | null
    _sum: SharesSumAggregateOutputType | null
    _min: SharesMinAggregateOutputType | null
    _max: SharesMaxAggregateOutputType | null
  }

  type GetSharesGroupByPayload<T extends SharesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SharesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SharesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SharesGroupByOutputType[P]>
            : GetScalarType<T[P], SharesGroupByOutputType[P]>
        }
      >
    >


  export type SharesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ShareId?: boolean
    SenderUserId?: boolean
    RecipientUserId?: boolean
    MovieId?: boolean
    SeriesId?: boolean
    CreatedAt?: boolean
    SenderUser?: boolean | UsersDefaultArgs<ExtArgs>
    RecipientUser?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | Shares$MovieArgs<ExtArgs>
    Series?: boolean | Shares$SeriesArgs<ExtArgs>
  }, ExtArgs["result"]["shares"]>

  export type SharesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ShareId?: boolean
    SenderUserId?: boolean
    RecipientUserId?: boolean
    MovieId?: boolean
    SeriesId?: boolean
    CreatedAt?: boolean
    SenderUser?: boolean | UsersDefaultArgs<ExtArgs>
    RecipientUser?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | Shares$MovieArgs<ExtArgs>
    Series?: boolean | Shares$SeriesArgs<ExtArgs>
  }, ExtArgs["result"]["shares"]>

  export type SharesSelectScalar = {
    ShareId?: boolean
    SenderUserId?: boolean
    RecipientUserId?: boolean
    MovieId?: boolean
    SeriesId?: boolean
    CreatedAt?: boolean
  }

  export type SharesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SenderUser?: boolean | UsersDefaultArgs<ExtArgs>
    RecipientUser?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | Shares$MovieArgs<ExtArgs>
    Series?: boolean | Shares$SeriesArgs<ExtArgs>
  }
  export type SharesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SenderUser?: boolean | UsersDefaultArgs<ExtArgs>
    RecipientUser?: boolean | UsersDefaultArgs<ExtArgs>
    Movie?: boolean | Shares$MovieArgs<ExtArgs>
    Series?: boolean | Shares$SeriesArgs<ExtArgs>
  }

  export type $SharesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shares"
    objects: {
      SenderUser: Prisma.$UsersPayload<ExtArgs>
      RecipientUser: Prisma.$UsersPayload<ExtArgs>
      Movie: Prisma.$MoviesPayload<ExtArgs> | null
      Series: Prisma.$SeriesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      ShareId: number
      SenderUserId: number
      RecipientUserId: number
      MovieId: number | null
      SeriesId: number | null
      CreatedAt: Date
    }, ExtArgs["result"]["shares"]>
    composites: {}
  }

  type SharesGetPayload<S extends boolean | null | undefined | SharesDefaultArgs> = $Result.GetResult<Prisma.$SharesPayload, S>

  type SharesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SharesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SharesCountAggregateInputType | true
    }

  export interface SharesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shares'], meta: { name: 'Shares' } }
    /**
     * Find zero or one Shares that matches the filter.
     * @param {SharesFindUniqueArgs} args - Arguments to find a Shares
     * @example
     * // Get one Shares
     * const shares = await prisma.shares.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SharesFindUniqueArgs>(args: SelectSubset<T, SharesFindUniqueArgs<ExtArgs>>): Prisma__SharesClient<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Shares that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SharesFindUniqueOrThrowArgs} args - Arguments to find a Shares
     * @example
     * // Get one Shares
     * const shares = await prisma.shares.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SharesFindUniqueOrThrowArgs>(args: SelectSubset<T, SharesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SharesClient<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Shares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharesFindFirstArgs} args - Arguments to find a Shares
     * @example
     * // Get one Shares
     * const shares = await prisma.shares.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SharesFindFirstArgs>(args?: SelectSubset<T, SharesFindFirstArgs<ExtArgs>>): Prisma__SharesClient<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Shares that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharesFindFirstOrThrowArgs} args - Arguments to find a Shares
     * @example
     * // Get one Shares
     * const shares = await prisma.shares.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SharesFindFirstOrThrowArgs>(args?: SelectSubset<T, SharesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SharesClient<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Shares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shares
     * const shares = await prisma.shares.findMany()
     * 
     * // Get first 10 Shares
     * const shares = await prisma.shares.findMany({ take: 10 })
     * 
     * // Only select the `ShareId`
     * const sharesWithShareIdOnly = await prisma.shares.findMany({ select: { ShareId: true } })
     * 
     */
    findMany<T extends SharesFindManyArgs>(args?: SelectSubset<T, SharesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Shares.
     * @param {SharesCreateArgs} args - Arguments to create a Shares.
     * @example
     * // Create one Shares
     * const Shares = await prisma.shares.create({
     *   data: {
     *     // ... data to create a Shares
     *   }
     * })
     * 
     */
    create<T extends SharesCreateArgs>(args: SelectSubset<T, SharesCreateArgs<ExtArgs>>): Prisma__SharesClient<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Shares.
     * @param {SharesCreateManyArgs} args - Arguments to create many Shares.
     * @example
     * // Create many Shares
     * const shares = await prisma.shares.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SharesCreateManyArgs>(args?: SelectSubset<T, SharesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shares and returns the data saved in the database.
     * @param {SharesCreateManyAndReturnArgs} args - Arguments to create many Shares.
     * @example
     * // Create many Shares
     * const shares = await prisma.shares.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shares and only return the `ShareId`
     * const sharesWithShareIdOnly = await prisma.shares.createManyAndReturn({ 
     *   select: { ShareId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SharesCreateManyAndReturnArgs>(args?: SelectSubset<T, SharesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Shares.
     * @param {SharesDeleteArgs} args - Arguments to delete one Shares.
     * @example
     * // Delete one Shares
     * const Shares = await prisma.shares.delete({
     *   where: {
     *     // ... filter to delete one Shares
     *   }
     * })
     * 
     */
    delete<T extends SharesDeleteArgs>(args: SelectSubset<T, SharesDeleteArgs<ExtArgs>>): Prisma__SharesClient<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Shares.
     * @param {SharesUpdateArgs} args - Arguments to update one Shares.
     * @example
     * // Update one Shares
     * const shares = await prisma.shares.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SharesUpdateArgs>(args: SelectSubset<T, SharesUpdateArgs<ExtArgs>>): Prisma__SharesClient<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Shares.
     * @param {SharesDeleteManyArgs} args - Arguments to filter Shares to delete.
     * @example
     * // Delete a few Shares
     * const { count } = await prisma.shares.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SharesDeleteManyArgs>(args?: SelectSubset<T, SharesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shares
     * const shares = await prisma.shares.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SharesUpdateManyArgs>(args: SelectSubset<T, SharesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shares.
     * @param {SharesUpsertArgs} args - Arguments to update or create a Shares.
     * @example
     * // Update or create a Shares
     * const shares = await prisma.shares.upsert({
     *   create: {
     *     // ... data to create a Shares
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shares we want to update
     *   }
     * })
     */
    upsert<T extends SharesUpsertArgs>(args: SelectSubset<T, SharesUpsertArgs<ExtArgs>>): Prisma__SharesClient<$Result.GetResult<Prisma.$SharesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharesCountArgs} args - Arguments to filter Shares to count.
     * @example
     * // Count the number of Shares
     * const count = await prisma.shares.count({
     *   where: {
     *     // ... the filter for the Shares we want to count
     *   }
     * })
    **/
    count<T extends SharesCountArgs>(
      args?: Subset<T, SharesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SharesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SharesAggregateArgs>(args: Subset<T, SharesAggregateArgs>): Prisma.PrismaPromise<GetSharesAggregateType<T>>

    /**
     * Group by Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SharesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SharesGroupByArgs['orderBy'] }
        : { orderBy?: SharesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SharesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSharesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shares model
   */
  readonly fields: SharesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shares.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SharesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    SenderUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    RecipientUser<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Movie<T extends Shares$MovieArgs<ExtArgs> = {}>(args?: Subset<T, Shares$MovieArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Series<T extends Shares$SeriesArgs<ExtArgs> = {}>(args?: Subset<T, Shares$SeriesArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shares model
   */ 
  interface SharesFieldRefs {
    readonly ShareId: FieldRef<"Shares", 'Int'>
    readonly SenderUserId: FieldRef<"Shares", 'Int'>
    readonly RecipientUserId: FieldRef<"Shares", 'Int'>
    readonly MovieId: FieldRef<"Shares", 'Int'>
    readonly SeriesId: FieldRef<"Shares", 'Int'>
    readonly CreatedAt: FieldRef<"Shares", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Shares findUnique
   */
  export type SharesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * Filter, which Shares to fetch.
     */
    where: SharesWhereUniqueInput
  }

  /**
   * Shares findUniqueOrThrow
   */
  export type SharesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * Filter, which Shares to fetch.
     */
    where: SharesWhereUniqueInput
  }

  /**
   * Shares findFirst
   */
  export type SharesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * Filter, which Shares to fetch.
     */
    where?: SharesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: SharesOrderByWithRelationInput | SharesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: SharesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: SharesScalarFieldEnum | SharesScalarFieldEnum[]
  }

  /**
   * Shares findFirstOrThrow
   */
  export type SharesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * Filter, which Shares to fetch.
     */
    where?: SharesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: SharesOrderByWithRelationInput | SharesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: SharesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: SharesScalarFieldEnum | SharesScalarFieldEnum[]
  }

  /**
   * Shares findMany
   */
  export type SharesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * Filter, which Shares to fetch.
     */
    where?: SharesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: SharesOrderByWithRelationInput | SharesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shares.
     */
    cursor?: SharesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    distinct?: SharesScalarFieldEnum | SharesScalarFieldEnum[]
  }

  /**
   * Shares create
   */
  export type SharesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * The data needed to create a Shares.
     */
    data: XOR<SharesCreateInput, SharesUncheckedCreateInput>
  }

  /**
   * Shares createMany
   */
  export type SharesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shares.
     */
    data: SharesCreateManyInput | SharesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shares createManyAndReturn
   */
  export type SharesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Shares.
     */
    data: SharesCreateManyInput | SharesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Shares update
   */
  export type SharesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * The data needed to update a Shares.
     */
    data: XOR<SharesUpdateInput, SharesUncheckedUpdateInput>
    /**
     * Choose, which Shares to update.
     */
    where: SharesWhereUniqueInput
  }

  /**
   * Shares updateMany
   */
  export type SharesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shares.
     */
    data: XOR<SharesUpdateManyMutationInput, SharesUncheckedUpdateManyInput>
    /**
     * Filter which Shares to update
     */
    where?: SharesWhereInput
  }

  /**
   * Shares upsert
   */
  export type SharesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * The filter to search for the Shares to update in case it exists.
     */
    where: SharesWhereUniqueInput
    /**
     * In case the Shares found by the `where` argument doesn't exist, create a new Shares with this data.
     */
    create: XOR<SharesCreateInput, SharesUncheckedCreateInput>
    /**
     * In case the Shares was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SharesUpdateInput, SharesUncheckedUpdateInput>
  }

  /**
   * Shares delete
   */
  export type SharesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
    /**
     * Filter which Shares to delete.
     */
    where: SharesWhereUniqueInput
  }

  /**
   * Shares deleteMany
   */
  export type SharesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shares to delete
     */
    where?: SharesWhereInput
  }

  /**
   * Shares.Movie
   */
  export type Shares$MovieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Movies
     */
    select?: MoviesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MoviesInclude<ExtArgs> | null
    where?: MoviesWhereInput
  }

  /**
   * Shares.Series
   */
  export type Shares$SeriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Series
     */
    select?: SeriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesInclude<ExtArgs> | null
    where?: SeriesWhereInput
  }

  /**
   * Shares without action
   */
  export type SharesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shares
     */
    select?: SharesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SharesInclude<ExtArgs> | null
  }


  /**
   * Model MovieCategories
   */

  export type AggregateMovieCategories = {
    _count: MovieCategoriesCountAggregateOutputType | null
    _avg: MovieCategoriesAvgAggregateOutputType | null
    _sum: MovieCategoriesSumAggregateOutputType | null
    _min: MovieCategoriesMinAggregateOutputType | null
    _max: MovieCategoriesMaxAggregateOutputType | null
  }

  export type MovieCategoriesAvgAggregateOutputType = {
    MovieCategoryId: number | null
  }

  export type MovieCategoriesSumAggregateOutputType = {
    MovieCategoryId: number | null
  }

  export type MovieCategoriesMinAggregateOutputType = {
    MovieCategoryId: number | null
    Name: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieCategoriesMaxAggregateOutputType = {
    MovieCategoryId: number | null
    Name: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieCategoriesCountAggregateOutputType = {
    MovieCategoryId: number
    Name: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type MovieCategoriesAvgAggregateInputType = {
    MovieCategoryId?: true
  }

  export type MovieCategoriesSumAggregateInputType = {
    MovieCategoryId?: true
  }

  export type MovieCategoriesMinAggregateInputType = {
    MovieCategoryId?: true
    Name?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieCategoriesMaxAggregateInputType = {
    MovieCategoryId?: true
    Name?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieCategoriesCountAggregateInputType = {
    MovieCategoryId?: true
    Name?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type MovieCategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieCategories to aggregate.
     */
    where?: MovieCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieCategories to fetch.
     */
    orderBy?: MovieCategoriesOrderByWithRelationInput | MovieCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovieCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MovieCategories
    **/
    _count?: true | MovieCategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieCategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieCategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieCategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieCategoriesMaxAggregateInputType
  }

  export type GetMovieCategoriesAggregateType<T extends MovieCategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateMovieCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovieCategories[P]>
      : GetScalarType<T[P], AggregateMovieCategories[P]>
  }




  export type MovieCategoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieCategoriesWhereInput
    orderBy?: MovieCategoriesOrderByWithAggregationInput | MovieCategoriesOrderByWithAggregationInput[]
    by: MovieCategoriesScalarFieldEnum[] | MovieCategoriesScalarFieldEnum
    having?: MovieCategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieCategoriesCountAggregateInputType | true
    _avg?: MovieCategoriesAvgAggregateInputType
    _sum?: MovieCategoriesSumAggregateInputType
    _min?: MovieCategoriesMinAggregateInputType
    _max?: MovieCategoriesMaxAggregateInputType
  }

  export type MovieCategoriesGroupByOutputType = {
    MovieCategoryId: number
    Name: string
    CreatedAt: Date
    UpdatedAt: Date
    _count: MovieCategoriesCountAggregateOutputType | null
    _avg: MovieCategoriesAvgAggregateOutputType | null
    _sum: MovieCategoriesSumAggregateOutputType | null
    _min: MovieCategoriesMinAggregateOutputType | null
    _max: MovieCategoriesMaxAggregateOutputType | null
  }

  type GetMovieCategoriesGroupByPayload<T extends MovieCategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieCategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieCategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieCategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], MovieCategoriesGroupByOutputType[P]>
        }
      >
    >


  export type MovieCategoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieCategoryId?: boolean
    Name?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    MovieCategoryRelations?: boolean | MovieCategories$MovieCategoryRelationsArgs<ExtArgs>
    _count?: boolean | MovieCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieCategories"]>

  export type MovieCategoriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieCategoryId?: boolean
    Name?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }, ExtArgs["result"]["movieCategories"]>

  export type MovieCategoriesSelectScalar = {
    MovieCategoryId?: boolean
    Name?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type MovieCategoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    MovieCategoryRelations?: boolean | MovieCategories$MovieCategoryRelationsArgs<ExtArgs>
    _count?: boolean | MovieCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MovieCategoriesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MovieCategoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MovieCategories"
    objects: {
      MovieCategoryRelations: Prisma.$MovieCategoryRelationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      MovieCategoryId: number
      Name: string
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["movieCategories"]>
    composites: {}
  }

  type MovieCategoriesGetPayload<S extends boolean | null | undefined | MovieCategoriesDefaultArgs> = $Result.GetResult<Prisma.$MovieCategoriesPayload, S>

  type MovieCategoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovieCategoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovieCategoriesCountAggregateInputType | true
    }

  export interface MovieCategoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MovieCategories'], meta: { name: 'MovieCategories' } }
    /**
     * Find zero or one MovieCategories that matches the filter.
     * @param {MovieCategoriesFindUniqueArgs} args - Arguments to find a MovieCategories
     * @example
     * // Get one MovieCategories
     * const movieCategories = await prisma.movieCategories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovieCategoriesFindUniqueArgs>(args: SelectSubset<T, MovieCategoriesFindUniqueArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MovieCategories that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovieCategoriesFindUniqueOrThrowArgs} args - Arguments to find a MovieCategories
     * @example
     * // Get one MovieCategories
     * const movieCategories = await prisma.movieCategories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovieCategoriesFindUniqueOrThrowArgs>(args: SelectSubset<T, MovieCategoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MovieCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoriesFindFirstArgs} args - Arguments to find a MovieCategories
     * @example
     * // Get one MovieCategories
     * const movieCategories = await prisma.movieCategories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovieCategoriesFindFirstArgs>(args?: SelectSubset<T, MovieCategoriesFindFirstArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MovieCategories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoriesFindFirstOrThrowArgs} args - Arguments to find a MovieCategories
     * @example
     * // Get one MovieCategories
     * const movieCategories = await prisma.movieCategories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovieCategoriesFindFirstOrThrowArgs>(args?: SelectSubset<T, MovieCategoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MovieCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MovieCategories
     * const movieCategories = await prisma.movieCategories.findMany()
     * 
     * // Get first 10 MovieCategories
     * const movieCategories = await prisma.movieCategories.findMany({ take: 10 })
     * 
     * // Only select the `MovieCategoryId`
     * const movieCategoriesWithMovieCategoryIdOnly = await prisma.movieCategories.findMany({ select: { MovieCategoryId: true } })
     * 
     */
    findMany<T extends MovieCategoriesFindManyArgs>(args?: SelectSubset<T, MovieCategoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MovieCategories.
     * @param {MovieCategoriesCreateArgs} args - Arguments to create a MovieCategories.
     * @example
     * // Create one MovieCategories
     * const MovieCategories = await prisma.movieCategories.create({
     *   data: {
     *     // ... data to create a MovieCategories
     *   }
     * })
     * 
     */
    create<T extends MovieCategoriesCreateArgs>(args: SelectSubset<T, MovieCategoriesCreateArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MovieCategories.
     * @param {MovieCategoriesCreateManyArgs} args - Arguments to create many MovieCategories.
     * @example
     * // Create many MovieCategories
     * const movieCategories = await prisma.movieCategories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovieCategoriesCreateManyArgs>(args?: SelectSubset<T, MovieCategoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MovieCategories and returns the data saved in the database.
     * @param {MovieCategoriesCreateManyAndReturnArgs} args - Arguments to create many MovieCategories.
     * @example
     * // Create many MovieCategories
     * const movieCategories = await prisma.movieCategories.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MovieCategories and only return the `MovieCategoryId`
     * const movieCategoriesWithMovieCategoryIdOnly = await prisma.movieCategories.createManyAndReturn({ 
     *   select: { MovieCategoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovieCategoriesCreateManyAndReturnArgs>(args?: SelectSubset<T, MovieCategoriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MovieCategories.
     * @param {MovieCategoriesDeleteArgs} args - Arguments to delete one MovieCategories.
     * @example
     * // Delete one MovieCategories
     * const MovieCategories = await prisma.movieCategories.delete({
     *   where: {
     *     // ... filter to delete one MovieCategories
     *   }
     * })
     * 
     */
    delete<T extends MovieCategoriesDeleteArgs>(args: SelectSubset<T, MovieCategoriesDeleteArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MovieCategories.
     * @param {MovieCategoriesUpdateArgs} args - Arguments to update one MovieCategories.
     * @example
     * // Update one MovieCategories
     * const movieCategories = await prisma.movieCategories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovieCategoriesUpdateArgs>(args: SelectSubset<T, MovieCategoriesUpdateArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MovieCategories.
     * @param {MovieCategoriesDeleteManyArgs} args - Arguments to filter MovieCategories to delete.
     * @example
     * // Delete a few MovieCategories
     * const { count } = await prisma.movieCategories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovieCategoriesDeleteManyArgs>(args?: SelectSubset<T, MovieCategoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovieCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MovieCategories
     * const movieCategories = await prisma.movieCategories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovieCategoriesUpdateManyArgs>(args: SelectSubset<T, MovieCategoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MovieCategories.
     * @param {MovieCategoriesUpsertArgs} args - Arguments to update or create a MovieCategories.
     * @example
     * // Update or create a MovieCategories
     * const movieCategories = await prisma.movieCategories.upsert({
     *   create: {
     *     // ... data to create a MovieCategories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MovieCategories we want to update
     *   }
     * })
     */
    upsert<T extends MovieCategoriesUpsertArgs>(args: SelectSubset<T, MovieCategoriesUpsertArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MovieCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoriesCountArgs} args - Arguments to filter MovieCategories to count.
     * @example
     * // Count the number of MovieCategories
     * const count = await prisma.movieCategories.count({
     *   where: {
     *     // ... the filter for the MovieCategories we want to count
     *   }
     * })
    **/
    count<T extends MovieCategoriesCountArgs>(
      args?: Subset<T, MovieCategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieCategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MovieCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieCategoriesAggregateArgs>(args: Subset<T, MovieCategoriesAggregateArgs>): Prisma.PrismaPromise<GetMovieCategoriesAggregateType<T>>

    /**
     * Group by MovieCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieCategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieCategoriesGroupByArgs['orderBy'] }
        : { orderBy?: MovieCategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieCategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MovieCategories model
   */
  readonly fields: MovieCategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MovieCategories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovieCategoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    MovieCategoryRelations<T extends MovieCategories$MovieCategoryRelationsArgs<ExtArgs> = {}>(args?: Subset<T, MovieCategories$MovieCategoryRelationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MovieCategories model
   */ 
  interface MovieCategoriesFieldRefs {
    readonly MovieCategoryId: FieldRef<"MovieCategories", 'Int'>
    readonly Name: FieldRef<"MovieCategories", 'String'>
    readonly CreatedAt: FieldRef<"MovieCategories", 'DateTime'>
    readonly UpdatedAt: FieldRef<"MovieCategories", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MovieCategories findUnique
   */
  export type MovieCategoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategories to fetch.
     */
    where: MovieCategoriesWhereUniqueInput
  }

  /**
   * MovieCategories findUniqueOrThrow
   */
  export type MovieCategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategories to fetch.
     */
    where: MovieCategoriesWhereUniqueInput
  }

  /**
   * MovieCategories findFirst
   */
  export type MovieCategoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategories to fetch.
     */
    where?: MovieCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieCategories to fetch.
     */
    orderBy?: MovieCategoriesOrderByWithRelationInput | MovieCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieCategories.
     */
    cursor?: MovieCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieCategories.
     */
    distinct?: MovieCategoriesScalarFieldEnum | MovieCategoriesScalarFieldEnum[]
  }

  /**
   * MovieCategories findFirstOrThrow
   */
  export type MovieCategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategories to fetch.
     */
    where?: MovieCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieCategories to fetch.
     */
    orderBy?: MovieCategoriesOrderByWithRelationInput | MovieCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieCategories.
     */
    cursor?: MovieCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieCategories.
     */
    distinct?: MovieCategoriesScalarFieldEnum | MovieCategoriesScalarFieldEnum[]
  }

  /**
   * MovieCategories findMany
   */
  export type MovieCategoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategories to fetch.
     */
    where?: MovieCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieCategories to fetch.
     */
    orderBy?: MovieCategoriesOrderByWithRelationInput | MovieCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MovieCategories.
     */
    cursor?: MovieCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieCategories.
     */
    skip?: number
    distinct?: MovieCategoriesScalarFieldEnum | MovieCategoriesScalarFieldEnum[]
  }

  /**
   * MovieCategories create
   */
  export type MovieCategoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a MovieCategories.
     */
    data: XOR<MovieCategoriesCreateInput, MovieCategoriesUncheckedCreateInput>
  }

  /**
   * MovieCategories createMany
   */
  export type MovieCategoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MovieCategories.
     */
    data: MovieCategoriesCreateManyInput | MovieCategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MovieCategories createManyAndReturn
   */
  export type MovieCategoriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MovieCategories.
     */
    data: MovieCategoriesCreateManyInput | MovieCategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MovieCategories update
   */
  export type MovieCategoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a MovieCategories.
     */
    data: XOR<MovieCategoriesUpdateInput, MovieCategoriesUncheckedUpdateInput>
    /**
     * Choose, which MovieCategories to update.
     */
    where: MovieCategoriesWhereUniqueInput
  }

  /**
   * MovieCategories updateMany
   */
  export type MovieCategoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MovieCategories.
     */
    data: XOR<MovieCategoriesUpdateManyMutationInput, MovieCategoriesUncheckedUpdateManyInput>
    /**
     * Filter which MovieCategories to update
     */
    where?: MovieCategoriesWhereInput
  }

  /**
   * MovieCategories upsert
   */
  export type MovieCategoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the MovieCategories to update in case it exists.
     */
    where: MovieCategoriesWhereUniqueInput
    /**
     * In case the MovieCategories found by the `where` argument doesn't exist, create a new MovieCategories with this data.
     */
    create: XOR<MovieCategoriesCreateInput, MovieCategoriesUncheckedCreateInput>
    /**
     * In case the MovieCategories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovieCategoriesUpdateInput, MovieCategoriesUncheckedUpdateInput>
  }

  /**
   * MovieCategories delete
   */
  export type MovieCategoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
    /**
     * Filter which MovieCategories to delete.
     */
    where: MovieCategoriesWhereUniqueInput
  }

  /**
   * MovieCategories deleteMany
   */
  export type MovieCategoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieCategories to delete
     */
    where?: MovieCategoriesWhereInput
  }

  /**
   * MovieCategories.MovieCategoryRelations
   */
  export type MovieCategories$MovieCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    where?: MovieCategoryRelationsWhereInput
    orderBy?: MovieCategoryRelationsOrderByWithRelationInput | MovieCategoryRelationsOrderByWithRelationInput[]
    cursor?: MovieCategoryRelationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MovieCategoryRelationsScalarFieldEnum | MovieCategoryRelationsScalarFieldEnum[]
  }

  /**
   * MovieCategories without action
   */
  export type MovieCategoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategories
     */
    select?: MovieCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoriesInclude<ExtArgs> | null
  }


  /**
   * Model SeriesCategories
   */

  export type AggregateSeriesCategories = {
    _count: SeriesCategoriesCountAggregateOutputType | null
    _avg: SeriesCategoriesAvgAggregateOutputType | null
    _sum: SeriesCategoriesSumAggregateOutputType | null
    _min: SeriesCategoriesMinAggregateOutputType | null
    _max: SeriesCategoriesMaxAggregateOutputType | null
  }

  export type SeriesCategoriesAvgAggregateOutputType = {
    SeriesCategoryId: number | null
  }

  export type SeriesCategoriesSumAggregateOutputType = {
    SeriesCategoryId: number | null
  }

  export type SeriesCategoriesMinAggregateOutputType = {
    SeriesCategoryId: number | null
    Name: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesCategoriesMaxAggregateOutputType = {
    SeriesCategoryId: number | null
    Name: string | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesCategoriesCountAggregateOutputType = {
    SeriesCategoryId: number
    Name: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type SeriesCategoriesAvgAggregateInputType = {
    SeriesCategoryId?: true
  }

  export type SeriesCategoriesSumAggregateInputType = {
    SeriesCategoryId?: true
  }

  export type SeriesCategoriesMinAggregateInputType = {
    SeriesCategoryId?: true
    Name?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesCategoriesMaxAggregateInputType = {
    SeriesCategoryId?: true
    Name?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesCategoriesCountAggregateInputType = {
    SeriesCategoryId?: true
    Name?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type SeriesCategoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesCategories to aggregate.
     */
    where?: SeriesCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesCategories to fetch.
     */
    orderBy?: SeriesCategoriesOrderByWithRelationInput | SeriesCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeriesCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeriesCategories
    **/
    _count?: true | SeriesCategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeriesCategoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeriesCategoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeriesCategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeriesCategoriesMaxAggregateInputType
  }

  export type GetSeriesCategoriesAggregateType<T extends SeriesCategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateSeriesCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeriesCategories[P]>
      : GetScalarType<T[P], AggregateSeriesCategories[P]>
  }




  export type SeriesCategoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesCategoriesWhereInput
    orderBy?: SeriesCategoriesOrderByWithAggregationInput | SeriesCategoriesOrderByWithAggregationInput[]
    by: SeriesCategoriesScalarFieldEnum[] | SeriesCategoriesScalarFieldEnum
    having?: SeriesCategoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeriesCategoriesCountAggregateInputType | true
    _avg?: SeriesCategoriesAvgAggregateInputType
    _sum?: SeriesCategoriesSumAggregateInputType
    _min?: SeriesCategoriesMinAggregateInputType
    _max?: SeriesCategoriesMaxAggregateInputType
  }

  export type SeriesCategoriesGroupByOutputType = {
    SeriesCategoryId: number
    Name: string
    CreatedAt: Date
    UpdatedAt: Date
    _count: SeriesCategoriesCountAggregateOutputType | null
    _avg: SeriesCategoriesAvgAggregateOutputType | null
    _sum: SeriesCategoriesSumAggregateOutputType | null
    _min: SeriesCategoriesMinAggregateOutputType | null
    _max: SeriesCategoriesMaxAggregateOutputType | null
  }

  type GetSeriesCategoriesGroupByPayload<T extends SeriesCategoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeriesCategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeriesCategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeriesCategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], SeriesCategoriesGroupByOutputType[P]>
        }
      >
    >


  export type SeriesCategoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesCategoryId?: boolean
    Name?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    SeriesCategoryRelations?: boolean | SeriesCategories$SeriesCategoryRelationsArgs<ExtArgs>
    _count?: boolean | SeriesCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesCategories"]>

  export type SeriesCategoriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesCategoryId?: boolean
    Name?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }, ExtArgs["result"]["seriesCategories"]>

  export type SeriesCategoriesSelectScalar = {
    SeriesCategoryId?: boolean
    Name?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type SeriesCategoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SeriesCategoryRelations?: boolean | SeriesCategories$SeriesCategoryRelationsArgs<ExtArgs>
    _count?: boolean | SeriesCategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SeriesCategoriesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SeriesCategoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeriesCategories"
    objects: {
      SeriesCategoryRelations: Prisma.$SeriesCategoryRelationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      SeriesCategoryId: number
      Name: string
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["seriesCategories"]>
    composites: {}
  }

  type SeriesCategoriesGetPayload<S extends boolean | null | undefined | SeriesCategoriesDefaultArgs> = $Result.GetResult<Prisma.$SeriesCategoriesPayload, S>

  type SeriesCategoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeriesCategoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeriesCategoriesCountAggregateInputType | true
    }

  export interface SeriesCategoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeriesCategories'], meta: { name: 'SeriesCategories' } }
    /**
     * Find zero or one SeriesCategories that matches the filter.
     * @param {SeriesCategoriesFindUniqueArgs} args - Arguments to find a SeriesCategories
     * @example
     * // Get one SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeriesCategoriesFindUniqueArgs>(args: SelectSubset<T, SeriesCategoriesFindUniqueArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeriesCategories that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeriesCategoriesFindUniqueOrThrowArgs} args - Arguments to find a SeriesCategories
     * @example
     * // Get one SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeriesCategoriesFindUniqueOrThrowArgs>(args: SelectSubset<T, SeriesCategoriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeriesCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoriesFindFirstArgs} args - Arguments to find a SeriesCategories
     * @example
     * // Get one SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeriesCategoriesFindFirstArgs>(args?: SelectSubset<T, SeriesCategoriesFindFirstArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeriesCategories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoriesFindFirstOrThrowArgs} args - Arguments to find a SeriesCategories
     * @example
     * // Get one SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeriesCategoriesFindFirstOrThrowArgs>(args?: SelectSubset<T, SeriesCategoriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeriesCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.findMany()
     * 
     * // Get first 10 SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.findMany({ take: 10 })
     * 
     * // Only select the `SeriesCategoryId`
     * const seriesCategoriesWithSeriesCategoryIdOnly = await prisma.seriesCategories.findMany({ select: { SeriesCategoryId: true } })
     * 
     */
    findMany<T extends SeriesCategoriesFindManyArgs>(args?: SelectSubset<T, SeriesCategoriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeriesCategories.
     * @param {SeriesCategoriesCreateArgs} args - Arguments to create a SeriesCategories.
     * @example
     * // Create one SeriesCategories
     * const SeriesCategories = await prisma.seriesCategories.create({
     *   data: {
     *     // ... data to create a SeriesCategories
     *   }
     * })
     * 
     */
    create<T extends SeriesCategoriesCreateArgs>(args: SelectSubset<T, SeriesCategoriesCreateArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeriesCategories.
     * @param {SeriesCategoriesCreateManyArgs} args - Arguments to create many SeriesCategories.
     * @example
     * // Create many SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeriesCategoriesCreateManyArgs>(args?: SelectSubset<T, SeriesCategoriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeriesCategories and returns the data saved in the database.
     * @param {SeriesCategoriesCreateManyAndReturnArgs} args - Arguments to create many SeriesCategories.
     * @example
     * // Create many SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeriesCategories and only return the `SeriesCategoryId`
     * const seriesCategoriesWithSeriesCategoryIdOnly = await prisma.seriesCategories.createManyAndReturn({ 
     *   select: { SeriesCategoryId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeriesCategoriesCreateManyAndReturnArgs>(args?: SelectSubset<T, SeriesCategoriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeriesCategories.
     * @param {SeriesCategoriesDeleteArgs} args - Arguments to delete one SeriesCategories.
     * @example
     * // Delete one SeriesCategories
     * const SeriesCategories = await prisma.seriesCategories.delete({
     *   where: {
     *     // ... filter to delete one SeriesCategories
     *   }
     * })
     * 
     */
    delete<T extends SeriesCategoriesDeleteArgs>(args: SelectSubset<T, SeriesCategoriesDeleteArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeriesCategories.
     * @param {SeriesCategoriesUpdateArgs} args - Arguments to update one SeriesCategories.
     * @example
     * // Update one SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeriesCategoriesUpdateArgs>(args: SelectSubset<T, SeriesCategoriesUpdateArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeriesCategories.
     * @param {SeriesCategoriesDeleteManyArgs} args - Arguments to filter SeriesCategories to delete.
     * @example
     * // Delete a few SeriesCategories
     * const { count } = await prisma.seriesCategories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeriesCategoriesDeleteManyArgs>(args?: SelectSubset<T, SeriesCategoriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeriesCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeriesCategoriesUpdateManyArgs>(args: SelectSubset<T, SeriesCategoriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeriesCategories.
     * @param {SeriesCategoriesUpsertArgs} args - Arguments to update or create a SeriesCategories.
     * @example
     * // Update or create a SeriesCategories
     * const seriesCategories = await prisma.seriesCategories.upsert({
     *   create: {
     *     // ... data to create a SeriesCategories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeriesCategories we want to update
     *   }
     * })
     */
    upsert<T extends SeriesCategoriesUpsertArgs>(args: SelectSubset<T, SeriesCategoriesUpsertArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeriesCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoriesCountArgs} args - Arguments to filter SeriesCategories to count.
     * @example
     * // Count the number of SeriesCategories
     * const count = await prisma.seriesCategories.count({
     *   where: {
     *     // ... the filter for the SeriesCategories we want to count
     *   }
     * })
    **/
    count<T extends SeriesCategoriesCountArgs>(
      args?: Subset<T, SeriesCategoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeriesCategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeriesCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeriesCategoriesAggregateArgs>(args: Subset<T, SeriesCategoriesAggregateArgs>): Prisma.PrismaPromise<GetSeriesCategoriesAggregateType<T>>

    /**
     * Group by SeriesCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeriesCategoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeriesCategoriesGroupByArgs['orderBy'] }
        : { orderBy?: SeriesCategoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeriesCategoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeriesCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeriesCategories model
   */
  readonly fields: SeriesCategoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeriesCategories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeriesCategoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    SeriesCategoryRelations<T extends SeriesCategories$SeriesCategoryRelationsArgs<ExtArgs> = {}>(args?: Subset<T, SeriesCategories$SeriesCategoryRelationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeriesCategories model
   */ 
  interface SeriesCategoriesFieldRefs {
    readonly SeriesCategoryId: FieldRef<"SeriesCategories", 'Int'>
    readonly Name: FieldRef<"SeriesCategories", 'String'>
    readonly CreatedAt: FieldRef<"SeriesCategories", 'DateTime'>
    readonly UpdatedAt: FieldRef<"SeriesCategories", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SeriesCategories findUnique
   */
  export type SeriesCategoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategories to fetch.
     */
    where: SeriesCategoriesWhereUniqueInput
  }

  /**
   * SeriesCategories findUniqueOrThrow
   */
  export type SeriesCategoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategories to fetch.
     */
    where: SeriesCategoriesWhereUniqueInput
  }

  /**
   * SeriesCategories findFirst
   */
  export type SeriesCategoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategories to fetch.
     */
    where?: SeriesCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesCategories to fetch.
     */
    orderBy?: SeriesCategoriesOrderByWithRelationInput | SeriesCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesCategories.
     */
    cursor?: SeriesCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesCategories.
     */
    distinct?: SeriesCategoriesScalarFieldEnum | SeriesCategoriesScalarFieldEnum[]
  }

  /**
   * SeriesCategories findFirstOrThrow
   */
  export type SeriesCategoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategories to fetch.
     */
    where?: SeriesCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesCategories to fetch.
     */
    orderBy?: SeriesCategoriesOrderByWithRelationInput | SeriesCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesCategories.
     */
    cursor?: SeriesCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesCategories.
     */
    distinct?: SeriesCategoriesScalarFieldEnum | SeriesCategoriesScalarFieldEnum[]
  }

  /**
   * SeriesCategories findMany
   */
  export type SeriesCategoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategories to fetch.
     */
    where?: SeriesCategoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesCategories to fetch.
     */
    orderBy?: SeriesCategoriesOrderByWithRelationInput | SeriesCategoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeriesCategories.
     */
    cursor?: SeriesCategoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesCategories.
     */
    skip?: number
    distinct?: SeriesCategoriesScalarFieldEnum | SeriesCategoriesScalarFieldEnum[]
  }

  /**
   * SeriesCategories create
   */
  export type SeriesCategoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a SeriesCategories.
     */
    data: XOR<SeriesCategoriesCreateInput, SeriesCategoriesUncheckedCreateInput>
  }

  /**
   * SeriesCategories createMany
   */
  export type SeriesCategoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeriesCategories.
     */
    data: SeriesCategoriesCreateManyInput | SeriesCategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeriesCategories createManyAndReturn
   */
  export type SeriesCategoriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeriesCategories.
     */
    data: SeriesCategoriesCreateManyInput | SeriesCategoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeriesCategories update
   */
  export type SeriesCategoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a SeriesCategories.
     */
    data: XOR<SeriesCategoriesUpdateInput, SeriesCategoriesUncheckedUpdateInput>
    /**
     * Choose, which SeriesCategories to update.
     */
    where: SeriesCategoriesWhereUniqueInput
  }

  /**
   * SeriesCategories updateMany
   */
  export type SeriesCategoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeriesCategories.
     */
    data: XOR<SeriesCategoriesUpdateManyMutationInput, SeriesCategoriesUncheckedUpdateManyInput>
    /**
     * Filter which SeriesCategories to update
     */
    where?: SeriesCategoriesWhereInput
  }

  /**
   * SeriesCategories upsert
   */
  export type SeriesCategoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the SeriesCategories to update in case it exists.
     */
    where: SeriesCategoriesWhereUniqueInput
    /**
     * In case the SeriesCategories found by the `where` argument doesn't exist, create a new SeriesCategories with this data.
     */
    create: XOR<SeriesCategoriesCreateInput, SeriesCategoriesUncheckedCreateInput>
    /**
     * In case the SeriesCategories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeriesCategoriesUpdateInput, SeriesCategoriesUncheckedUpdateInput>
  }

  /**
   * SeriesCategories delete
   */
  export type SeriesCategoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
    /**
     * Filter which SeriesCategories to delete.
     */
    where: SeriesCategoriesWhereUniqueInput
  }

  /**
   * SeriesCategories deleteMany
   */
  export type SeriesCategoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesCategories to delete
     */
    where?: SeriesCategoriesWhereInput
  }

  /**
   * SeriesCategories.SeriesCategoryRelations
   */
  export type SeriesCategories$SeriesCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    where?: SeriesCategoryRelationsWhereInput
    orderBy?: SeriesCategoryRelationsOrderByWithRelationInput | SeriesCategoryRelationsOrderByWithRelationInput[]
    cursor?: SeriesCategoryRelationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SeriesCategoryRelationsScalarFieldEnum | SeriesCategoryRelationsScalarFieldEnum[]
  }

  /**
   * SeriesCategories without action
   */
  export type SeriesCategoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategories
     */
    select?: SeriesCategoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoriesInclude<ExtArgs> | null
  }


  /**
   * Model MovieCategoryRelations
   */

  export type AggregateMovieCategoryRelations = {
    _count: MovieCategoryRelationsCountAggregateOutputType | null
    _avg: MovieCategoryRelationsAvgAggregateOutputType | null
    _sum: MovieCategoryRelationsSumAggregateOutputType | null
    _min: MovieCategoryRelationsMinAggregateOutputType | null
    _max: MovieCategoryRelationsMaxAggregateOutputType | null
  }

  export type MovieCategoryRelationsAvgAggregateOutputType = {
    MovieCategoryRelationId: number | null
    MovieId: number | null
    MovieCategoryId: number | null
  }

  export type MovieCategoryRelationsSumAggregateOutputType = {
    MovieCategoryRelationId: number | null
    MovieId: number | null
    MovieCategoryId: number | null
  }

  export type MovieCategoryRelationsMinAggregateOutputType = {
    MovieCategoryRelationId: number | null
    MovieId: number | null
    MovieCategoryId: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieCategoryRelationsMaxAggregateOutputType = {
    MovieCategoryRelationId: number | null
    MovieId: number | null
    MovieCategoryId: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type MovieCategoryRelationsCountAggregateOutputType = {
    MovieCategoryRelationId: number
    MovieId: number
    MovieCategoryId: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type MovieCategoryRelationsAvgAggregateInputType = {
    MovieCategoryRelationId?: true
    MovieId?: true
    MovieCategoryId?: true
  }

  export type MovieCategoryRelationsSumAggregateInputType = {
    MovieCategoryRelationId?: true
    MovieId?: true
    MovieCategoryId?: true
  }

  export type MovieCategoryRelationsMinAggregateInputType = {
    MovieCategoryRelationId?: true
    MovieId?: true
    MovieCategoryId?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieCategoryRelationsMaxAggregateInputType = {
    MovieCategoryRelationId?: true
    MovieId?: true
    MovieCategoryId?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type MovieCategoryRelationsCountAggregateInputType = {
    MovieCategoryRelationId?: true
    MovieId?: true
    MovieCategoryId?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type MovieCategoryRelationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieCategoryRelations to aggregate.
     */
    where?: MovieCategoryRelationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieCategoryRelations to fetch.
     */
    orderBy?: MovieCategoryRelationsOrderByWithRelationInput | MovieCategoryRelationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MovieCategoryRelationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieCategoryRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieCategoryRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MovieCategoryRelations
    **/
    _count?: true | MovieCategoryRelationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MovieCategoryRelationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MovieCategoryRelationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MovieCategoryRelationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MovieCategoryRelationsMaxAggregateInputType
  }

  export type GetMovieCategoryRelationsAggregateType<T extends MovieCategoryRelationsAggregateArgs> = {
        [P in keyof T & keyof AggregateMovieCategoryRelations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMovieCategoryRelations[P]>
      : GetScalarType<T[P], AggregateMovieCategoryRelations[P]>
  }




  export type MovieCategoryRelationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MovieCategoryRelationsWhereInput
    orderBy?: MovieCategoryRelationsOrderByWithAggregationInput | MovieCategoryRelationsOrderByWithAggregationInput[]
    by: MovieCategoryRelationsScalarFieldEnum[] | MovieCategoryRelationsScalarFieldEnum
    having?: MovieCategoryRelationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MovieCategoryRelationsCountAggregateInputType | true
    _avg?: MovieCategoryRelationsAvgAggregateInputType
    _sum?: MovieCategoryRelationsSumAggregateInputType
    _min?: MovieCategoryRelationsMinAggregateInputType
    _max?: MovieCategoryRelationsMaxAggregateInputType
  }

  export type MovieCategoryRelationsGroupByOutputType = {
    MovieCategoryRelationId: number
    MovieId: number
    MovieCategoryId: number
    CreatedAt: Date
    UpdatedAt: Date
    _count: MovieCategoryRelationsCountAggregateOutputType | null
    _avg: MovieCategoryRelationsAvgAggregateOutputType | null
    _sum: MovieCategoryRelationsSumAggregateOutputType | null
    _min: MovieCategoryRelationsMinAggregateOutputType | null
    _max: MovieCategoryRelationsMaxAggregateOutputType | null
  }

  type GetMovieCategoryRelationsGroupByPayload<T extends MovieCategoryRelationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MovieCategoryRelationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MovieCategoryRelationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MovieCategoryRelationsGroupByOutputType[P]>
            : GetScalarType<T[P], MovieCategoryRelationsGroupByOutputType[P]>
        }
      >
    >


  export type MovieCategoryRelationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieCategoryRelationId?: boolean
    MovieId?: boolean
    MovieCategoryId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
    MovieCategory?: boolean | MovieCategoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieCategoryRelations"]>

  export type MovieCategoryRelationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    MovieCategoryRelationId?: boolean
    MovieId?: boolean
    MovieCategoryId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
    MovieCategory?: boolean | MovieCategoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["movieCategoryRelations"]>

  export type MovieCategoryRelationsSelectScalar = {
    MovieCategoryRelationId?: boolean
    MovieId?: boolean
    MovieCategoryId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type MovieCategoryRelationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
    MovieCategory?: boolean | MovieCategoriesDefaultArgs<ExtArgs>
  }
  export type MovieCategoryRelationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Movie?: boolean | MoviesDefaultArgs<ExtArgs>
    MovieCategory?: boolean | MovieCategoriesDefaultArgs<ExtArgs>
  }

  export type $MovieCategoryRelationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MovieCategoryRelations"
    objects: {
      Movie: Prisma.$MoviesPayload<ExtArgs>
      MovieCategory: Prisma.$MovieCategoriesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      MovieCategoryRelationId: number
      MovieId: number
      MovieCategoryId: number
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["movieCategoryRelations"]>
    composites: {}
  }

  type MovieCategoryRelationsGetPayload<S extends boolean | null | undefined | MovieCategoryRelationsDefaultArgs> = $Result.GetResult<Prisma.$MovieCategoryRelationsPayload, S>

  type MovieCategoryRelationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MovieCategoryRelationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MovieCategoryRelationsCountAggregateInputType | true
    }

  export interface MovieCategoryRelationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MovieCategoryRelations'], meta: { name: 'MovieCategoryRelations' } }
    /**
     * Find zero or one MovieCategoryRelations that matches the filter.
     * @param {MovieCategoryRelationsFindUniqueArgs} args - Arguments to find a MovieCategoryRelations
     * @example
     * // Get one MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MovieCategoryRelationsFindUniqueArgs>(args: SelectSubset<T, MovieCategoryRelationsFindUniqueArgs<ExtArgs>>): Prisma__MovieCategoryRelationsClient<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MovieCategoryRelations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MovieCategoryRelationsFindUniqueOrThrowArgs} args - Arguments to find a MovieCategoryRelations
     * @example
     * // Get one MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MovieCategoryRelationsFindUniqueOrThrowArgs>(args: SelectSubset<T, MovieCategoryRelationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MovieCategoryRelationsClient<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MovieCategoryRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoryRelationsFindFirstArgs} args - Arguments to find a MovieCategoryRelations
     * @example
     * // Get one MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MovieCategoryRelationsFindFirstArgs>(args?: SelectSubset<T, MovieCategoryRelationsFindFirstArgs<ExtArgs>>): Prisma__MovieCategoryRelationsClient<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MovieCategoryRelations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoryRelationsFindFirstOrThrowArgs} args - Arguments to find a MovieCategoryRelations
     * @example
     * // Get one MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MovieCategoryRelationsFindFirstOrThrowArgs>(args?: SelectSubset<T, MovieCategoryRelationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MovieCategoryRelationsClient<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MovieCategoryRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoryRelationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.findMany()
     * 
     * // Get first 10 MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.findMany({ take: 10 })
     * 
     * // Only select the `MovieCategoryRelationId`
     * const movieCategoryRelationsWithMovieCategoryRelationIdOnly = await prisma.movieCategoryRelations.findMany({ select: { MovieCategoryRelationId: true } })
     * 
     */
    findMany<T extends MovieCategoryRelationsFindManyArgs>(args?: SelectSubset<T, MovieCategoryRelationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MovieCategoryRelations.
     * @param {MovieCategoryRelationsCreateArgs} args - Arguments to create a MovieCategoryRelations.
     * @example
     * // Create one MovieCategoryRelations
     * const MovieCategoryRelations = await prisma.movieCategoryRelations.create({
     *   data: {
     *     // ... data to create a MovieCategoryRelations
     *   }
     * })
     * 
     */
    create<T extends MovieCategoryRelationsCreateArgs>(args: SelectSubset<T, MovieCategoryRelationsCreateArgs<ExtArgs>>): Prisma__MovieCategoryRelationsClient<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MovieCategoryRelations.
     * @param {MovieCategoryRelationsCreateManyArgs} args - Arguments to create many MovieCategoryRelations.
     * @example
     * // Create many MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MovieCategoryRelationsCreateManyArgs>(args?: SelectSubset<T, MovieCategoryRelationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MovieCategoryRelations and returns the data saved in the database.
     * @param {MovieCategoryRelationsCreateManyAndReturnArgs} args - Arguments to create many MovieCategoryRelations.
     * @example
     * // Create many MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MovieCategoryRelations and only return the `MovieCategoryRelationId`
     * const movieCategoryRelationsWithMovieCategoryRelationIdOnly = await prisma.movieCategoryRelations.createManyAndReturn({ 
     *   select: { MovieCategoryRelationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MovieCategoryRelationsCreateManyAndReturnArgs>(args?: SelectSubset<T, MovieCategoryRelationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MovieCategoryRelations.
     * @param {MovieCategoryRelationsDeleteArgs} args - Arguments to delete one MovieCategoryRelations.
     * @example
     * // Delete one MovieCategoryRelations
     * const MovieCategoryRelations = await prisma.movieCategoryRelations.delete({
     *   where: {
     *     // ... filter to delete one MovieCategoryRelations
     *   }
     * })
     * 
     */
    delete<T extends MovieCategoryRelationsDeleteArgs>(args: SelectSubset<T, MovieCategoryRelationsDeleteArgs<ExtArgs>>): Prisma__MovieCategoryRelationsClient<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MovieCategoryRelations.
     * @param {MovieCategoryRelationsUpdateArgs} args - Arguments to update one MovieCategoryRelations.
     * @example
     * // Update one MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MovieCategoryRelationsUpdateArgs>(args: SelectSubset<T, MovieCategoryRelationsUpdateArgs<ExtArgs>>): Prisma__MovieCategoryRelationsClient<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MovieCategoryRelations.
     * @param {MovieCategoryRelationsDeleteManyArgs} args - Arguments to filter MovieCategoryRelations to delete.
     * @example
     * // Delete a few MovieCategoryRelations
     * const { count } = await prisma.movieCategoryRelations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MovieCategoryRelationsDeleteManyArgs>(args?: SelectSubset<T, MovieCategoryRelationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MovieCategoryRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoryRelationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MovieCategoryRelationsUpdateManyArgs>(args: SelectSubset<T, MovieCategoryRelationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MovieCategoryRelations.
     * @param {MovieCategoryRelationsUpsertArgs} args - Arguments to update or create a MovieCategoryRelations.
     * @example
     * // Update or create a MovieCategoryRelations
     * const movieCategoryRelations = await prisma.movieCategoryRelations.upsert({
     *   create: {
     *     // ... data to create a MovieCategoryRelations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MovieCategoryRelations we want to update
     *   }
     * })
     */
    upsert<T extends MovieCategoryRelationsUpsertArgs>(args: SelectSubset<T, MovieCategoryRelationsUpsertArgs<ExtArgs>>): Prisma__MovieCategoryRelationsClient<$Result.GetResult<Prisma.$MovieCategoryRelationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MovieCategoryRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoryRelationsCountArgs} args - Arguments to filter MovieCategoryRelations to count.
     * @example
     * // Count the number of MovieCategoryRelations
     * const count = await prisma.movieCategoryRelations.count({
     *   where: {
     *     // ... the filter for the MovieCategoryRelations we want to count
     *   }
     * })
    **/
    count<T extends MovieCategoryRelationsCountArgs>(
      args?: Subset<T, MovieCategoryRelationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MovieCategoryRelationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MovieCategoryRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoryRelationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MovieCategoryRelationsAggregateArgs>(args: Subset<T, MovieCategoryRelationsAggregateArgs>): Prisma.PrismaPromise<GetMovieCategoryRelationsAggregateType<T>>

    /**
     * Group by MovieCategoryRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MovieCategoryRelationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MovieCategoryRelationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MovieCategoryRelationsGroupByArgs['orderBy'] }
        : { orderBy?: MovieCategoryRelationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MovieCategoryRelationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMovieCategoryRelationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MovieCategoryRelations model
   */
  readonly fields: MovieCategoryRelationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MovieCategoryRelations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MovieCategoryRelationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Movie<T extends MoviesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MoviesDefaultArgs<ExtArgs>>): Prisma__MoviesClient<$Result.GetResult<Prisma.$MoviesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    MovieCategory<T extends MovieCategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MovieCategoriesDefaultArgs<ExtArgs>>): Prisma__MovieCategoriesClient<$Result.GetResult<Prisma.$MovieCategoriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MovieCategoryRelations model
   */ 
  interface MovieCategoryRelationsFieldRefs {
    readonly MovieCategoryRelationId: FieldRef<"MovieCategoryRelations", 'Int'>
    readonly MovieId: FieldRef<"MovieCategoryRelations", 'Int'>
    readonly MovieCategoryId: FieldRef<"MovieCategoryRelations", 'Int'>
    readonly CreatedAt: FieldRef<"MovieCategoryRelations", 'DateTime'>
    readonly UpdatedAt: FieldRef<"MovieCategoryRelations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MovieCategoryRelations findUnique
   */
  export type MovieCategoryRelationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategoryRelations to fetch.
     */
    where: MovieCategoryRelationsWhereUniqueInput
  }

  /**
   * MovieCategoryRelations findUniqueOrThrow
   */
  export type MovieCategoryRelationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategoryRelations to fetch.
     */
    where: MovieCategoryRelationsWhereUniqueInput
  }

  /**
   * MovieCategoryRelations findFirst
   */
  export type MovieCategoryRelationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategoryRelations to fetch.
     */
    where?: MovieCategoryRelationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieCategoryRelations to fetch.
     */
    orderBy?: MovieCategoryRelationsOrderByWithRelationInput | MovieCategoryRelationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieCategoryRelations.
     */
    cursor?: MovieCategoryRelationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieCategoryRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieCategoryRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieCategoryRelations.
     */
    distinct?: MovieCategoryRelationsScalarFieldEnum | MovieCategoryRelationsScalarFieldEnum[]
  }

  /**
   * MovieCategoryRelations findFirstOrThrow
   */
  export type MovieCategoryRelationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategoryRelations to fetch.
     */
    where?: MovieCategoryRelationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieCategoryRelations to fetch.
     */
    orderBy?: MovieCategoryRelationsOrderByWithRelationInput | MovieCategoryRelationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MovieCategoryRelations.
     */
    cursor?: MovieCategoryRelationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieCategoryRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieCategoryRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MovieCategoryRelations.
     */
    distinct?: MovieCategoryRelationsScalarFieldEnum | MovieCategoryRelationsScalarFieldEnum[]
  }

  /**
   * MovieCategoryRelations findMany
   */
  export type MovieCategoryRelationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which MovieCategoryRelations to fetch.
     */
    where?: MovieCategoryRelationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MovieCategoryRelations to fetch.
     */
    orderBy?: MovieCategoryRelationsOrderByWithRelationInput | MovieCategoryRelationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MovieCategoryRelations.
     */
    cursor?: MovieCategoryRelationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MovieCategoryRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MovieCategoryRelations.
     */
    skip?: number
    distinct?: MovieCategoryRelationsScalarFieldEnum | MovieCategoryRelationsScalarFieldEnum[]
  }

  /**
   * MovieCategoryRelations create
   */
  export type MovieCategoryRelationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * The data needed to create a MovieCategoryRelations.
     */
    data: XOR<MovieCategoryRelationsCreateInput, MovieCategoryRelationsUncheckedCreateInput>
  }

  /**
   * MovieCategoryRelations createMany
   */
  export type MovieCategoryRelationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MovieCategoryRelations.
     */
    data: MovieCategoryRelationsCreateManyInput | MovieCategoryRelationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MovieCategoryRelations createManyAndReturn
   */
  export type MovieCategoryRelationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MovieCategoryRelations.
     */
    data: MovieCategoryRelationsCreateManyInput | MovieCategoryRelationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MovieCategoryRelations update
   */
  export type MovieCategoryRelationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * The data needed to update a MovieCategoryRelations.
     */
    data: XOR<MovieCategoryRelationsUpdateInput, MovieCategoryRelationsUncheckedUpdateInput>
    /**
     * Choose, which MovieCategoryRelations to update.
     */
    where: MovieCategoryRelationsWhereUniqueInput
  }

  /**
   * MovieCategoryRelations updateMany
   */
  export type MovieCategoryRelationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MovieCategoryRelations.
     */
    data: XOR<MovieCategoryRelationsUpdateManyMutationInput, MovieCategoryRelationsUncheckedUpdateManyInput>
    /**
     * Filter which MovieCategoryRelations to update
     */
    where?: MovieCategoryRelationsWhereInput
  }

  /**
   * MovieCategoryRelations upsert
   */
  export type MovieCategoryRelationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * The filter to search for the MovieCategoryRelations to update in case it exists.
     */
    where: MovieCategoryRelationsWhereUniqueInput
    /**
     * In case the MovieCategoryRelations found by the `where` argument doesn't exist, create a new MovieCategoryRelations with this data.
     */
    create: XOR<MovieCategoryRelationsCreateInput, MovieCategoryRelationsUncheckedCreateInput>
    /**
     * In case the MovieCategoryRelations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MovieCategoryRelationsUpdateInput, MovieCategoryRelationsUncheckedUpdateInput>
  }

  /**
   * MovieCategoryRelations delete
   */
  export type MovieCategoryRelationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter which MovieCategoryRelations to delete.
     */
    where: MovieCategoryRelationsWhereUniqueInput
  }

  /**
   * MovieCategoryRelations deleteMany
   */
  export type MovieCategoryRelationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MovieCategoryRelations to delete
     */
    where?: MovieCategoryRelationsWhereInput
  }

  /**
   * MovieCategoryRelations without action
   */
  export type MovieCategoryRelationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MovieCategoryRelations
     */
    select?: MovieCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MovieCategoryRelationsInclude<ExtArgs> | null
  }


  /**
   * Model SeriesCategoryRelations
   */

  export type AggregateSeriesCategoryRelations = {
    _count: SeriesCategoryRelationsCountAggregateOutputType | null
    _avg: SeriesCategoryRelationsAvgAggregateOutputType | null
    _sum: SeriesCategoryRelationsSumAggregateOutputType | null
    _min: SeriesCategoryRelationsMinAggregateOutputType | null
    _max: SeriesCategoryRelationsMaxAggregateOutputType | null
  }

  export type SeriesCategoryRelationsAvgAggregateOutputType = {
    SeriesCategoryRelationId: number | null
    SeriesId: number | null
    SeriesCategoryId: number | null
  }

  export type SeriesCategoryRelationsSumAggregateOutputType = {
    SeriesCategoryRelationId: number | null
    SeriesId: number | null
    SeriesCategoryId: number | null
  }

  export type SeriesCategoryRelationsMinAggregateOutputType = {
    SeriesCategoryRelationId: number | null
    SeriesId: number | null
    SeriesCategoryId: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesCategoryRelationsMaxAggregateOutputType = {
    SeriesCategoryRelationId: number | null
    SeriesId: number | null
    SeriesCategoryId: number | null
    CreatedAt: Date | null
    UpdatedAt: Date | null
  }

  export type SeriesCategoryRelationsCountAggregateOutputType = {
    SeriesCategoryRelationId: number
    SeriesId: number
    SeriesCategoryId: number
    CreatedAt: number
    UpdatedAt: number
    _all: number
  }


  export type SeriesCategoryRelationsAvgAggregateInputType = {
    SeriesCategoryRelationId?: true
    SeriesId?: true
    SeriesCategoryId?: true
  }

  export type SeriesCategoryRelationsSumAggregateInputType = {
    SeriesCategoryRelationId?: true
    SeriesId?: true
    SeriesCategoryId?: true
  }

  export type SeriesCategoryRelationsMinAggregateInputType = {
    SeriesCategoryRelationId?: true
    SeriesId?: true
    SeriesCategoryId?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesCategoryRelationsMaxAggregateInputType = {
    SeriesCategoryRelationId?: true
    SeriesId?: true
    SeriesCategoryId?: true
    CreatedAt?: true
    UpdatedAt?: true
  }

  export type SeriesCategoryRelationsCountAggregateInputType = {
    SeriesCategoryRelationId?: true
    SeriesId?: true
    SeriesCategoryId?: true
    CreatedAt?: true
    UpdatedAt?: true
    _all?: true
  }

  export type SeriesCategoryRelationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesCategoryRelations to aggregate.
     */
    where?: SeriesCategoryRelationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesCategoryRelations to fetch.
     */
    orderBy?: SeriesCategoryRelationsOrderByWithRelationInput | SeriesCategoryRelationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SeriesCategoryRelationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesCategoryRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesCategoryRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SeriesCategoryRelations
    **/
    _count?: true | SeriesCategoryRelationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SeriesCategoryRelationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SeriesCategoryRelationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SeriesCategoryRelationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SeriesCategoryRelationsMaxAggregateInputType
  }

  export type GetSeriesCategoryRelationsAggregateType<T extends SeriesCategoryRelationsAggregateArgs> = {
        [P in keyof T & keyof AggregateSeriesCategoryRelations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSeriesCategoryRelations[P]>
      : GetScalarType<T[P], AggregateSeriesCategoryRelations[P]>
  }




  export type SeriesCategoryRelationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SeriesCategoryRelationsWhereInput
    orderBy?: SeriesCategoryRelationsOrderByWithAggregationInput | SeriesCategoryRelationsOrderByWithAggregationInput[]
    by: SeriesCategoryRelationsScalarFieldEnum[] | SeriesCategoryRelationsScalarFieldEnum
    having?: SeriesCategoryRelationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SeriesCategoryRelationsCountAggregateInputType | true
    _avg?: SeriesCategoryRelationsAvgAggregateInputType
    _sum?: SeriesCategoryRelationsSumAggregateInputType
    _min?: SeriesCategoryRelationsMinAggregateInputType
    _max?: SeriesCategoryRelationsMaxAggregateInputType
  }

  export type SeriesCategoryRelationsGroupByOutputType = {
    SeriesCategoryRelationId: number
    SeriesId: number
    SeriesCategoryId: number
    CreatedAt: Date
    UpdatedAt: Date
    _count: SeriesCategoryRelationsCountAggregateOutputType | null
    _avg: SeriesCategoryRelationsAvgAggregateOutputType | null
    _sum: SeriesCategoryRelationsSumAggregateOutputType | null
    _min: SeriesCategoryRelationsMinAggregateOutputType | null
    _max: SeriesCategoryRelationsMaxAggregateOutputType | null
  }

  type GetSeriesCategoryRelationsGroupByPayload<T extends SeriesCategoryRelationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SeriesCategoryRelationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SeriesCategoryRelationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SeriesCategoryRelationsGroupByOutputType[P]>
            : GetScalarType<T[P], SeriesCategoryRelationsGroupByOutputType[P]>
        }
      >
    >


  export type SeriesCategoryRelationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesCategoryRelationId?: boolean
    SeriesId?: boolean
    SeriesCategoryId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
    SeriesCategory?: boolean | SeriesCategoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesCategoryRelations"]>

  export type SeriesCategoryRelationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    SeriesCategoryRelationId?: boolean
    SeriesId?: boolean
    SeriesCategoryId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
    SeriesCategory?: boolean | SeriesCategoriesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["seriesCategoryRelations"]>

  export type SeriesCategoryRelationsSelectScalar = {
    SeriesCategoryRelationId?: boolean
    SeriesId?: boolean
    SeriesCategoryId?: boolean
    CreatedAt?: boolean
    UpdatedAt?: boolean
  }

  export type SeriesCategoryRelationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
    SeriesCategory?: boolean | SeriesCategoriesDefaultArgs<ExtArgs>
  }
  export type SeriesCategoryRelationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Series?: boolean | SeriesDefaultArgs<ExtArgs>
    SeriesCategory?: boolean | SeriesCategoriesDefaultArgs<ExtArgs>
  }

  export type $SeriesCategoryRelationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SeriesCategoryRelations"
    objects: {
      Series: Prisma.$SeriesPayload<ExtArgs>
      SeriesCategory: Prisma.$SeriesCategoriesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      SeriesCategoryRelationId: number
      SeriesId: number
      SeriesCategoryId: number
      CreatedAt: Date
      UpdatedAt: Date
    }, ExtArgs["result"]["seriesCategoryRelations"]>
    composites: {}
  }

  type SeriesCategoryRelationsGetPayload<S extends boolean | null | undefined | SeriesCategoryRelationsDefaultArgs> = $Result.GetResult<Prisma.$SeriesCategoryRelationsPayload, S>

  type SeriesCategoryRelationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SeriesCategoryRelationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SeriesCategoryRelationsCountAggregateInputType | true
    }

  export interface SeriesCategoryRelationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SeriesCategoryRelations'], meta: { name: 'SeriesCategoryRelations' } }
    /**
     * Find zero or one SeriesCategoryRelations that matches the filter.
     * @param {SeriesCategoryRelationsFindUniqueArgs} args - Arguments to find a SeriesCategoryRelations
     * @example
     * // Get one SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SeriesCategoryRelationsFindUniqueArgs>(args: SelectSubset<T, SeriesCategoryRelationsFindUniqueArgs<ExtArgs>>): Prisma__SeriesCategoryRelationsClient<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SeriesCategoryRelations that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SeriesCategoryRelationsFindUniqueOrThrowArgs} args - Arguments to find a SeriesCategoryRelations
     * @example
     * // Get one SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SeriesCategoryRelationsFindUniqueOrThrowArgs>(args: SelectSubset<T, SeriesCategoryRelationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SeriesCategoryRelationsClient<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SeriesCategoryRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoryRelationsFindFirstArgs} args - Arguments to find a SeriesCategoryRelations
     * @example
     * // Get one SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SeriesCategoryRelationsFindFirstArgs>(args?: SelectSubset<T, SeriesCategoryRelationsFindFirstArgs<ExtArgs>>): Prisma__SeriesCategoryRelationsClient<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SeriesCategoryRelations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoryRelationsFindFirstOrThrowArgs} args - Arguments to find a SeriesCategoryRelations
     * @example
     * // Get one SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SeriesCategoryRelationsFindFirstOrThrowArgs>(args?: SelectSubset<T, SeriesCategoryRelationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SeriesCategoryRelationsClient<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SeriesCategoryRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoryRelationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.findMany()
     * 
     * // Get first 10 SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.findMany({ take: 10 })
     * 
     * // Only select the `SeriesCategoryRelationId`
     * const seriesCategoryRelationsWithSeriesCategoryRelationIdOnly = await prisma.seriesCategoryRelations.findMany({ select: { SeriesCategoryRelationId: true } })
     * 
     */
    findMany<T extends SeriesCategoryRelationsFindManyArgs>(args?: SelectSubset<T, SeriesCategoryRelationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SeriesCategoryRelations.
     * @param {SeriesCategoryRelationsCreateArgs} args - Arguments to create a SeriesCategoryRelations.
     * @example
     * // Create one SeriesCategoryRelations
     * const SeriesCategoryRelations = await prisma.seriesCategoryRelations.create({
     *   data: {
     *     // ... data to create a SeriesCategoryRelations
     *   }
     * })
     * 
     */
    create<T extends SeriesCategoryRelationsCreateArgs>(args: SelectSubset<T, SeriesCategoryRelationsCreateArgs<ExtArgs>>): Prisma__SeriesCategoryRelationsClient<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SeriesCategoryRelations.
     * @param {SeriesCategoryRelationsCreateManyArgs} args - Arguments to create many SeriesCategoryRelations.
     * @example
     * // Create many SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SeriesCategoryRelationsCreateManyArgs>(args?: SelectSubset<T, SeriesCategoryRelationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SeriesCategoryRelations and returns the data saved in the database.
     * @param {SeriesCategoryRelationsCreateManyAndReturnArgs} args - Arguments to create many SeriesCategoryRelations.
     * @example
     * // Create many SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SeriesCategoryRelations and only return the `SeriesCategoryRelationId`
     * const seriesCategoryRelationsWithSeriesCategoryRelationIdOnly = await prisma.seriesCategoryRelations.createManyAndReturn({ 
     *   select: { SeriesCategoryRelationId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SeriesCategoryRelationsCreateManyAndReturnArgs>(args?: SelectSubset<T, SeriesCategoryRelationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SeriesCategoryRelations.
     * @param {SeriesCategoryRelationsDeleteArgs} args - Arguments to delete one SeriesCategoryRelations.
     * @example
     * // Delete one SeriesCategoryRelations
     * const SeriesCategoryRelations = await prisma.seriesCategoryRelations.delete({
     *   where: {
     *     // ... filter to delete one SeriesCategoryRelations
     *   }
     * })
     * 
     */
    delete<T extends SeriesCategoryRelationsDeleteArgs>(args: SelectSubset<T, SeriesCategoryRelationsDeleteArgs<ExtArgs>>): Prisma__SeriesCategoryRelationsClient<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SeriesCategoryRelations.
     * @param {SeriesCategoryRelationsUpdateArgs} args - Arguments to update one SeriesCategoryRelations.
     * @example
     * // Update one SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SeriesCategoryRelationsUpdateArgs>(args: SelectSubset<T, SeriesCategoryRelationsUpdateArgs<ExtArgs>>): Prisma__SeriesCategoryRelationsClient<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SeriesCategoryRelations.
     * @param {SeriesCategoryRelationsDeleteManyArgs} args - Arguments to filter SeriesCategoryRelations to delete.
     * @example
     * // Delete a few SeriesCategoryRelations
     * const { count } = await prisma.seriesCategoryRelations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SeriesCategoryRelationsDeleteManyArgs>(args?: SelectSubset<T, SeriesCategoryRelationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SeriesCategoryRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoryRelationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SeriesCategoryRelationsUpdateManyArgs>(args: SelectSubset<T, SeriesCategoryRelationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SeriesCategoryRelations.
     * @param {SeriesCategoryRelationsUpsertArgs} args - Arguments to update or create a SeriesCategoryRelations.
     * @example
     * // Update or create a SeriesCategoryRelations
     * const seriesCategoryRelations = await prisma.seriesCategoryRelations.upsert({
     *   create: {
     *     // ... data to create a SeriesCategoryRelations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SeriesCategoryRelations we want to update
     *   }
     * })
     */
    upsert<T extends SeriesCategoryRelationsUpsertArgs>(args: SelectSubset<T, SeriesCategoryRelationsUpsertArgs<ExtArgs>>): Prisma__SeriesCategoryRelationsClient<$Result.GetResult<Prisma.$SeriesCategoryRelationsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SeriesCategoryRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoryRelationsCountArgs} args - Arguments to filter SeriesCategoryRelations to count.
     * @example
     * // Count the number of SeriesCategoryRelations
     * const count = await prisma.seriesCategoryRelations.count({
     *   where: {
     *     // ... the filter for the SeriesCategoryRelations we want to count
     *   }
     * })
    **/
    count<T extends SeriesCategoryRelationsCountArgs>(
      args?: Subset<T, SeriesCategoryRelationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SeriesCategoryRelationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SeriesCategoryRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoryRelationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SeriesCategoryRelationsAggregateArgs>(args: Subset<T, SeriesCategoryRelationsAggregateArgs>): Prisma.PrismaPromise<GetSeriesCategoryRelationsAggregateType<T>>

    /**
     * Group by SeriesCategoryRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SeriesCategoryRelationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SeriesCategoryRelationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SeriesCategoryRelationsGroupByArgs['orderBy'] }
        : { orderBy?: SeriesCategoryRelationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SeriesCategoryRelationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSeriesCategoryRelationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SeriesCategoryRelations model
   */
  readonly fields: SeriesCategoryRelationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SeriesCategoryRelations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SeriesCategoryRelationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Series<T extends SeriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeriesDefaultArgs<ExtArgs>>): Prisma__SeriesClient<$Result.GetResult<Prisma.$SeriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    SeriesCategory<T extends SeriesCategoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SeriesCategoriesDefaultArgs<ExtArgs>>): Prisma__SeriesCategoriesClient<$Result.GetResult<Prisma.$SeriesCategoriesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SeriesCategoryRelations model
   */ 
  interface SeriesCategoryRelationsFieldRefs {
    readonly SeriesCategoryRelationId: FieldRef<"SeriesCategoryRelations", 'Int'>
    readonly SeriesId: FieldRef<"SeriesCategoryRelations", 'Int'>
    readonly SeriesCategoryId: FieldRef<"SeriesCategoryRelations", 'Int'>
    readonly CreatedAt: FieldRef<"SeriesCategoryRelations", 'DateTime'>
    readonly UpdatedAt: FieldRef<"SeriesCategoryRelations", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SeriesCategoryRelations findUnique
   */
  export type SeriesCategoryRelationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategoryRelations to fetch.
     */
    where: SeriesCategoryRelationsWhereUniqueInput
  }

  /**
   * SeriesCategoryRelations findUniqueOrThrow
   */
  export type SeriesCategoryRelationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategoryRelations to fetch.
     */
    where: SeriesCategoryRelationsWhereUniqueInput
  }

  /**
   * SeriesCategoryRelations findFirst
   */
  export type SeriesCategoryRelationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategoryRelations to fetch.
     */
    where?: SeriesCategoryRelationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesCategoryRelations to fetch.
     */
    orderBy?: SeriesCategoryRelationsOrderByWithRelationInput | SeriesCategoryRelationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesCategoryRelations.
     */
    cursor?: SeriesCategoryRelationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesCategoryRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesCategoryRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesCategoryRelations.
     */
    distinct?: SeriesCategoryRelationsScalarFieldEnum | SeriesCategoryRelationsScalarFieldEnum[]
  }

  /**
   * SeriesCategoryRelations findFirstOrThrow
   */
  export type SeriesCategoryRelationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategoryRelations to fetch.
     */
    where?: SeriesCategoryRelationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesCategoryRelations to fetch.
     */
    orderBy?: SeriesCategoryRelationsOrderByWithRelationInput | SeriesCategoryRelationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SeriesCategoryRelations.
     */
    cursor?: SeriesCategoryRelationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesCategoryRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesCategoryRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SeriesCategoryRelations.
     */
    distinct?: SeriesCategoryRelationsScalarFieldEnum | SeriesCategoryRelationsScalarFieldEnum[]
  }

  /**
   * SeriesCategoryRelations findMany
   */
  export type SeriesCategoryRelationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter, which SeriesCategoryRelations to fetch.
     */
    where?: SeriesCategoryRelationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SeriesCategoryRelations to fetch.
     */
    orderBy?: SeriesCategoryRelationsOrderByWithRelationInput | SeriesCategoryRelationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SeriesCategoryRelations.
     */
    cursor?: SeriesCategoryRelationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SeriesCategoryRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SeriesCategoryRelations.
     */
    skip?: number
    distinct?: SeriesCategoryRelationsScalarFieldEnum | SeriesCategoryRelationsScalarFieldEnum[]
  }

  /**
   * SeriesCategoryRelations create
   */
  export type SeriesCategoryRelationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * The data needed to create a SeriesCategoryRelations.
     */
    data: XOR<SeriesCategoryRelationsCreateInput, SeriesCategoryRelationsUncheckedCreateInput>
  }

  /**
   * SeriesCategoryRelations createMany
   */
  export type SeriesCategoryRelationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SeriesCategoryRelations.
     */
    data: SeriesCategoryRelationsCreateManyInput | SeriesCategoryRelationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SeriesCategoryRelations createManyAndReturn
   */
  export type SeriesCategoryRelationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SeriesCategoryRelations.
     */
    data: SeriesCategoryRelationsCreateManyInput | SeriesCategoryRelationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SeriesCategoryRelations update
   */
  export type SeriesCategoryRelationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * The data needed to update a SeriesCategoryRelations.
     */
    data: XOR<SeriesCategoryRelationsUpdateInput, SeriesCategoryRelationsUncheckedUpdateInput>
    /**
     * Choose, which SeriesCategoryRelations to update.
     */
    where: SeriesCategoryRelationsWhereUniqueInput
  }

  /**
   * SeriesCategoryRelations updateMany
   */
  export type SeriesCategoryRelationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SeriesCategoryRelations.
     */
    data: XOR<SeriesCategoryRelationsUpdateManyMutationInput, SeriesCategoryRelationsUncheckedUpdateManyInput>
    /**
     * Filter which SeriesCategoryRelations to update
     */
    where?: SeriesCategoryRelationsWhereInput
  }

  /**
   * SeriesCategoryRelations upsert
   */
  export type SeriesCategoryRelationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * The filter to search for the SeriesCategoryRelations to update in case it exists.
     */
    where: SeriesCategoryRelationsWhereUniqueInput
    /**
     * In case the SeriesCategoryRelations found by the `where` argument doesn't exist, create a new SeriesCategoryRelations with this data.
     */
    create: XOR<SeriesCategoryRelationsCreateInput, SeriesCategoryRelationsUncheckedCreateInput>
    /**
     * In case the SeriesCategoryRelations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SeriesCategoryRelationsUpdateInput, SeriesCategoryRelationsUncheckedUpdateInput>
  }

  /**
   * SeriesCategoryRelations delete
   */
  export type SeriesCategoryRelationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
    /**
     * Filter which SeriesCategoryRelations to delete.
     */
    where: SeriesCategoryRelationsWhereUniqueInput
  }

  /**
   * SeriesCategoryRelations deleteMany
   */
  export type SeriesCategoryRelationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SeriesCategoryRelations to delete
     */
    where?: SeriesCategoryRelationsWhereInput
  }

  /**
   * SeriesCategoryRelations without action
   */
  export type SeriesCategoryRelationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SeriesCategoryRelations
     */
    select?: SeriesCategoryRelationsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SeriesCategoryRelationsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    UserId: 'UserId',
    Name: 'Name',
    Email: 'Email',
    Password: 'Password',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const MoviesScalarFieldEnum: {
    MovieId: 'MovieId',
    Title: 'Title',
    Genre: 'Genre',
    ReleaseDate: 'ReleaseDate',
    Description: 'Description',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type MoviesScalarFieldEnum = (typeof MoviesScalarFieldEnum)[keyof typeof MoviesScalarFieldEnum]


  export const SeriesScalarFieldEnum: {
    SeriesId: 'SeriesId',
    Title: 'Title',
    Genre: 'Genre',
    ReleaseDate: 'ReleaseDate',
    Description: 'Description',
    SeasonsCount: 'SeasonsCount',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type SeriesScalarFieldEnum = (typeof SeriesScalarFieldEnum)[keyof typeof SeriesScalarFieldEnum]


  export const MovieRatingsScalarFieldEnum: {
    MovieRatingId: 'MovieRatingId',
    UserId: 'UserId',
    MovieId: 'MovieId',
    Rating: 'Rating',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type MovieRatingsScalarFieldEnum = (typeof MovieRatingsScalarFieldEnum)[keyof typeof MovieRatingsScalarFieldEnum]


  export const SeriesRatingsScalarFieldEnum: {
    SeriesRatingId: 'SeriesRatingId',
    UserId: 'UserId',
    SeriesId: 'SeriesId',
    Rating: 'Rating',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type SeriesRatingsScalarFieldEnum = (typeof SeriesRatingsScalarFieldEnum)[keyof typeof SeriesRatingsScalarFieldEnum]


  export const MovieCommentsScalarFieldEnum: {
    MovieCommentId: 'MovieCommentId',
    UserId: 'UserId',
    MovieId: 'MovieId',
    CommentText: 'CommentText',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type MovieCommentsScalarFieldEnum = (typeof MovieCommentsScalarFieldEnum)[keyof typeof MovieCommentsScalarFieldEnum]


  export const SeriesCommentsScalarFieldEnum: {
    SeriesCommentId: 'SeriesCommentId',
    UserId: 'UserId',
    SeriesId: 'SeriesId',
    CommentText: 'CommentText',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type SeriesCommentsScalarFieldEnum = (typeof SeriesCommentsScalarFieldEnum)[keyof typeof SeriesCommentsScalarFieldEnum]


  export const MovieNotesScalarFieldEnum: {
    NoteId: 'NoteId',
    UserId: 'UserId',
    MovieId: 'MovieId',
    NoteText: 'NoteText',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type MovieNotesScalarFieldEnum = (typeof MovieNotesScalarFieldEnum)[keyof typeof MovieNotesScalarFieldEnum]


  export const SeriesNotesScalarFieldEnum: {
    NoteId: 'NoteId',
    UserId: 'UserId',
    SeriesId: 'SeriesId',
    NoteText: 'NoteText',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type SeriesNotesScalarFieldEnum = (typeof SeriesNotesScalarFieldEnum)[keyof typeof SeriesNotesScalarFieldEnum]


  export const SchedulingScalarFieldEnum: {
    EventId: 'EventId',
    UserId: 'UserId',
    MovieId: 'MovieId',
    SeriesId: 'SeriesId',
    EventDate: 'EventDate',
    Note: 'Note',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type SchedulingScalarFieldEnum = (typeof SchedulingScalarFieldEnum)[keyof typeof SchedulingScalarFieldEnum]


  export const SharesScalarFieldEnum: {
    ShareId: 'ShareId',
    SenderUserId: 'SenderUserId',
    RecipientUserId: 'RecipientUserId',
    MovieId: 'MovieId',
    SeriesId: 'SeriesId',
    CreatedAt: 'CreatedAt'
  };

  export type SharesScalarFieldEnum = (typeof SharesScalarFieldEnum)[keyof typeof SharesScalarFieldEnum]


  export const MovieCategoriesScalarFieldEnum: {
    MovieCategoryId: 'MovieCategoryId',
    Name: 'Name',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type MovieCategoriesScalarFieldEnum = (typeof MovieCategoriesScalarFieldEnum)[keyof typeof MovieCategoriesScalarFieldEnum]


  export const SeriesCategoriesScalarFieldEnum: {
    SeriesCategoryId: 'SeriesCategoryId',
    Name: 'Name',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type SeriesCategoriesScalarFieldEnum = (typeof SeriesCategoriesScalarFieldEnum)[keyof typeof SeriesCategoriesScalarFieldEnum]


  export const MovieCategoryRelationsScalarFieldEnum: {
    MovieCategoryRelationId: 'MovieCategoryRelationId',
    MovieId: 'MovieId',
    MovieCategoryId: 'MovieCategoryId',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type MovieCategoryRelationsScalarFieldEnum = (typeof MovieCategoryRelationsScalarFieldEnum)[keyof typeof MovieCategoryRelationsScalarFieldEnum]


  export const SeriesCategoryRelationsScalarFieldEnum: {
    SeriesCategoryRelationId: 'SeriesCategoryRelationId',
    SeriesId: 'SeriesId',
    SeriesCategoryId: 'SeriesCategoryId',
    CreatedAt: 'CreatedAt',
    UpdatedAt: 'UpdatedAt'
  };

  export type SeriesCategoryRelationsScalarFieldEnum = (typeof SeriesCategoryRelationsScalarFieldEnum)[keyof typeof SeriesCategoryRelationsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    UserId?: IntFilter<"Users"> | number
    Name?: StringFilter<"Users"> | string
    Email?: StringFilter<"Users"> | string
    Password?: StringFilter<"Users"> | string
    CreatedAt?: DateTimeFilter<"Users"> | Date | string
    UpdatedAt?: DateTimeFilter<"Users"> | Date | string
    MovieComments?: MovieCommentsListRelationFilter
    SeriesComments?: SeriesCommentsListRelationFilter
    MovieRatings?: MovieRatingsListRelationFilter
    SeriesRatings?: SeriesRatingsListRelationFilter
    MovieNotes?: MovieNotesListRelationFilter
    SeriesNotes?: SeriesNotesListRelationFilter
    Scheduling?: SchedulingListRelationFilter
    SharesSent?: SharesListRelationFilter
    SharesReceived?: SharesListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    UserId?: SortOrder
    Name?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    MovieComments?: MovieCommentsOrderByRelationAggregateInput
    SeriesComments?: SeriesCommentsOrderByRelationAggregateInput
    MovieRatings?: MovieRatingsOrderByRelationAggregateInput
    SeriesRatings?: SeriesRatingsOrderByRelationAggregateInput
    MovieNotes?: MovieNotesOrderByRelationAggregateInput
    SeriesNotes?: SeriesNotesOrderByRelationAggregateInput
    Scheduling?: SchedulingOrderByRelationAggregateInput
    SharesSent?: SharesOrderByRelationAggregateInput
    SharesReceived?: SharesOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    UserId?: number
    Email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    Name?: StringFilter<"Users"> | string
    Password?: StringFilter<"Users"> | string
    CreatedAt?: DateTimeFilter<"Users"> | Date | string
    UpdatedAt?: DateTimeFilter<"Users"> | Date | string
    MovieComments?: MovieCommentsListRelationFilter
    SeriesComments?: SeriesCommentsListRelationFilter
    MovieRatings?: MovieRatingsListRelationFilter
    SeriesRatings?: SeriesRatingsListRelationFilter
    MovieNotes?: MovieNotesListRelationFilter
    SeriesNotes?: SeriesNotesListRelationFilter
    Scheduling?: SchedulingListRelationFilter
    SharesSent?: SharesListRelationFilter
    SharesReceived?: SharesListRelationFilter
  }, "UserId" | "Email">

  export type UsersOrderByWithAggregationInput = {
    UserId?: SortOrder
    Name?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    UserId?: IntWithAggregatesFilter<"Users"> | number
    Name?: StringWithAggregatesFilter<"Users"> | string
    Email?: StringWithAggregatesFilter<"Users"> | string
    Password?: StringWithAggregatesFilter<"Users"> | string
    CreatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"Users"> | Date | string
  }

  export type MoviesWhereInput = {
    AND?: MoviesWhereInput | MoviesWhereInput[]
    OR?: MoviesWhereInput[]
    NOT?: MoviesWhereInput | MoviesWhereInput[]
    MovieId?: IntFilter<"Movies"> | number
    Title?: StringFilter<"Movies"> | string
    Genre?: StringFilter<"Movies"> | string
    ReleaseDate?: DateTimeFilter<"Movies"> | Date | string
    Description?: StringNullableFilter<"Movies"> | string | null
    CreatedAt?: DateTimeFilter<"Movies"> | Date | string
    UpdatedAt?: DateTimeFilter<"Movies"> | Date | string
    MovieRatings?: MovieRatingsListRelationFilter
    MovieComments?: MovieCommentsListRelationFilter
    MovieNotes?: MovieNotesListRelationFilter
    Scheduling?: SchedulingListRelationFilter
    MovieCategoryRelations?: MovieCategoryRelationsListRelationFilter
    Shares?: SharesListRelationFilter
  }

  export type MoviesOrderByWithRelationInput = {
    MovieId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrderInput | SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    MovieRatings?: MovieRatingsOrderByRelationAggregateInput
    MovieComments?: MovieCommentsOrderByRelationAggregateInput
    MovieNotes?: MovieNotesOrderByRelationAggregateInput
    Scheduling?: SchedulingOrderByRelationAggregateInput
    MovieCategoryRelations?: MovieCategoryRelationsOrderByRelationAggregateInput
    Shares?: SharesOrderByRelationAggregateInput
  }

  export type MoviesWhereUniqueInput = Prisma.AtLeast<{
    MovieId?: number
    AND?: MoviesWhereInput | MoviesWhereInput[]
    OR?: MoviesWhereInput[]
    NOT?: MoviesWhereInput | MoviesWhereInput[]
    Title?: StringFilter<"Movies"> | string
    Genre?: StringFilter<"Movies"> | string
    ReleaseDate?: DateTimeFilter<"Movies"> | Date | string
    Description?: StringNullableFilter<"Movies"> | string | null
    CreatedAt?: DateTimeFilter<"Movies"> | Date | string
    UpdatedAt?: DateTimeFilter<"Movies"> | Date | string
    MovieRatings?: MovieRatingsListRelationFilter
    MovieComments?: MovieCommentsListRelationFilter
    MovieNotes?: MovieNotesListRelationFilter
    Scheduling?: SchedulingListRelationFilter
    MovieCategoryRelations?: MovieCategoryRelationsListRelationFilter
    Shares?: SharesListRelationFilter
  }, "MovieId">

  export type MoviesOrderByWithAggregationInput = {
    MovieId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrderInput | SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: MoviesCountOrderByAggregateInput
    _avg?: MoviesAvgOrderByAggregateInput
    _max?: MoviesMaxOrderByAggregateInput
    _min?: MoviesMinOrderByAggregateInput
    _sum?: MoviesSumOrderByAggregateInput
  }

  export type MoviesScalarWhereWithAggregatesInput = {
    AND?: MoviesScalarWhereWithAggregatesInput | MoviesScalarWhereWithAggregatesInput[]
    OR?: MoviesScalarWhereWithAggregatesInput[]
    NOT?: MoviesScalarWhereWithAggregatesInput | MoviesScalarWhereWithAggregatesInput[]
    MovieId?: IntWithAggregatesFilter<"Movies"> | number
    Title?: StringWithAggregatesFilter<"Movies"> | string
    Genre?: StringWithAggregatesFilter<"Movies"> | string
    ReleaseDate?: DateTimeWithAggregatesFilter<"Movies"> | Date | string
    Description?: StringNullableWithAggregatesFilter<"Movies"> | string | null
    CreatedAt?: DateTimeWithAggregatesFilter<"Movies"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"Movies"> | Date | string
  }

  export type SeriesWhereInput = {
    AND?: SeriesWhereInput | SeriesWhereInput[]
    OR?: SeriesWhereInput[]
    NOT?: SeriesWhereInput | SeriesWhereInput[]
    SeriesId?: IntFilter<"Series"> | number
    Title?: StringFilter<"Series"> | string
    Genre?: StringFilter<"Series"> | string
    ReleaseDate?: DateTimeFilter<"Series"> | Date | string
    Description?: StringNullableFilter<"Series"> | string | null
    SeasonsCount?: IntFilter<"Series"> | number
    CreatedAt?: DateTimeFilter<"Series"> | Date | string
    UpdatedAt?: DateTimeFilter<"Series"> | Date | string
    SeriesRatings?: SeriesRatingsListRelationFilter
    SeriesComments?: SeriesCommentsListRelationFilter
    SeriesNotes?: SeriesNotesListRelationFilter
    Scheduling?: SchedulingListRelationFilter
    SeriesCategoryRelations?: SeriesCategoryRelationsListRelationFilter
    Shares?: SharesListRelationFilter
  }

  export type SeriesOrderByWithRelationInput = {
    SeriesId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrderInput | SortOrder
    SeasonsCount?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    SeriesRatings?: SeriesRatingsOrderByRelationAggregateInput
    SeriesComments?: SeriesCommentsOrderByRelationAggregateInput
    SeriesNotes?: SeriesNotesOrderByRelationAggregateInput
    Scheduling?: SchedulingOrderByRelationAggregateInput
    SeriesCategoryRelations?: SeriesCategoryRelationsOrderByRelationAggregateInput
    Shares?: SharesOrderByRelationAggregateInput
  }

  export type SeriesWhereUniqueInput = Prisma.AtLeast<{
    SeriesId?: number
    AND?: SeriesWhereInput | SeriesWhereInput[]
    OR?: SeriesWhereInput[]
    NOT?: SeriesWhereInput | SeriesWhereInput[]
    Title?: StringFilter<"Series"> | string
    Genre?: StringFilter<"Series"> | string
    ReleaseDate?: DateTimeFilter<"Series"> | Date | string
    Description?: StringNullableFilter<"Series"> | string | null
    SeasonsCount?: IntFilter<"Series"> | number
    CreatedAt?: DateTimeFilter<"Series"> | Date | string
    UpdatedAt?: DateTimeFilter<"Series"> | Date | string
    SeriesRatings?: SeriesRatingsListRelationFilter
    SeriesComments?: SeriesCommentsListRelationFilter
    SeriesNotes?: SeriesNotesListRelationFilter
    Scheduling?: SchedulingListRelationFilter
    SeriesCategoryRelations?: SeriesCategoryRelationsListRelationFilter
    Shares?: SharesListRelationFilter
  }, "SeriesId">

  export type SeriesOrderByWithAggregationInput = {
    SeriesId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrderInput | SortOrder
    SeasonsCount?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: SeriesCountOrderByAggregateInput
    _avg?: SeriesAvgOrderByAggregateInput
    _max?: SeriesMaxOrderByAggregateInput
    _min?: SeriesMinOrderByAggregateInput
    _sum?: SeriesSumOrderByAggregateInput
  }

  export type SeriesScalarWhereWithAggregatesInput = {
    AND?: SeriesScalarWhereWithAggregatesInput | SeriesScalarWhereWithAggregatesInput[]
    OR?: SeriesScalarWhereWithAggregatesInput[]
    NOT?: SeriesScalarWhereWithAggregatesInput | SeriesScalarWhereWithAggregatesInput[]
    SeriesId?: IntWithAggregatesFilter<"Series"> | number
    Title?: StringWithAggregatesFilter<"Series"> | string
    Genre?: StringWithAggregatesFilter<"Series"> | string
    ReleaseDate?: DateTimeWithAggregatesFilter<"Series"> | Date | string
    Description?: StringNullableWithAggregatesFilter<"Series"> | string | null
    SeasonsCount?: IntWithAggregatesFilter<"Series"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"Series"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"Series"> | Date | string
  }

  export type MovieRatingsWhereInput = {
    AND?: MovieRatingsWhereInput | MovieRatingsWhereInput[]
    OR?: MovieRatingsWhereInput[]
    NOT?: MovieRatingsWhereInput | MovieRatingsWhereInput[]
    MovieRatingId?: IntFilter<"MovieRatings"> | number
    UserId?: IntFilter<"MovieRatings"> | number
    MovieId?: IntFilter<"MovieRatings"> | number
    Rating?: IntFilter<"MovieRatings"> | number
    CreatedAt?: DateTimeFilter<"MovieRatings"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieRatings"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesRelationFilter, MoviesWhereInput>
  }

  export type MovieRatingsOrderByWithRelationInput = {
    MovieRatingId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    User?: UsersOrderByWithRelationInput
    Movie?: MoviesOrderByWithRelationInput
  }

  export type MovieRatingsWhereUniqueInput = Prisma.AtLeast<{
    MovieRatingId?: number
    AND?: MovieRatingsWhereInput | MovieRatingsWhereInput[]
    OR?: MovieRatingsWhereInput[]
    NOT?: MovieRatingsWhereInput | MovieRatingsWhereInput[]
    UserId?: IntFilter<"MovieRatings"> | number
    MovieId?: IntFilter<"MovieRatings"> | number
    Rating?: IntFilter<"MovieRatings"> | number
    CreatedAt?: DateTimeFilter<"MovieRatings"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieRatings"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesRelationFilter, MoviesWhereInput>
  }, "MovieRatingId">

  export type MovieRatingsOrderByWithAggregationInput = {
    MovieRatingId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: MovieRatingsCountOrderByAggregateInput
    _avg?: MovieRatingsAvgOrderByAggregateInput
    _max?: MovieRatingsMaxOrderByAggregateInput
    _min?: MovieRatingsMinOrderByAggregateInput
    _sum?: MovieRatingsSumOrderByAggregateInput
  }

  export type MovieRatingsScalarWhereWithAggregatesInput = {
    AND?: MovieRatingsScalarWhereWithAggregatesInput | MovieRatingsScalarWhereWithAggregatesInput[]
    OR?: MovieRatingsScalarWhereWithAggregatesInput[]
    NOT?: MovieRatingsScalarWhereWithAggregatesInput | MovieRatingsScalarWhereWithAggregatesInput[]
    MovieRatingId?: IntWithAggregatesFilter<"MovieRatings"> | number
    UserId?: IntWithAggregatesFilter<"MovieRatings"> | number
    MovieId?: IntWithAggregatesFilter<"MovieRatings"> | number
    Rating?: IntWithAggregatesFilter<"MovieRatings"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"MovieRatings"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"MovieRatings"> | Date | string
  }

  export type SeriesRatingsWhereInput = {
    AND?: SeriesRatingsWhereInput | SeriesRatingsWhereInput[]
    OR?: SeriesRatingsWhereInput[]
    NOT?: SeriesRatingsWhereInput | SeriesRatingsWhereInput[]
    SeriesRatingId?: IntFilter<"SeriesRatings"> | number
    UserId?: IntFilter<"SeriesRatings"> | number
    SeriesId?: IntFilter<"SeriesRatings"> | number
    Rating?: IntFilter<"SeriesRatings"> | number
    CreatedAt?: DateTimeFilter<"SeriesRatings"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesRatings"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput>
  }

  export type SeriesRatingsOrderByWithRelationInput = {
    SeriesRatingId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    User?: UsersOrderByWithRelationInput
    Series?: SeriesOrderByWithRelationInput
  }

  export type SeriesRatingsWhereUniqueInput = Prisma.AtLeast<{
    SeriesRatingId?: number
    AND?: SeriesRatingsWhereInput | SeriesRatingsWhereInput[]
    OR?: SeriesRatingsWhereInput[]
    NOT?: SeriesRatingsWhereInput | SeriesRatingsWhereInput[]
    UserId?: IntFilter<"SeriesRatings"> | number
    SeriesId?: IntFilter<"SeriesRatings"> | number
    Rating?: IntFilter<"SeriesRatings"> | number
    CreatedAt?: DateTimeFilter<"SeriesRatings"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesRatings"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput>
  }, "SeriesRatingId">

  export type SeriesRatingsOrderByWithAggregationInput = {
    SeriesRatingId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: SeriesRatingsCountOrderByAggregateInput
    _avg?: SeriesRatingsAvgOrderByAggregateInput
    _max?: SeriesRatingsMaxOrderByAggregateInput
    _min?: SeriesRatingsMinOrderByAggregateInput
    _sum?: SeriesRatingsSumOrderByAggregateInput
  }

  export type SeriesRatingsScalarWhereWithAggregatesInput = {
    AND?: SeriesRatingsScalarWhereWithAggregatesInput | SeriesRatingsScalarWhereWithAggregatesInput[]
    OR?: SeriesRatingsScalarWhereWithAggregatesInput[]
    NOT?: SeriesRatingsScalarWhereWithAggregatesInput | SeriesRatingsScalarWhereWithAggregatesInput[]
    SeriesRatingId?: IntWithAggregatesFilter<"SeriesRatings"> | number
    UserId?: IntWithAggregatesFilter<"SeriesRatings"> | number
    SeriesId?: IntWithAggregatesFilter<"SeriesRatings"> | number
    Rating?: IntWithAggregatesFilter<"SeriesRatings"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"SeriesRatings"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"SeriesRatings"> | Date | string
  }

  export type MovieCommentsWhereInput = {
    AND?: MovieCommentsWhereInput | MovieCommentsWhereInput[]
    OR?: MovieCommentsWhereInput[]
    NOT?: MovieCommentsWhereInput | MovieCommentsWhereInput[]
    MovieCommentId?: IntFilter<"MovieComments"> | number
    UserId?: IntFilter<"MovieComments"> | number
    MovieId?: IntFilter<"MovieComments"> | number
    CommentText?: StringFilter<"MovieComments"> | string
    CreatedAt?: DateTimeFilter<"MovieComments"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieComments"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesRelationFilter, MoviesWhereInput>
  }

  export type MovieCommentsOrderByWithRelationInput = {
    MovieCommentId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    User?: UsersOrderByWithRelationInput
    Movie?: MoviesOrderByWithRelationInput
  }

  export type MovieCommentsWhereUniqueInput = Prisma.AtLeast<{
    MovieCommentId?: number
    AND?: MovieCommentsWhereInput | MovieCommentsWhereInput[]
    OR?: MovieCommentsWhereInput[]
    NOT?: MovieCommentsWhereInput | MovieCommentsWhereInput[]
    UserId?: IntFilter<"MovieComments"> | number
    MovieId?: IntFilter<"MovieComments"> | number
    CommentText?: StringFilter<"MovieComments"> | string
    CreatedAt?: DateTimeFilter<"MovieComments"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieComments"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesRelationFilter, MoviesWhereInput>
  }, "MovieCommentId">

  export type MovieCommentsOrderByWithAggregationInput = {
    MovieCommentId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: MovieCommentsCountOrderByAggregateInput
    _avg?: MovieCommentsAvgOrderByAggregateInput
    _max?: MovieCommentsMaxOrderByAggregateInput
    _min?: MovieCommentsMinOrderByAggregateInput
    _sum?: MovieCommentsSumOrderByAggregateInput
  }

  export type MovieCommentsScalarWhereWithAggregatesInput = {
    AND?: MovieCommentsScalarWhereWithAggregatesInput | MovieCommentsScalarWhereWithAggregatesInput[]
    OR?: MovieCommentsScalarWhereWithAggregatesInput[]
    NOT?: MovieCommentsScalarWhereWithAggregatesInput | MovieCommentsScalarWhereWithAggregatesInput[]
    MovieCommentId?: IntWithAggregatesFilter<"MovieComments"> | number
    UserId?: IntWithAggregatesFilter<"MovieComments"> | number
    MovieId?: IntWithAggregatesFilter<"MovieComments"> | number
    CommentText?: StringWithAggregatesFilter<"MovieComments"> | string
    CreatedAt?: DateTimeWithAggregatesFilter<"MovieComments"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"MovieComments"> | Date | string
  }

  export type SeriesCommentsWhereInput = {
    AND?: SeriesCommentsWhereInput | SeriesCommentsWhereInput[]
    OR?: SeriesCommentsWhereInput[]
    NOT?: SeriesCommentsWhereInput | SeriesCommentsWhereInput[]
    SeriesCommentId?: IntFilter<"SeriesComments"> | number
    UserId?: IntFilter<"SeriesComments"> | number
    SeriesId?: IntFilter<"SeriesComments"> | number
    CommentText?: StringFilter<"SeriesComments"> | string
    CreatedAt?: DateTimeFilter<"SeriesComments"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesComments"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput>
  }

  export type SeriesCommentsOrderByWithRelationInput = {
    SeriesCommentId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    User?: UsersOrderByWithRelationInput
    Series?: SeriesOrderByWithRelationInput
  }

  export type SeriesCommentsWhereUniqueInput = Prisma.AtLeast<{
    SeriesCommentId?: number
    AND?: SeriesCommentsWhereInput | SeriesCommentsWhereInput[]
    OR?: SeriesCommentsWhereInput[]
    NOT?: SeriesCommentsWhereInput | SeriesCommentsWhereInput[]
    UserId?: IntFilter<"SeriesComments"> | number
    SeriesId?: IntFilter<"SeriesComments"> | number
    CommentText?: StringFilter<"SeriesComments"> | string
    CreatedAt?: DateTimeFilter<"SeriesComments"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesComments"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput>
  }, "SeriesCommentId">

  export type SeriesCommentsOrderByWithAggregationInput = {
    SeriesCommentId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: SeriesCommentsCountOrderByAggregateInput
    _avg?: SeriesCommentsAvgOrderByAggregateInput
    _max?: SeriesCommentsMaxOrderByAggregateInput
    _min?: SeriesCommentsMinOrderByAggregateInput
    _sum?: SeriesCommentsSumOrderByAggregateInput
  }

  export type SeriesCommentsScalarWhereWithAggregatesInput = {
    AND?: SeriesCommentsScalarWhereWithAggregatesInput | SeriesCommentsScalarWhereWithAggregatesInput[]
    OR?: SeriesCommentsScalarWhereWithAggregatesInput[]
    NOT?: SeriesCommentsScalarWhereWithAggregatesInput | SeriesCommentsScalarWhereWithAggregatesInput[]
    SeriesCommentId?: IntWithAggregatesFilter<"SeriesComments"> | number
    UserId?: IntWithAggregatesFilter<"SeriesComments"> | number
    SeriesId?: IntWithAggregatesFilter<"SeriesComments"> | number
    CommentText?: StringWithAggregatesFilter<"SeriesComments"> | string
    CreatedAt?: DateTimeWithAggregatesFilter<"SeriesComments"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"SeriesComments"> | Date | string
  }

  export type MovieNotesWhereInput = {
    AND?: MovieNotesWhereInput | MovieNotesWhereInput[]
    OR?: MovieNotesWhereInput[]
    NOT?: MovieNotesWhereInput | MovieNotesWhereInput[]
    NoteId?: IntFilter<"MovieNotes"> | number
    UserId?: IntFilter<"MovieNotes"> | number
    MovieId?: IntFilter<"MovieNotes"> | number
    NoteText?: StringFilter<"MovieNotes"> | string
    CreatedAt?: DateTimeFilter<"MovieNotes"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieNotes"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesRelationFilter, MoviesWhereInput>
  }

  export type MovieNotesOrderByWithRelationInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    User?: UsersOrderByWithRelationInput
    Movie?: MoviesOrderByWithRelationInput
  }

  export type MovieNotesWhereUniqueInput = Prisma.AtLeast<{
    NoteId?: number
    AND?: MovieNotesWhereInput | MovieNotesWhereInput[]
    OR?: MovieNotesWhereInput[]
    NOT?: MovieNotesWhereInput | MovieNotesWhereInput[]
    UserId?: IntFilter<"MovieNotes"> | number
    MovieId?: IntFilter<"MovieNotes"> | number
    NoteText?: StringFilter<"MovieNotes"> | string
    CreatedAt?: DateTimeFilter<"MovieNotes"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieNotes"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesRelationFilter, MoviesWhereInput>
  }, "NoteId">

  export type MovieNotesOrderByWithAggregationInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: MovieNotesCountOrderByAggregateInput
    _avg?: MovieNotesAvgOrderByAggregateInput
    _max?: MovieNotesMaxOrderByAggregateInput
    _min?: MovieNotesMinOrderByAggregateInput
    _sum?: MovieNotesSumOrderByAggregateInput
  }

  export type MovieNotesScalarWhereWithAggregatesInput = {
    AND?: MovieNotesScalarWhereWithAggregatesInput | MovieNotesScalarWhereWithAggregatesInput[]
    OR?: MovieNotesScalarWhereWithAggregatesInput[]
    NOT?: MovieNotesScalarWhereWithAggregatesInput | MovieNotesScalarWhereWithAggregatesInput[]
    NoteId?: IntWithAggregatesFilter<"MovieNotes"> | number
    UserId?: IntWithAggregatesFilter<"MovieNotes"> | number
    MovieId?: IntWithAggregatesFilter<"MovieNotes"> | number
    NoteText?: StringWithAggregatesFilter<"MovieNotes"> | string
    CreatedAt?: DateTimeWithAggregatesFilter<"MovieNotes"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"MovieNotes"> | Date | string
  }

  export type SeriesNotesWhereInput = {
    AND?: SeriesNotesWhereInput | SeriesNotesWhereInput[]
    OR?: SeriesNotesWhereInput[]
    NOT?: SeriesNotesWhereInput | SeriesNotesWhereInput[]
    NoteId?: IntFilter<"SeriesNotes"> | number
    UserId?: IntFilter<"SeriesNotes"> | number
    SeriesId?: IntFilter<"SeriesNotes"> | number
    NoteText?: StringFilter<"SeriesNotes"> | string
    CreatedAt?: DateTimeFilter<"SeriesNotes"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesNotes"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput>
  }

  export type SeriesNotesOrderByWithRelationInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    User?: UsersOrderByWithRelationInput
    Series?: SeriesOrderByWithRelationInput
  }

  export type SeriesNotesWhereUniqueInput = Prisma.AtLeast<{
    NoteId?: number
    AND?: SeriesNotesWhereInput | SeriesNotesWhereInput[]
    OR?: SeriesNotesWhereInput[]
    NOT?: SeriesNotesWhereInput | SeriesNotesWhereInput[]
    UserId?: IntFilter<"SeriesNotes"> | number
    SeriesId?: IntFilter<"SeriesNotes"> | number
    NoteText?: StringFilter<"SeriesNotes"> | string
    CreatedAt?: DateTimeFilter<"SeriesNotes"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesNotes"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput>
  }, "NoteId">

  export type SeriesNotesOrderByWithAggregationInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: SeriesNotesCountOrderByAggregateInput
    _avg?: SeriesNotesAvgOrderByAggregateInput
    _max?: SeriesNotesMaxOrderByAggregateInput
    _min?: SeriesNotesMinOrderByAggregateInput
    _sum?: SeriesNotesSumOrderByAggregateInput
  }

  export type SeriesNotesScalarWhereWithAggregatesInput = {
    AND?: SeriesNotesScalarWhereWithAggregatesInput | SeriesNotesScalarWhereWithAggregatesInput[]
    OR?: SeriesNotesScalarWhereWithAggregatesInput[]
    NOT?: SeriesNotesScalarWhereWithAggregatesInput | SeriesNotesScalarWhereWithAggregatesInput[]
    NoteId?: IntWithAggregatesFilter<"SeriesNotes"> | number
    UserId?: IntWithAggregatesFilter<"SeriesNotes"> | number
    SeriesId?: IntWithAggregatesFilter<"SeriesNotes"> | number
    NoteText?: StringWithAggregatesFilter<"SeriesNotes"> | string
    CreatedAt?: DateTimeWithAggregatesFilter<"SeriesNotes"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"SeriesNotes"> | Date | string
  }

  export type SchedulingWhereInput = {
    AND?: SchedulingWhereInput | SchedulingWhereInput[]
    OR?: SchedulingWhereInput[]
    NOT?: SchedulingWhereInput | SchedulingWhereInput[]
    EventId?: IntFilter<"Scheduling"> | number
    UserId?: IntFilter<"Scheduling"> | number
    MovieId?: IntNullableFilter<"Scheduling"> | number | null
    SeriesId?: IntNullableFilter<"Scheduling"> | number | null
    EventDate?: DateTimeFilter<"Scheduling"> | Date | string
    Note?: StringNullableFilter<"Scheduling"> | string | null
    CreatedAt?: DateTimeFilter<"Scheduling"> | Date | string
    UpdatedAt?: DateTimeFilter<"Scheduling"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesNullableRelationFilter, MoviesWhereInput> | null
    Series?: XOR<SeriesNullableRelationFilter, SeriesWhereInput> | null
  }

  export type SchedulingOrderByWithRelationInput = {
    EventId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrderInput | SortOrder
    SeriesId?: SortOrderInput | SortOrder
    EventDate?: SortOrder
    Note?: SortOrderInput | SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    User?: UsersOrderByWithRelationInput
    Movie?: MoviesOrderByWithRelationInput
    Series?: SeriesOrderByWithRelationInput
  }

  export type SchedulingWhereUniqueInput = Prisma.AtLeast<{
    EventId?: number
    AND?: SchedulingWhereInput | SchedulingWhereInput[]
    OR?: SchedulingWhereInput[]
    NOT?: SchedulingWhereInput | SchedulingWhereInput[]
    UserId?: IntFilter<"Scheduling"> | number
    MovieId?: IntNullableFilter<"Scheduling"> | number | null
    SeriesId?: IntNullableFilter<"Scheduling"> | number | null
    EventDate?: DateTimeFilter<"Scheduling"> | Date | string
    Note?: StringNullableFilter<"Scheduling"> | string | null
    CreatedAt?: DateTimeFilter<"Scheduling"> | Date | string
    UpdatedAt?: DateTimeFilter<"Scheduling"> | Date | string
    User?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesNullableRelationFilter, MoviesWhereInput> | null
    Series?: XOR<SeriesNullableRelationFilter, SeriesWhereInput> | null
  }, "EventId">

  export type SchedulingOrderByWithAggregationInput = {
    EventId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrderInput | SortOrder
    SeriesId?: SortOrderInput | SortOrder
    EventDate?: SortOrder
    Note?: SortOrderInput | SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: SchedulingCountOrderByAggregateInput
    _avg?: SchedulingAvgOrderByAggregateInput
    _max?: SchedulingMaxOrderByAggregateInput
    _min?: SchedulingMinOrderByAggregateInput
    _sum?: SchedulingSumOrderByAggregateInput
  }

  export type SchedulingScalarWhereWithAggregatesInput = {
    AND?: SchedulingScalarWhereWithAggregatesInput | SchedulingScalarWhereWithAggregatesInput[]
    OR?: SchedulingScalarWhereWithAggregatesInput[]
    NOT?: SchedulingScalarWhereWithAggregatesInput | SchedulingScalarWhereWithAggregatesInput[]
    EventId?: IntWithAggregatesFilter<"Scheduling"> | number
    UserId?: IntWithAggregatesFilter<"Scheduling"> | number
    MovieId?: IntNullableWithAggregatesFilter<"Scheduling"> | number | null
    SeriesId?: IntNullableWithAggregatesFilter<"Scheduling"> | number | null
    EventDate?: DateTimeWithAggregatesFilter<"Scheduling"> | Date | string
    Note?: StringNullableWithAggregatesFilter<"Scheduling"> | string | null
    CreatedAt?: DateTimeWithAggregatesFilter<"Scheduling"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"Scheduling"> | Date | string
  }

  export type SharesWhereInput = {
    AND?: SharesWhereInput | SharesWhereInput[]
    OR?: SharesWhereInput[]
    NOT?: SharesWhereInput | SharesWhereInput[]
    ShareId?: IntFilter<"Shares"> | number
    SenderUserId?: IntFilter<"Shares"> | number
    RecipientUserId?: IntFilter<"Shares"> | number
    MovieId?: IntNullableFilter<"Shares"> | number | null
    SeriesId?: IntNullableFilter<"Shares"> | number | null
    CreatedAt?: DateTimeFilter<"Shares"> | Date | string
    SenderUser?: XOR<UsersRelationFilter, UsersWhereInput>
    RecipientUser?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesNullableRelationFilter, MoviesWhereInput> | null
    Series?: XOR<SeriesNullableRelationFilter, SeriesWhereInput> | null
  }

  export type SharesOrderByWithRelationInput = {
    ShareId?: SortOrder
    SenderUserId?: SortOrder
    RecipientUserId?: SortOrder
    MovieId?: SortOrderInput | SortOrder
    SeriesId?: SortOrderInput | SortOrder
    CreatedAt?: SortOrder
    SenderUser?: UsersOrderByWithRelationInput
    RecipientUser?: UsersOrderByWithRelationInput
    Movie?: MoviesOrderByWithRelationInput
    Series?: SeriesOrderByWithRelationInput
  }

  export type SharesWhereUniqueInput = Prisma.AtLeast<{
    ShareId?: number
    AND?: SharesWhereInput | SharesWhereInput[]
    OR?: SharesWhereInput[]
    NOT?: SharesWhereInput | SharesWhereInput[]
    SenderUserId?: IntFilter<"Shares"> | number
    RecipientUserId?: IntFilter<"Shares"> | number
    MovieId?: IntNullableFilter<"Shares"> | number | null
    SeriesId?: IntNullableFilter<"Shares"> | number | null
    CreatedAt?: DateTimeFilter<"Shares"> | Date | string
    SenderUser?: XOR<UsersRelationFilter, UsersWhereInput>
    RecipientUser?: XOR<UsersRelationFilter, UsersWhereInput>
    Movie?: XOR<MoviesNullableRelationFilter, MoviesWhereInput> | null
    Series?: XOR<SeriesNullableRelationFilter, SeriesWhereInput> | null
  }, "ShareId">

  export type SharesOrderByWithAggregationInput = {
    ShareId?: SortOrder
    SenderUserId?: SortOrder
    RecipientUserId?: SortOrder
    MovieId?: SortOrderInput | SortOrder
    SeriesId?: SortOrderInput | SortOrder
    CreatedAt?: SortOrder
    _count?: SharesCountOrderByAggregateInput
    _avg?: SharesAvgOrderByAggregateInput
    _max?: SharesMaxOrderByAggregateInput
    _min?: SharesMinOrderByAggregateInput
    _sum?: SharesSumOrderByAggregateInput
  }

  export type SharesScalarWhereWithAggregatesInput = {
    AND?: SharesScalarWhereWithAggregatesInput | SharesScalarWhereWithAggregatesInput[]
    OR?: SharesScalarWhereWithAggregatesInput[]
    NOT?: SharesScalarWhereWithAggregatesInput | SharesScalarWhereWithAggregatesInput[]
    ShareId?: IntWithAggregatesFilter<"Shares"> | number
    SenderUserId?: IntWithAggregatesFilter<"Shares"> | number
    RecipientUserId?: IntWithAggregatesFilter<"Shares"> | number
    MovieId?: IntNullableWithAggregatesFilter<"Shares"> | number | null
    SeriesId?: IntNullableWithAggregatesFilter<"Shares"> | number | null
    CreatedAt?: DateTimeWithAggregatesFilter<"Shares"> | Date | string
  }

  export type MovieCategoriesWhereInput = {
    AND?: MovieCategoriesWhereInput | MovieCategoriesWhereInput[]
    OR?: MovieCategoriesWhereInput[]
    NOT?: MovieCategoriesWhereInput | MovieCategoriesWhereInput[]
    MovieCategoryId?: IntFilter<"MovieCategories"> | number
    Name?: StringFilter<"MovieCategories"> | string
    CreatedAt?: DateTimeFilter<"MovieCategories"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieCategories"> | Date | string
    MovieCategoryRelations?: MovieCategoryRelationsListRelationFilter
  }

  export type MovieCategoriesOrderByWithRelationInput = {
    MovieCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    MovieCategoryRelations?: MovieCategoryRelationsOrderByRelationAggregateInput
  }

  export type MovieCategoriesWhereUniqueInput = Prisma.AtLeast<{
    MovieCategoryId?: number
    Name?: string
    AND?: MovieCategoriesWhereInput | MovieCategoriesWhereInput[]
    OR?: MovieCategoriesWhereInput[]
    NOT?: MovieCategoriesWhereInput | MovieCategoriesWhereInput[]
    CreatedAt?: DateTimeFilter<"MovieCategories"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieCategories"> | Date | string
    MovieCategoryRelations?: MovieCategoryRelationsListRelationFilter
  }, "MovieCategoryId" | "Name">

  export type MovieCategoriesOrderByWithAggregationInput = {
    MovieCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: MovieCategoriesCountOrderByAggregateInput
    _avg?: MovieCategoriesAvgOrderByAggregateInput
    _max?: MovieCategoriesMaxOrderByAggregateInput
    _min?: MovieCategoriesMinOrderByAggregateInput
    _sum?: MovieCategoriesSumOrderByAggregateInput
  }

  export type MovieCategoriesScalarWhereWithAggregatesInput = {
    AND?: MovieCategoriesScalarWhereWithAggregatesInput | MovieCategoriesScalarWhereWithAggregatesInput[]
    OR?: MovieCategoriesScalarWhereWithAggregatesInput[]
    NOT?: MovieCategoriesScalarWhereWithAggregatesInput | MovieCategoriesScalarWhereWithAggregatesInput[]
    MovieCategoryId?: IntWithAggregatesFilter<"MovieCategories"> | number
    Name?: StringWithAggregatesFilter<"MovieCategories"> | string
    CreatedAt?: DateTimeWithAggregatesFilter<"MovieCategories"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"MovieCategories"> | Date | string
  }

  export type SeriesCategoriesWhereInput = {
    AND?: SeriesCategoriesWhereInput | SeriesCategoriesWhereInput[]
    OR?: SeriesCategoriesWhereInput[]
    NOT?: SeriesCategoriesWhereInput | SeriesCategoriesWhereInput[]
    SeriesCategoryId?: IntFilter<"SeriesCategories"> | number
    Name?: StringFilter<"SeriesCategories"> | string
    CreatedAt?: DateTimeFilter<"SeriesCategories"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesCategories"> | Date | string
    SeriesCategoryRelations?: SeriesCategoryRelationsListRelationFilter
  }

  export type SeriesCategoriesOrderByWithRelationInput = {
    SeriesCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    SeriesCategoryRelations?: SeriesCategoryRelationsOrderByRelationAggregateInput
  }

  export type SeriesCategoriesWhereUniqueInput = Prisma.AtLeast<{
    SeriesCategoryId?: number
    Name?: string
    AND?: SeriesCategoriesWhereInput | SeriesCategoriesWhereInput[]
    OR?: SeriesCategoriesWhereInput[]
    NOT?: SeriesCategoriesWhereInput | SeriesCategoriesWhereInput[]
    CreatedAt?: DateTimeFilter<"SeriesCategories"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesCategories"> | Date | string
    SeriesCategoryRelations?: SeriesCategoryRelationsListRelationFilter
  }, "SeriesCategoryId" | "Name">

  export type SeriesCategoriesOrderByWithAggregationInput = {
    SeriesCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: SeriesCategoriesCountOrderByAggregateInput
    _avg?: SeriesCategoriesAvgOrderByAggregateInput
    _max?: SeriesCategoriesMaxOrderByAggregateInput
    _min?: SeriesCategoriesMinOrderByAggregateInput
    _sum?: SeriesCategoriesSumOrderByAggregateInput
  }

  export type SeriesCategoriesScalarWhereWithAggregatesInput = {
    AND?: SeriesCategoriesScalarWhereWithAggregatesInput | SeriesCategoriesScalarWhereWithAggregatesInput[]
    OR?: SeriesCategoriesScalarWhereWithAggregatesInput[]
    NOT?: SeriesCategoriesScalarWhereWithAggregatesInput | SeriesCategoriesScalarWhereWithAggregatesInput[]
    SeriesCategoryId?: IntWithAggregatesFilter<"SeriesCategories"> | number
    Name?: StringWithAggregatesFilter<"SeriesCategories"> | string
    CreatedAt?: DateTimeWithAggregatesFilter<"SeriesCategories"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"SeriesCategories"> | Date | string
  }

  export type MovieCategoryRelationsWhereInput = {
    AND?: MovieCategoryRelationsWhereInput | MovieCategoryRelationsWhereInput[]
    OR?: MovieCategoryRelationsWhereInput[]
    NOT?: MovieCategoryRelationsWhereInput | MovieCategoryRelationsWhereInput[]
    MovieCategoryRelationId?: IntFilter<"MovieCategoryRelations"> | number
    MovieId?: IntFilter<"MovieCategoryRelations"> | number
    MovieCategoryId?: IntFilter<"MovieCategoryRelations"> | number
    CreatedAt?: DateTimeFilter<"MovieCategoryRelations"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieCategoryRelations"> | Date | string
    Movie?: XOR<MoviesRelationFilter, MoviesWhereInput>
    MovieCategory?: XOR<MovieCategoriesRelationFilter, MovieCategoriesWhereInput>
  }

  export type MovieCategoryRelationsOrderByWithRelationInput = {
    MovieCategoryRelationId?: SortOrder
    MovieId?: SortOrder
    MovieCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    Movie?: MoviesOrderByWithRelationInput
    MovieCategory?: MovieCategoriesOrderByWithRelationInput
  }

  export type MovieCategoryRelationsWhereUniqueInput = Prisma.AtLeast<{
    MovieCategoryRelationId?: number
    AND?: MovieCategoryRelationsWhereInput | MovieCategoryRelationsWhereInput[]
    OR?: MovieCategoryRelationsWhereInput[]
    NOT?: MovieCategoryRelationsWhereInput | MovieCategoryRelationsWhereInput[]
    MovieId?: IntFilter<"MovieCategoryRelations"> | number
    MovieCategoryId?: IntFilter<"MovieCategoryRelations"> | number
    CreatedAt?: DateTimeFilter<"MovieCategoryRelations"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieCategoryRelations"> | Date | string
    Movie?: XOR<MoviesRelationFilter, MoviesWhereInput>
    MovieCategory?: XOR<MovieCategoriesRelationFilter, MovieCategoriesWhereInput>
  }, "MovieCategoryRelationId">

  export type MovieCategoryRelationsOrderByWithAggregationInput = {
    MovieCategoryRelationId?: SortOrder
    MovieId?: SortOrder
    MovieCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: MovieCategoryRelationsCountOrderByAggregateInput
    _avg?: MovieCategoryRelationsAvgOrderByAggregateInput
    _max?: MovieCategoryRelationsMaxOrderByAggregateInput
    _min?: MovieCategoryRelationsMinOrderByAggregateInput
    _sum?: MovieCategoryRelationsSumOrderByAggregateInput
  }

  export type MovieCategoryRelationsScalarWhereWithAggregatesInput = {
    AND?: MovieCategoryRelationsScalarWhereWithAggregatesInput | MovieCategoryRelationsScalarWhereWithAggregatesInput[]
    OR?: MovieCategoryRelationsScalarWhereWithAggregatesInput[]
    NOT?: MovieCategoryRelationsScalarWhereWithAggregatesInput | MovieCategoryRelationsScalarWhereWithAggregatesInput[]
    MovieCategoryRelationId?: IntWithAggregatesFilter<"MovieCategoryRelations"> | number
    MovieId?: IntWithAggregatesFilter<"MovieCategoryRelations"> | number
    MovieCategoryId?: IntWithAggregatesFilter<"MovieCategoryRelations"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"MovieCategoryRelations"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"MovieCategoryRelations"> | Date | string
  }

  export type SeriesCategoryRelationsWhereInput = {
    AND?: SeriesCategoryRelationsWhereInput | SeriesCategoryRelationsWhereInput[]
    OR?: SeriesCategoryRelationsWhereInput[]
    NOT?: SeriesCategoryRelationsWhereInput | SeriesCategoryRelationsWhereInput[]
    SeriesCategoryRelationId?: IntFilter<"SeriesCategoryRelations"> | number
    SeriesId?: IntFilter<"SeriesCategoryRelations"> | number
    SeriesCategoryId?: IntFilter<"SeriesCategoryRelations"> | number
    CreatedAt?: DateTimeFilter<"SeriesCategoryRelations"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesCategoryRelations"> | Date | string
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput>
    SeriesCategory?: XOR<SeriesCategoriesRelationFilter, SeriesCategoriesWhereInput>
  }

  export type SeriesCategoryRelationsOrderByWithRelationInput = {
    SeriesCategoryRelationId?: SortOrder
    SeriesId?: SortOrder
    SeriesCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    Series?: SeriesOrderByWithRelationInput
    SeriesCategory?: SeriesCategoriesOrderByWithRelationInput
  }

  export type SeriesCategoryRelationsWhereUniqueInput = Prisma.AtLeast<{
    SeriesCategoryRelationId?: number
    AND?: SeriesCategoryRelationsWhereInput | SeriesCategoryRelationsWhereInput[]
    OR?: SeriesCategoryRelationsWhereInput[]
    NOT?: SeriesCategoryRelationsWhereInput | SeriesCategoryRelationsWhereInput[]
    SeriesId?: IntFilter<"SeriesCategoryRelations"> | number
    SeriesCategoryId?: IntFilter<"SeriesCategoryRelations"> | number
    CreatedAt?: DateTimeFilter<"SeriesCategoryRelations"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesCategoryRelations"> | Date | string
    Series?: XOR<SeriesRelationFilter, SeriesWhereInput>
    SeriesCategory?: XOR<SeriesCategoriesRelationFilter, SeriesCategoriesWhereInput>
  }, "SeriesCategoryRelationId">

  export type SeriesCategoryRelationsOrderByWithAggregationInput = {
    SeriesCategoryRelationId?: SortOrder
    SeriesId?: SortOrder
    SeriesCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
    _count?: SeriesCategoryRelationsCountOrderByAggregateInput
    _avg?: SeriesCategoryRelationsAvgOrderByAggregateInput
    _max?: SeriesCategoryRelationsMaxOrderByAggregateInput
    _min?: SeriesCategoryRelationsMinOrderByAggregateInput
    _sum?: SeriesCategoryRelationsSumOrderByAggregateInput
  }

  export type SeriesCategoryRelationsScalarWhereWithAggregatesInput = {
    AND?: SeriesCategoryRelationsScalarWhereWithAggregatesInput | SeriesCategoryRelationsScalarWhereWithAggregatesInput[]
    OR?: SeriesCategoryRelationsScalarWhereWithAggregatesInput[]
    NOT?: SeriesCategoryRelationsScalarWhereWithAggregatesInput | SeriesCategoryRelationsScalarWhereWithAggregatesInput[]
    SeriesCategoryRelationId?: IntWithAggregatesFilter<"SeriesCategoryRelations"> | number
    SeriesId?: IntWithAggregatesFilter<"SeriesCategoryRelations"> | number
    SeriesCategoryId?: IntWithAggregatesFilter<"SeriesCategoryRelations"> | number
    CreatedAt?: DateTimeWithAggregatesFilter<"SeriesCategoryRelations"> | Date | string
    UpdatedAt?: DateTimeWithAggregatesFilter<"SeriesCategoryRelations"> | Date | string
  }

  export type UsersCreateInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersCreateManyInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type UsersUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersUncheckedUpdateManyInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MoviesCreateInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsCreateNestedManyWithoutMovieInput
    Shares?: SharesCreateNestedManyWithoutMovieInput
  }

  export type MoviesUncheckedCreateInput = {
    MovieId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieInput
    Shares?: SharesUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MoviesUpdateInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUpdateManyWithoutMovieNestedInput
    Shares?: SharesUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateInput = {
    MovieId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedUpdateManyWithoutMovieNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type MoviesCreateManyInput = {
    MovieId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MoviesUpdateManyMutationInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MoviesUncheckedUpdateManyInput = {
    MovieId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCreateInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsCreateNestedManyWithoutSeriesInput
    Shares?: SharesCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateInput = {
    SeriesId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesInput
    Shares?: SharesUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUpdateInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateInput = {
    SeriesId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesCreateManyInput = {
    SeriesId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesUpdateManyMutationInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesUncheckedUpdateManyInput = {
    SeriesId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieRatingsCreateInput = {
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutMovieRatingsInput
    Movie: MoviesCreateNestedOneWithoutMovieRatingsInput
  }

  export type MovieRatingsUncheckedCreateInput = {
    MovieRatingId?: number
    UserId: number
    MovieId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieRatingsUpdateInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutMovieRatingsNestedInput
    Movie?: MoviesUpdateOneRequiredWithoutMovieRatingsNestedInput
  }

  export type MovieRatingsUncheckedUpdateInput = {
    MovieRatingId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieRatingsCreateManyInput = {
    MovieRatingId?: number
    UserId: number
    MovieId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieRatingsUpdateManyMutationInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieRatingsUncheckedUpdateManyInput = {
    MovieRatingId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesRatingsCreateInput = {
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSeriesRatingsInput
    Series: SeriesCreateNestedOneWithoutSeriesRatingsInput
  }

  export type SeriesRatingsUncheckedCreateInput = {
    SeriesRatingId?: number
    UserId: number
    SeriesId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesRatingsUpdateInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSeriesRatingsNestedInput
    Series?: SeriesUpdateOneRequiredWithoutSeriesRatingsNestedInput
  }

  export type SeriesRatingsUncheckedUpdateInput = {
    SeriesRatingId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesRatingsCreateManyInput = {
    SeriesRatingId?: number
    UserId: number
    SeriesId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesRatingsUpdateManyMutationInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesRatingsUncheckedUpdateManyInput = {
    SeriesRatingId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCommentsCreateInput = {
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutMovieCommentsInput
    Movie: MoviesCreateNestedOneWithoutMovieCommentsInput
  }

  export type MovieCommentsUncheckedCreateInput = {
    MovieCommentId?: number
    UserId: number
    MovieId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCommentsUpdateInput = {
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutMovieCommentsNestedInput
    Movie?: MoviesUpdateOneRequiredWithoutMovieCommentsNestedInput
  }

  export type MovieCommentsUncheckedUpdateInput = {
    MovieCommentId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCommentsCreateManyInput = {
    MovieCommentId?: number
    UserId: number
    MovieId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCommentsUpdateManyMutationInput = {
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCommentsUncheckedUpdateManyInput = {
    MovieCommentId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCommentsCreateInput = {
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSeriesCommentsInput
    Series: SeriesCreateNestedOneWithoutSeriesCommentsInput
  }

  export type SeriesCommentsUncheckedCreateInput = {
    SeriesCommentId?: number
    UserId: number
    SeriesId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCommentsUpdateInput = {
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSeriesCommentsNestedInput
    Series?: SeriesUpdateOneRequiredWithoutSeriesCommentsNestedInput
  }

  export type SeriesCommentsUncheckedUpdateInput = {
    SeriesCommentId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCommentsCreateManyInput = {
    SeriesCommentId?: number
    UserId: number
    SeriesId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCommentsUpdateManyMutationInput = {
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCommentsUncheckedUpdateManyInput = {
    SeriesCommentId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieNotesCreateInput = {
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutMovieNotesInput
    Movie: MoviesCreateNestedOneWithoutMovieNotesInput
  }

  export type MovieNotesUncheckedCreateInput = {
    NoteId?: number
    UserId: number
    MovieId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieNotesUpdateInput = {
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutMovieNotesNestedInput
    Movie?: MoviesUpdateOneRequiredWithoutMovieNotesNestedInput
  }

  export type MovieNotesUncheckedUpdateInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieNotesCreateManyInput = {
    NoteId?: number
    UserId: number
    MovieId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieNotesUpdateManyMutationInput = {
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieNotesUncheckedUpdateManyInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesNotesCreateInput = {
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSeriesNotesInput
    Series: SeriesCreateNestedOneWithoutSeriesNotesInput
  }

  export type SeriesNotesUncheckedCreateInput = {
    NoteId?: number
    UserId: number
    SeriesId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesNotesUpdateInput = {
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSeriesNotesNestedInput
    Series?: SeriesUpdateOneRequiredWithoutSeriesNotesNestedInput
  }

  export type SeriesNotesUncheckedUpdateInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesNotesCreateManyInput = {
    NoteId?: number
    UserId: number
    SeriesId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesNotesUpdateManyMutationInput = {
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesNotesUncheckedUpdateManyInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingCreateInput = {
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSchedulingInput
    Movie?: MoviesCreateNestedOneWithoutSchedulingInput
    Series?: SeriesCreateNestedOneWithoutSchedulingInput
  }

  export type SchedulingUncheckedCreateInput = {
    EventId?: number
    UserId: number
    MovieId?: number | null
    SeriesId?: number | null
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SchedulingUpdateInput = {
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSchedulingNestedInput
    Movie?: MoviesUpdateOneWithoutSchedulingNestedInput
    Series?: SeriesUpdateOneWithoutSchedulingNestedInput
  }

  export type SchedulingUncheckedUpdateInput = {
    EventId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingCreateManyInput = {
    EventId?: number
    UserId: number
    MovieId?: number | null
    SeriesId?: number | null
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SchedulingUpdateManyMutationInput = {
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingUncheckedUpdateManyInput = {
    EventId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesCreateInput = {
    CreatedAt?: Date | string
    SenderUser: UsersCreateNestedOneWithoutSharesSentInput
    RecipientUser: UsersCreateNestedOneWithoutSharesReceivedInput
    Movie?: MoviesCreateNestedOneWithoutSharesInput
    Series?: SeriesCreateNestedOneWithoutSharesInput
  }

  export type SharesUncheckedCreateInput = {
    ShareId?: number
    SenderUserId: number
    RecipientUserId: number
    MovieId?: number | null
    SeriesId?: number | null
    CreatedAt?: Date | string
  }

  export type SharesUpdateInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SenderUser?: UsersUpdateOneRequiredWithoutSharesSentNestedInput
    RecipientUser?: UsersUpdateOneRequiredWithoutSharesReceivedNestedInput
    Movie?: MoviesUpdateOneWithoutSharesNestedInput
    Series?: SeriesUpdateOneWithoutSharesNestedInput
  }

  export type SharesUncheckedUpdateInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    SenderUserId?: IntFieldUpdateOperationsInput | number
    RecipientUserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesCreateManyInput = {
    ShareId?: number
    SenderUserId: number
    RecipientUserId: number
    MovieId?: number | null
    SeriesId?: number | null
    CreatedAt?: Date | string
  }

  export type SharesUpdateManyMutationInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUncheckedUpdateManyInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    SenderUserId?: IntFieldUpdateOperationsInput | number
    RecipientUserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoriesCreateInput = {
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieCategoryRelations?: MovieCategoryRelationsCreateNestedManyWithoutMovieCategoryInput
  }

  export type MovieCategoriesUncheckedCreateInput = {
    MovieCategoryId?: number
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieCategoryInput
  }

  export type MovieCategoriesUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieCategoryRelations?: MovieCategoryRelationsUpdateManyWithoutMovieCategoryNestedInput
  }

  export type MovieCategoriesUncheckedUpdateInput = {
    MovieCategoryId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedUpdateManyWithoutMovieCategoryNestedInput
  }

  export type MovieCategoriesCreateManyInput = {
    MovieCategoryId?: number
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoriesUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoriesUncheckedUpdateManyInput = {
    MovieCategoryId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoriesCreateInput = {
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesCategoryRelations?: SeriesCategoryRelationsCreateNestedManyWithoutSeriesCategoryInput
  }

  export type SeriesCategoriesUncheckedCreateInput = {
    SeriesCategoryId?: number
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesCategoryInput
  }

  export type SeriesCategoriesUpdateInput = {
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesCategoryRelations?: SeriesCategoryRelationsUpdateManyWithoutSeriesCategoryNestedInput
  }

  export type SeriesCategoriesUncheckedUpdateInput = {
    SeriesCategoryId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesCategoryNestedInput
  }

  export type SeriesCategoriesCreateManyInput = {
    SeriesCategoryId?: number
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoriesUpdateManyMutationInput = {
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoriesUncheckedUpdateManyInput = {
    SeriesCategoryId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoryRelationsCreateInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Movie: MoviesCreateNestedOneWithoutMovieCategoryRelationsInput
    MovieCategory: MovieCategoriesCreateNestedOneWithoutMovieCategoryRelationsInput
  }

  export type MovieCategoryRelationsUncheckedCreateInput = {
    MovieCategoryRelationId?: number
    MovieId: number
    MovieCategoryId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoryRelationsUpdateInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movie?: MoviesUpdateOneRequiredWithoutMovieCategoryRelationsNestedInput
    MovieCategory?: MovieCategoriesUpdateOneRequiredWithoutMovieCategoryRelationsNestedInput
  }

  export type MovieCategoryRelationsUncheckedUpdateInput = {
    MovieCategoryRelationId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    MovieCategoryId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoryRelationsCreateManyInput = {
    MovieCategoryRelationId?: number
    MovieId: number
    MovieCategoryId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoryRelationsUpdateManyMutationInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoryRelationsUncheckedUpdateManyInput = {
    MovieCategoryRelationId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    MovieCategoryId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoryRelationsCreateInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Series: SeriesCreateNestedOneWithoutSeriesCategoryRelationsInput
    SeriesCategory: SeriesCategoriesCreateNestedOneWithoutSeriesCategoryRelationsInput
  }

  export type SeriesCategoryRelationsUncheckedCreateInput = {
    SeriesCategoryRelationId?: number
    SeriesId: number
    SeriesCategoryId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoryRelationsUpdateInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Series?: SeriesUpdateOneRequiredWithoutSeriesCategoryRelationsNestedInput
    SeriesCategory?: SeriesCategoriesUpdateOneRequiredWithoutSeriesCategoryRelationsNestedInput
  }

  export type SeriesCategoryRelationsUncheckedUpdateInput = {
    SeriesCategoryRelationId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    SeriesCategoryId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoryRelationsCreateManyInput = {
    SeriesCategoryRelationId?: number
    SeriesId: number
    SeriesCategoryId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoryRelationsUpdateManyMutationInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoryRelationsUncheckedUpdateManyInput = {
    SeriesCategoryRelationId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    SeriesCategoryId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MovieCommentsListRelationFilter = {
    every?: MovieCommentsWhereInput
    some?: MovieCommentsWhereInput
    none?: MovieCommentsWhereInput
  }

  export type SeriesCommentsListRelationFilter = {
    every?: SeriesCommentsWhereInput
    some?: SeriesCommentsWhereInput
    none?: SeriesCommentsWhereInput
  }

  export type MovieRatingsListRelationFilter = {
    every?: MovieRatingsWhereInput
    some?: MovieRatingsWhereInput
    none?: MovieRatingsWhereInput
  }

  export type SeriesRatingsListRelationFilter = {
    every?: SeriesRatingsWhereInput
    some?: SeriesRatingsWhereInput
    none?: SeriesRatingsWhereInput
  }

  export type MovieNotesListRelationFilter = {
    every?: MovieNotesWhereInput
    some?: MovieNotesWhereInput
    none?: MovieNotesWhereInput
  }

  export type SeriesNotesListRelationFilter = {
    every?: SeriesNotesWhereInput
    some?: SeriesNotesWhereInput
    none?: SeriesNotesWhereInput
  }

  export type SchedulingListRelationFilter = {
    every?: SchedulingWhereInput
    some?: SchedulingWhereInput
    none?: SchedulingWhereInput
  }

  export type SharesListRelationFilter = {
    every?: SharesWhereInput
    some?: SharesWhereInput
    none?: SharesWhereInput
  }

  export type MovieCommentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeriesCommentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MovieRatingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeriesRatingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MovieNotesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeriesNotesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchedulingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SharesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    UserId?: SortOrder
    Name?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    UserId?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    UserId?: SortOrder
    Name?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    UserId?: SortOrder
    Name?: SortOrder
    Email?: SortOrder
    Password?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    UserId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type MovieCategoryRelationsListRelationFilter = {
    every?: MovieCategoryRelationsWhereInput
    some?: MovieCategoryRelationsWhereInput
    none?: MovieCategoryRelationsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MovieCategoryRelationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MoviesCountOrderByAggregateInput = {
    MovieId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MoviesAvgOrderByAggregateInput = {
    MovieId?: SortOrder
  }

  export type MoviesMaxOrderByAggregateInput = {
    MovieId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MoviesMinOrderByAggregateInput = {
    MovieId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MoviesSumOrderByAggregateInput = {
    MovieId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type SeriesCategoryRelationsListRelationFilter = {
    every?: SeriesCategoryRelationsWhereInput
    some?: SeriesCategoryRelationsWhereInput
    none?: SeriesCategoryRelationsWhereInput
  }

  export type SeriesCategoryRelationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SeriesCountOrderByAggregateInput = {
    SeriesId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrder
    SeasonsCount?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesAvgOrderByAggregateInput = {
    SeriesId?: SortOrder
    SeasonsCount?: SortOrder
  }

  export type SeriesMaxOrderByAggregateInput = {
    SeriesId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrder
    SeasonsCount?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesMinOrderByAggregateInput = {
    SeriesId?: SortOrder
    Title?: SortOrder
    Genre?: SortOrder
    ReleaseDate?: SortOrder
    Description?: SortOrder
    SeasonsCount?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesSumOrderByAggregateInput = {
    SeriesId?: SortOrder
    SeasonsCount?: SortOrder
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type MoviesRelationFilter = {
    is?: MoviesWhereInput
    isNot?: MoviesWhereInput
  }

  export type MovieRatingsCountOrderByAggregateInput = {
    MovieRatingId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieRatingsAvgOrderByAggregateInput = {
    MovieRatingId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    Rating?: SortOrder
  }

  export type MovieRatingsMaxOrderByAggregateInput = {
    MovieRatingId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieRatingsMinOrderByAggregateInput = {
    MovieRatingId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieRatingsSumOrderByAggregateInput = {
    MovieRatingId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    Rating?: SortOrder
  }

  export type SeriesRelationFilter = {
    is?: SeriesWhereInput
    isNot?: SeriesWhereInput
  }

  export type SeriesRatingsCountOrderByAggregateInput = {
    SeriesRatingId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesRatingsAvgOrderByAggregateInput = {
    SeriesRatingId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    Rating?: SortOrder
  }

  export type SeriesRatingsMaxOrderByAggregateInput = {
    SeriesRatingId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesRatingsMinOrderByAggregateInput = {
    SeriesRatingId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    Rating?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesRatingsSumOrderByAggregateInput = {
    SeriesRatingId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    Rating?: SortOrder
  }

  export type MovieCommentsCountOrderByAggregateInput = {
    MovieCommentId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCommentsAvgOrderByAggregateInput = {
    MovieCommentId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
  }

  export type MovieCommentsMaxOrderByAggregateInput = {
    MovieCommentId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCommentsMinOrderByAggregateInput = {
    MovieCommentId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCommentsSumOrderByAggregateInput = {
    MovieCommentId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
  }

  export type SeriesCommentsCountOrderByAggregateInput = {
    SeriesCommentId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCommentsAvgOrderByAggregateInput = {
    SeriesCommentId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
  }

  export type SeriesCommentsMaxOrderByAggregateInput = {
    SeriesCommentId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCommentsMinOrderByAggregateInput = {
    SeriesCommentId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    CommentText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCommentsSumOrderByAggregateInput = {
    SeriesCommentId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
  }

  export type MovieNotesCountOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieNotesAvgOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
  }

  export type MovieNotesMaxOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieNotesMinOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieNotesSumOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
  }

  export type SeriesNotesCountOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesNotesAvgOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
  }

  export type SeriesNotesMaxOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesNotesMinOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
    NoteText?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesNotesSumOrderByAggregateInput = {
    NoteId?: SortOrder
    UserId?: SortOrder
    SeriesId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type MoviesNullableRelationFilter = {
    is?: MoviesWhereInput | null
    isNot?: MoviesWhereInput | null
  }

  export type SeriesNullableRelationFilter = {
    is?: SeriesWhereInput | null
    isNot?: SeriesWhereInput | null
  }

  export type SchedulingCountOrderByAggregateInput = {
    EventId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
    EventDate?: SortOrder
    Note?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SchedulingAvgOrderByAggregateInput = {
    EventId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
  }

  export type SchedulingMaxOrderByAggregateInput = {
    EventId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
    EventDate?: SortOrder
    Note?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SchedulingMinOrderByAggregateInput = {
    EventId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
    EventDate?: SortOrder
    Note?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SchedulingSumOrderByAggregateInput = {
    EventId?: SortOrder
    UserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SharesCountOrderByAggregateInput = {
    ShareId?: SortOrder
    SenderUserId?: SortOrder
    RecipientUserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
    CreatedAt?: SortOrder
  }

  export type SharesAvgOrderByAggregateInput = {
    ShareId?: SortOrder
    SenderUserId?: SortOrder
    RecipientUserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
  }

  export type SharesMaxOrderByAggregateInput = {
    ShareId?: SortOrder
    SenderUserId?: SortOrder
    RecipientUserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
    CreatedAt?: SortOrder
  }

  export type SharesMinOrderByAggregateInput = {
    ShareId?: SortOrder
    SenderUserId?: SortOrder
    RecipientUserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
    CreatedAt?: SortOrder
  }

  export type SharesSumOrderByAggregateInput = {
    ShareId?: SortOrder
    SenderUserId?: SortOrder
    RecipientUserId?: SortOrder
    MovieId?: SortOrder
    SeriesId?: SortOrder
  }

  export type MovieCategoriesCountOrderByAggregateInput = {
    MovieCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCategoriesAvgOrderByAggregateInput = {
    MovieCategoryId?: SortOrder
  }

  export type MovieCategoriesMaxOrderByAggregateInput = {
    MovieCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCategoriesMinOrderByAggregateInput = {
    MovieCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCategoriesSumOrderByAggregateInput = {
    MovieCategoryId?: SortOrder
  }

  export type SeriesCategoriesCountOrderByAggregateInput = {
    SeriesCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCategoriesAvgOrderByAggregateInput = {
    SeriesCategoryId?: SortOrder
  }

  export type SeriesCategoriesMaxOrderByAggregateInput = {
    SeriesCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCategoriesMinOrderByAggregateInput = {
    SeriesCategoryId?: SortOrder
    Name?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCategoriesSumOrderByAggregateInput = {
    SeriesCategoryId?: SortOrder
  }

  export type MovieCategoriesRelationFilter = {
    is?: MovieCategoriesWhereInput
    isNot?: MovieCategoriesWhereInput
  }

  export type MovieCategoryRelationsCountOrderByAggregateInput = {
    MovieCategoryRelationId?: SortOrder
    MovieId?: SortOrder
    MovieCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCategoryRelationsAvgOrderByAggregateInput = {
    MovieCategoryRelationId?: SortOrder
    MovieId?: SortOrder
    MovieCategoryId?: SortOrder
  }

  export type MovieCategoryRelationsMaxOrderByAggregateInput = {
    MovieCategoryRelationId?: SortOrder
    MovieId?: SortOrder
    MovieCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCategoryRelationsMinOrderByAggregateInput = {
    MovieCategoryRelationId?: SortOrder
    MovieId?: SortOrder
    MovieCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type MovieCategoryRelationsSumOrderByAggregateInput = {
    MovieCategoryRelationId?: SortOrder
    MovieId?: SortOrder
    MovieCategoryId?: SortOrder
  }

  export type SeriesCategoriesRelationFilter = {
    is?: SeriesCategoriesWhereInput
    isNot?: SeriesCategoriesWhereInput
  }

  export type SeriesCategoryRelationsCountOrderByAggregateInput = {
    SeriesCategoryRelationId?: SortOrder
    SeriesId?: SortOrder
    SeriesCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCategoryRelationsAvgOrderByAggregateInput = {
    SeriesCategoryRelationId?: SortOrder
    SeriesId?: SortOrder
    SeriesCategoryId?: SortOrder
  }

  export type SeriesCategoryRelationsMaxOrderByAggregateInput = {
    SeriesCategoryRelationId?: SortOrder
    SeriesId?: SortOrder
    SeriesCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCategoryRelationsMinOrderByAggregateInput = {
    SeriesCategoryRelationId?: SortOrder
    SeriesId?: SortOrder
    SeriesCategoryId?: SortOrder
    CreatedAt?: SortOrder
    UpdatedAt?: SortOrder
  }

  export type SeriesCategoryRelationsSumOrderByAggregateInput = {
    SeriesCategoryRelationId?: SortOrder
    SeriesId?: SortOrder
    SeriesCategoryId?: SortOrder
  }

  export type MovieCommentsCreateNestedManyWithoutUserInput = {
    create?: XOR<MovieCommentsCreateWithoutUserInput, MovieCommentsUncheckedCreateWithoutUserInput> | MovieCommentsCreateWithoutUserInput[] | MovieCommentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieCommentsCreateOrConnectWithoutUserInput | MovieCommentsCreateOrConnectWithoutUserInput[]
    createMany?: MovieCommentsCreateManyUserInputEnvelope
    connect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
  }

  export type SeriesCommentsCreateNestedManyWithoutUserInput = {
    create?: XOR<SeriesCommentsCreateWithoutUserInput, SeriesCommentsUncheckedCreateWithoutUserInput> | SeriesCommentsCreateWithoutUserInput[] | SeriesCommentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesCommentsCreateOrConnectWithoutUserInput | SeriesCommentsCreateOrConnectWithoutUserInput[]
    createMany?: SeriesCommentsCreateManyUserInputEnvelope
    connect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
  }

  export type MovieRatingsCreateNestedManyWithoutUserInput = {
    create?: XOR<MovieRatingsCreateWithoutUserInput, MovieRatingsUncheckedCreateWithoutUserInput> | MovieRatingsCreateWithoutUserInput[] | MovieRatingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieRatingsCreateOrConnectWithoutUserInput | MovieRatingsCreateOrConnectWithoutUserInput[]
    createMany?: MovieRatingsCreateManyUserInputEnvelope
    connect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
  }

  export type SeriesRatingsCreateNestedManyWithoutUserInput = {
    create?: XOR<SeriesRatingsCreateWithoutUserInput, SeriesRatingsUncheckedCreateWithoutUserInput> | SeriesRatingsCreateWithoutUserInput[] | SeriesRatingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesRatingsCreateOrConnectWithoutUserInput | SeriesRatingsCreateOrConnectWithoutUserInput[]
    createMany?: SeriesRatingsCreateManyUserInputEnvelope
    connect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
  }

  export type MovieNotesCreateNestedManyWithoutUserInput = {
    create?: XOR<MovieNotesCreateWithoutUserInput, MovieNotesUncheckedCreateWithoutUserInput> | MovieNotesCreateWithoutUserInput[] | MovieNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieNotesCreateOrConnectWithoutUserInput | MovieNotesCreateOrConnectWithoutUserInput[]
    createMany?: MovieNotesCreateManyUserInputEnvelope
    connect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
  }

  export type SeriesNotesCreateNestedManyWithoutUserInput = {
    create?: XOR<SeriesNotesCreateWithoutUserInput, SeriesNotesUncheckedCreateWithoutUserInput> | SeriesNotesCreateWithoutUserInput[] | SeriesNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesNotesCreateOrConnectWithoutUserInput | SeriesNotesCreateOrConnectWithoutUserInput[]
    createMany?: SeriesNotesCreateManyUserInputEnvelope
    connect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
  }

  export type SchedulingCreateNestedManyWithoutUserInput = {
    create?: XOR<SchedulingCreateWithoutUserInput, SchedulingUncheckedCreateWithoutUserInput> | SchedulingCreateWithoutUserInput[] | SchedulingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutUserInput | SchedulingCreateOrConnectWithoutUserInput[]
    createMany?: SchedulingCreateManyUserInputEnvelope
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
  }

  export type SharesCreateNestedManyWithoutSenderUserInput = {
    create?: XOR<SharesCreateWithoutSenderUserInput, SharesUncheckedCreateWithoutSenderUserInput> | SharesCreateWithoutSenderUserInput[] | SharesUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutSenderUserInput | SharesCreateOrConnectWithoutSenderUserInput[]
    createMany?: SharesCreateManySenderUserInputEnvelope
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
  }

  export type SharesCreateNestedManyWithoutRecipientUserInput = {
    create?: XOR<SharesCreateWithoutRecipientUserInput, SharesUncheckedCreateWithoutRecipientUserInput> | SharesCreateWithoutRecipientUserInput[] | SharesUncheckedCreateWithoutRecipientUserInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutRecipientUserInput | SharesCreateOrConnectWithoutRecipientUserInput[]
    createMany?: SharesCreateManyRecipientUserInputEnvelope
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
  }

  export type MovieCommentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MovieCommentsCreateWithoutUserInput, MovieCommentsUncheckedCreateWithoutUserInput> | MovieCommentsCreateWithoutUserInput[] | MovieCommentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieCommentsCreateOrConnectWithoutUserInput | MovieCommentsCreateOrConnectWithoutUserInput[]
    createMany?: MovieCommentsCreateManyUserInputEnvelope
    connect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
  }

  export type SeriesCommentsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SeriesCommentsCreateWithoutUserInput, SeriesCommentsUncheckedCreateWithoutUserInput> | SeriesCommentsCreateWithoutUserInput[] | SeriesCommentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesCommentsCreateOrConnectWithoutUserInput | SeriesCommentsCreateOrConnectWithoutUserInput[]
    createMany?: SeriesCommentsCreateManyUserInputEnvelope
    connect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
  }

  export type MovieRatingsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MovieRatingsCreateWithoutUserInput, MovieRatingsUncheckedCreateWithoutUserInput> | MovieRatingsCreateWithoutUserInput[] | MovieRatingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieRatingsCreateOrConnectWithoutUserInput | MovieRatingsCreateOrConnectWithoutUserInput[]
    createMany?: MovieRatingsCreateManyUserInputEnvelope
    connect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
  }

  export type SeriesRatingsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SeriesRatingsCreateWithoutUserInput, SeriesRatingsUncheckedCreateWithoutUserInput> | SeriesRatingsCreateWithoutUserInput[] | SeriesRatingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesRatingsCreateOrConnectWithoutUserInput | SeriesRatingsCreateOrConnectWithoutUserInput[]
    createMany?: SeriesRatingsCreateManyUserInputEnvelope
    connect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
  }

  export type MovieNotesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MovieNotesCreateWithoutUserInput, MovieNotesUncheckedCreateWithoutUserInput> | MovieNotesCreateWithoutUserInput[] | MovieNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieNotesCreateOrConnectWithoutUserInput | MovieNotesCreateOrConnectWithoutUserInput[]
    createMany?: MovieNotesCreateManyUserInputEnvelope
    connect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
  }

  export type SeriesNotesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SeriesNotesCreateWithoutUserInput, SeriesNotesUncheckedCreateWithoutUserInput> | SeriesNotesCreateWithoutUserInput[] | SeriesNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesNotesCreateOrConnectWithoutUserInput | SeriesNotesCreateOrConnectWithoutUserInput[]
    createMany?: SeriesNotesCreateManyUserInputEnvelope
    connect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
  }

  export type SchedulingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SchedulingCreateWithoutUserInput, SchedulingUncheckedCreateWithoutUserInput> | SchedulingCreateWithoutUserInput[] | SchedulingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutUserInput | SchedulingCreateOrConnectWithoutUserInput[]
    createMany?: SchedulingCreateManyUserInputEnvelope
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
  }

  export type SharesUncheckedCreateNestedManyWithoutSenderUserInput = {
    create?: XOR<SharesCreateWithoutSenderUserInput, SharesUncheckedCreateWithoutSenderUserInput> | SharesCreateWithoutSenderUserInput[] | SharesUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutSenderUserInput | SharesCreateOrConnectWithoutSenderUserInput[]
    createMany?: SharesCreateManySenderUserInputEnvelope
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
  }

  export type SharesUncheckedCreateNestedManyWithoutRecipientUserInput = {
    create?: XOR<SharesCreateWithoutRecipientUserInput, SharesUncheckedCreateWithoutRecipientUserInput> | SharesCreateWithoutRecipientUserInput[] | SharesUncheckedCreateWithoutRecipientUserInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutRecipientUserInput | SharesCreateOrConnectWithoutRecipientUserInput[]
    createMany?: SharesCreateManyRecipientUserInputEnvelope
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MovieCommentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<MovieCommentsCreateWithoutUserInput, MovieCommentsUncheckedCreateWithoutUserInput> | MovieCommentsCreateWithoutUserInput[] | MovieCommentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieCommentsCreateOrConnectWithoutUserInput | MovieCommentsCreateOrConnectWithoutUserInput[]
    upsert?: MovieCommentsUpsertWithWhereUniqueWithoutUserInput | MovieCommentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MovieCommentsCreateManyUserInputEnvelope
    set?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    disconnect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    delete?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    connect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    update?: MovieCommentsUpdateWithWhereUniqueWithoutUserInput | MovieCommentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MovieCommentsUpdateManyWithWhereWithoutUserInput | MovieCommentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MovieCommentsScalarWhereInput | MovieCommentsScalarWhereInput[]
  }

  export type SeriesCommentsUpdateManyWithoutUserNestedInput = {
    create?: XOR<SeriesCommentsCreateWithoutUserInput, SeriesCommentsUncheckedCreateWithoutUserInput> | SeriesCommentsCreateWithoutUserInput[] | SeriesCommentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesCommentsCreateOrConnectWithoutUserInput | SeriesCommentsCreateOrConnectWithoutUserInput[]
    upsert?: SeriesCommentsUpsertWithWhereUniqueWithoutUserInput | SeriesCommentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SeriesCommentsCreateManyUserInputEnvelope
    set?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    disconnect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    delete?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    connect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    update?: SeriesCommentsUpdateWithWhereUniqueWithoutUserInput | SeriesCommentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SeriesCommentsUpdateManyWithWhereWithoutUserInput | SeriesCommentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SeriesCommentsScalarWhereInput | SeriesCommentsScalarWhereInput[]
  }

  export type MovieRatingsUpdateManyWithoutUserNestedInput = {
    create?: XOR<MovieRatingsCreateWithoutUserInput, MovieRatingsUncheckedCreateWithoutUserInput> | MovieRatingsCreateWithoutUserInput[] | MovieRatingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieRatingsCreateOrConnectWithoutUserInput | MovieRatingsCreateOrConnectWithoutUserInput[]
    upsert?: MovieRatingsUpsertWithWhereUniqueWithoutUserInput | MovieRatingsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MovieRatingsCreateManyUserInputEnvelope
    set?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    disconnect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    delete?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    connect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    update?: MovieRatingsUpdateWithWhereUniqueWithoutUserInput | MovieRatingsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MovieRatingsUpdateManyWithWhereWithoutUserInput | MovieRatingsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MovieRatingsScalarWhereInput | MovieRatingsScalarWhereInput[]
  }

  export type SeriesRatingsUpdateManyWithoutUserNestedInput = {
    create?: XOR<SeriesRatingsCreateWithoutUserInput, SeriesRatingsUncheckedCreateWithoutUserInput> | SeriesRatingsCreateWithoutUserInput[] | SeriesRatingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesRatingsCreateOrConnectWithoutUserInput | SeriesRatingsCreateOrConnectWithoutUserInput[]
    upsert?: SeriesRatingsUpsertWithWhereUniqueWithoutUserInput | SeriesRatingsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SeriesRatingsCreateManyUserInputEnvelope
    set?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    disconnect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    delete?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    connect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    update?: SeriesRatingsUpdateWithWhereUniqueWithoutUserInput | SeriesRatingsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SeriesRatingsUpdateManyWithWhereWithoutUserInput | SeriesRatingsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SeriesRatingsScalarWhereInput | SeriesRatingsScalarWhereInput[]
  }

  export type MovieNotesUpdateManyWithoutUserNestedInput = {
    create?: XOR<MovieNotesCreateWithoutUserInput, MovieNotesUncheckedCreateWithoutUserInput> | MovieNotesCreateWithoutUserInput[] | MovieNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieNotesCreateOrConnectWithoutUserInput | MovieNotesCreateOrConnectWithoutUserInput[]
    upsert?: MovieNotesUpsertWithWhereUniqueWithoutUserInput | MovieNotesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MovieNotesCreateManyUserInputEnvelope
    set?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    disconnect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    delete?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    connect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    update?: MovieNotesUpdateWithWhereUniqueWithoutUserInput | MovieNotesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MovieNotesUpdateManyWithWhereWithoutUserInput | MovieNotesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MovieNotesScalarWhereInput | MovieNotesScalarWhereInput[]
  }

  export type SeriesNotesUpdateManyWithoutUserNestedInput = {
    create?: XOR<SeriesNotesCreateWithoutUserInput, SeriesNotesUncheckedCreateWithoutUserInput> | SeriesNotesCreateWithoutUserInput[] | SeriesNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesNotesCreateOrConnectWithoutUserInput | SeriesNotesCreateOrConnectWithoutUserInput[]
    upsert?: SeriesNotesUpsertWithWhereUniqueWithoutUserInput | SeriesNotesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SeriesNotesCreateManyUserInputEnvelope
    set?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    disconnect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    delete?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    connect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    update?: SeriesNotesUpdateWithWhereUniqueWithoutUserInput | SeriesNotesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SeriesNotesUpdateManyWithWhereWithoutUserInput | SeriesNotesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SeriesNotesScalarWhereInput | SeriesNotesScalarWhereInput[]
  }

  export type SchedulingUpdateManyWithoutUserNestedInput = {
    create?: XOR<SchedulingCreateWithoutUserInput, SchedulingUncheckedCreateWithoutUserInput> | SchedulingCreateWithoutUserInput[] | SchedulingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutUserInput | SchedulingCreateOrConnectWithoutUserInput[]
    upsert?: SchedulingUpsertWithWhereUniqueWithoutUserInput | SchedulingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SchedulingCreateManyUserInputEnvelope
    set?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    disconnect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    delete?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    update?: SchedulingUpdateWithWhereUniqueWithoutUserInput | SchedulingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SchedulingUpdateManyWithWhereWithoutUserInput | SchedulingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SchedulingScalarWhereInput | SchedulingScalarWhereInput[]
  }

  export type SharesUpdateManyWithoutSenderUserNestedInput = {
    create?: XOR<SharesCreateWithoutSenderUserInput, SharesUncheckedCreateWithoutSenderUserInput> | SharesCreateWithoutSenderUserInput[] | SharesUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutSenderUserInput | SharesCreateOrConnectWithoutSenderUserInput[]
    upsert?: SharesUpsertWithWhereUniqueWithoutSenderUserInput | SharesUpsertWithWhereUniqueWithoutSenderUserInput[]
    createMany?: SharesCreateManySenderUserInputEnvelope
    set?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    disconnect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    delete?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    update?: SharesUpdateWithWhereUniqueWithoutSenderUserInput | SharesUpdateWithWhereUniqueWithoutSenderUserInput[]
    updateMany?: SharesUpdateManyWithWhereWithoutSenderUserInput | SharesUpdateManyWithWhereWithoutSenderUserInput[]
    deleteMany?: SharesScalarWhereInput | SharesScalarWhereInput[]
  }

  export type SharesUpdateManyWithoutRecipientUserNestedInput = {
    create?: XOR<SharesCreateWithoutRecipientUserInput, SharesUncheckedCreateWithoutRecipientUserInput> | SharesCreateWithoutRecipientUserInput[] | SharesUncheckedCreateWithoutRecipientUserInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutRecipientUserInput | SharesCreateOrConnectWithoutRecipientUserInput[]
    upsert?: SharesUpsertWithWhereUniqueWithoutRecipientUserInput | SharesUpsertWithWhereUniqueWithoutRecipientUserInput[]
    createMany?: SharesCreateManyRecipientUserInputEnvelope
    set?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    disconnect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    delete?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    update?: SharesUpdateWithWhereUniqueWithoutRecipientUserInput | SharesUpdateWithWhereUniqueWithoutRecipientUserInput[]
    updateMany?: SharesUpdateManyWithWhereWithoutRecipientUserInput | SharesUpdateManyWithWhereWithoutRecipientUserInput[]
    deleteMany?: SharesScalarWhereInput | SharesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MovieCommentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MovieCommentsCreateWithoutUserInput, MovieCommentsUncheckedCreateWithoutUserInput> | MovieCommentsCreateWithoutUserInput[] | MovieCommentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieCommentsCreateOrConnectWithoutUserInput | MovieCommentsCreateOrConnectWithoutUserInput[]
    upsert?: MovieCommentsUpsertWithWhereUniqueWithoutUserInput | MovieCommentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MovieCommentsCreateManyUserInputEnvelope
    set?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    disconnect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    delete?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    connect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    update?: MovieCommentsUpdateWithWhereUniqueWithoutUserInput | MovieCommentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MovieCommentsUpdateManyWithWhereWithoutUserInput | MovieCommentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MovieCommentsScalarWhereInput | MovieCommentsScalarWhereInput[]
  }

  export type SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SeriesCommentsCreateWithoutUserInput, SeriesCommentsUncheckedCreateWithoutUserInput> | SeriesCommentsCreateWithoutUserInput[] | SeriesCommentsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesCommentsCreateOrConnectWithoutUserInput | SeriesCommentsCreateOrConnectWithoutUserInput[]
    upsert?: SeriesCommentsUpsertWithWhereUniqueWithoutUserInput | SeriesCommentsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SeriesCommentsCreateManyUserInputEnvelope
    set?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    disconnect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    delete?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    connect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    update?: SeriesCommentsUpdateWithWhereUniqueWithoutUserInput | SeriesCommentsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SeriesCommentsUpdateManyWithWhereWithoutUserInput | SeriesCommentsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SeriesCommentsScalarWhereInput | SeriesCommentsScalarWhereInput[]
  }

  export type MovieRatingsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MovieRatingsCreateWithoutUserInput, MovieRatingsUncheckedCreateWithoutUserInput> | MovieRatingsCreateWithoutUserInput[] | MovieRatingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieRatingsCreateOrConnectWithoutUserInput | MovieRatingsCreateOrConnectWithoutUserInput[]
    upsert?: MovieRatingsUpsertWithWhereUniqueWithoutUserInput | MovieRatingsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MovieRatingsCreateManyUserInputEnvelope
    set?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    disconnect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    delete?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    connect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    update?: MovieRatingsUpdateWithWhereUniqueWithoutUserInput | MovieRatingsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MovieRatingsUpdateManyWithWhereWithoutUserInput | MovieRatingsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MovieRatingsScalarWhereInput | MovieRatingsScalarWhereInput[]
  }

  export type SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SeriesRatingsCreateWithoutUserInput, SeriesRatingsUncheckedCreateWithoutUserInput> | SeriesRatingsCreateWithoutUserInput[] | SeriesRatingsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesRatingsCreateOrConnectWithoutUserInput | SeriesRatingsCreateOrConnectWithoutUserInput[]
    upsert?: SeriesRatingsUpsertWithWhereUniqueWithoutUserInput | SeriesRatingsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SeriesRatingsCreateManyUserInputEnvelope
    set?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    disconnect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    delete?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    connect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    update?: SeriesRatingsUpdateWithWhereUniqueWithoutUserInput | SeriesRatingsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SeriesRatingsUpdateManyWithWhereWithoutUserInput | SeriesRatingsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SeriesRatingsScalarWhereInput | SeriesRatingsScalarWhereInput[]
  }

  export type MovieNotesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MovieNotesCreateWithoutUserInput, MovieNotesUncheckedCreateWithoutUserInput> | MovieNotesCreateWithoutUserInput[] | MovieNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MovieNotesCreateOrConnectWithoutUserInput | MovieNotesCreateOrConnectWithoutUserInput[]
    upsert?: MovieNotesUpsertWithWhereUniqueWithoutUserInput | MovieNotesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MovieNotesCreateManyUserInputEnvelope
    set?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    disconnect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    delete?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    connect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    update?: MovieNotesUpdateWithWhereUniqueWithoutUserInput | MovieNotesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MovieNotesUpdateManyWithWhereWithoutUserInput | MovieNotesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MovieNotesScalarWhereInput | MovieNotesScalarWhereInput[]
  }

  export type SeriesNotesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SeriesNotesCreateWithoutUserInput, SeriesNotesUncheckedCreateWithoutUserInput> | SeriesNotesCreateWithoutUserInput[] | SeriesNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SeriesNotesCreateOrConnectWithoutUserInput | SeriesNotesCreateOrConnectWithoutUserInput[]
    upsert?: SeriesNotesUpsertWithWhereUniqueWithoutUserInput | SeriesNotesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SeriesNotesCreateManyUserInputEnvelope
    set?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    disconnect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    delete?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    connect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    update?: SeriesNotesUpdateWithWhereUniqueWithoutUserInput | SeriesNotesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SeriesNotesUpdateManyWithWhereWithoutUserInput | SeriesNotesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SeriesNotesScalarWhereInput | SeriesNotesScalarWhereInput[]
  }

  export type SchedulingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SchedulingCreateWithoutUserInput, SchedulingUncheckedCreateWithoutUserInput> | SchedulingCreateWithoutUserInput[] | SchedulingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutUserInput | SchedulingCreateOrConnectWithoutUserInput[]
    upsert?: SchedulingUpsertWithWhereUniqueWithoutUserInput | SchedulingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SchedulingCreateManyUserInputEnvelope
    set?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    disconnect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    delete?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    update?: SchedulingUpdateWithWhereUniqueWithoutUserInput | SchedulingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SchedulingUpdateManyWithWhereWithoutUserInput | SchedulingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SchedulingScalarWhereInput | SchedulingScalarWhereInput[]
  }

  export type SharesUncheckedUpdateManyWithoutSenderUserNestedInput = {
    create?: XOR<SharesCreateWithoutSenderUserInput, SharesUncheckedCreateWithoutSenderUserInput> | SharesCreateWithoutSenderUserInput[] | SharesUncheckedCreateWithoutSenderUserInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutSenderUserInput | SharesCreateOrConnectWithoutSenderUserInput[]
    upsert?: SharesUpsertWithWhereUniqueWithoutSenderUserInput | SharesUpsertWithWhereUniqueWithoutSenderUserInput[]
    createMany?: SharesCreateManySenderUserInputEnvelope
    set?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    disconnect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    delete?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    update?: SharesUpdateWithWhereUniqueWithoutSenderUserInput | SharesUpdateWithWhereUniqueWithoutSenderUserInput[]
    updateMany?: SharesUpdateManyWithWhereWithoutSenderUserInput | SharesUpdateManyWithWhereWithoutSenderUserInput[]
    deleteMany?: SharesScalarWhereInput | SharesScalarWhereInput[]
  }

  export type SharesUncheckedUpdateManyWithoutRecipientUserNestedInput = {
    create?: XOR<SharesCreateWithoutRecipientUserInput, SharesUncheckedCreateWithoutRecipientUserInput> | SharesCreateWithoutRecipientUserInput[] | SharesUncheckedCreateWithoutRecipientUserInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutRecipientUserInput | SharesCreateOrConnectWithoutRecipientUserInput[]
    upsert?: SharesUpsertWithWhereUniqueWithoutRecipientUserInput | SharesUpsertWithWhereUniqueWithoutRecipientUserInput[]
    createMany?: SharesCreateManyRecipientUserInputEnvelope
    set?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    disconnect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    delete?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    update?: SharesUpdateWithWhereUniqueWithoutRecipientUserInput | SharesUpdateWithWhereUniqueWithoutRecipientUserInput[]
    updateMany?: SharesUpdateManyWithWhereWithoutRecipientUserInput | SharesUpdateManyWithWhereWithoutRecipientUserInput[]
    deleteMany?: SharesScalarWhereInput | SharesScalarWhereInput[]
  }

  export type MovieRatingsCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieRatingsCreateWithoutMovieInput, MovieRatingsUncheckedCreateWithoutMovieInput> | MovieRatingsCreateWithoutMovieInput[] | MovieRatingsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieRatingsCreateOrConnectWithoutMovieInput | MovieRatingsCreateOrConnectWithoutMovieInput[]
    createMany?: MovieRatingsCreateManyMovieInputEnvelope
    connect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
  }

  export type MovieCommentsCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieCommentsCreateWithoutMovieInput, MovieCommentsUncheckedCreateWithoutMovieInput> | MovieCommentsCreateWithoutMovieInput[] | MovieCommentsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieCommentsCreateOrConnectWithoutMovieInput | MovieCommentsCreateOrConnectWithoutMovieInput[]
    createMany?: MovieCommentsCreateManyMovieInputEnvelope
    connect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
  }

  export type MovieNotesCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieNotesCreateWithoutMovieInput, MovieNotesUncheckedCreateWithoutMovieInput> | MovieNotesCreateWithoutMovieInput[] | MovieNotesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieNotesCreateOrConnectWithoutMovieInput | MovieNotesCreateOrConnectWithoutMovieInput[]
    createMany?: MovieNotesCreateManyMovieInputEnvelope
    connect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
  }

  export type SchedulingCreateNestedManyWithoutMovieInput = {
    create?: XOR<SchedulingCreateWithoutMovieInput, SchedulingUncheckedCreateWithoutMovieInput> | SchedulingCreateWithoutMovieInput[] | SchedulingUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutMovieInput | SchedulingCreateOrConnectWithoutMovieInput[]
    createMany?: SchedulingCreateManyMovieInputEnvelope
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
  }

  export type MovieCategoryRelationsCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieCategoryRelationsCreateWithoutMovieInput, MovieCategoryRelationsUncheckedCreateWithoutMovieInput> | MovieCategoryRelationsCreateWithoutMovieInput[] | MovieCategoryRelationsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieCategoryRelationsCreateOrConnectWithoutMovieInput | MovieCategoryRelationsCreateOrConnectWithoutMovieInput[]
    createMany?: MovieCategoryRelationsCreateManyMovieInputEnvelope
    connect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
  }

  export type SharesCreateNestedManyWithoutMovieInput = {
    create?: XOR<SharesCreateWithoutMovieInput, SharesUncheckedCreateWithoutMovieInput> | SharesCreateWithoutMovieInput[] | SharesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutMovieInput | SharesCreateOrConnectWithoutMovieInput[]
    createMany?: SharesCreateManyMovieInputEnvelope
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
  }

  export type MovieRatingsUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieRatingsCreateWithoutMovieInput, MovieRatingsUncheckedCreateWithoutMovieInput> | MovieRatingsCreateWithoutMovieInput[] | MovieRatingsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieRatingsCreateOrConnectWithoutMovieInput | MovieRatingsCreateOrConnectWithoutMovieInput[]
    createMany?: MovieRatingsCreateManyMovieInputEnvelope
    connect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
  }

  export type MovieCommentsUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieCommentsCreateWithoutMovieInput, MovieCommentsUncheckedCreateWithoutMovieInput> | MovieCommentsCreateWithoutMovieInput[] | MovieCommentsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieCommentsCreateOrConnectWithoutMovieInput | MovieCommentsCreateOrConnectWithoutMovieInput[]
    createMany?: MovieCommentsCreateManyMovieInputEnvelope
    connect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
  }

  export type MovieNotesUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieNotesCreateWithoutMovieInput, MovieNotesUncheckedCreateWithoutMovieInput> | MovieNotesCreateWithoutMovieInput[] | MovieNotesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieNotesCreateOrConnectWithoutMovieInput | MovieNotesCreateOrConnectWithoutMovieInput[]
    createMany?: MovieNotesCreateManyMovieInputEnvelope
    connect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
  }

  export type SchedulingUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<SchedulingCreateWithoutMovieInput, SchedulingUncheckedCreateWithoutMovieInput> | SchedulingCreateWithoutMovieInput[] | SchedulingUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutMovieInput | SchedulingCreateOrConnectWithoutMovieInput[]
    createMany?: SchedulingCreateManyMovieInputEnvelope
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
  }

  export type MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<MovieCategoryRelationsCreateWithoutMovieInput, MovieCategoryRelationsUncheckedCreateWithoutMovieInput> | MovieCategoryRelationsCreateWithoutMovieInput[] | MovieCategoryRelationsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieCategoryRelationsCreateOrConnectWithoutMovieInput | MovieCategoryRelationsCreateOrConnectWithoutMovieInput[]
    createMany?: MovieCategoryRelationsCreateManyMovieInputEnvelope
    connect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
  }

  export type SharesUncheckedCreateNestedManyWithoutMovieInput = {
    create?: XOR<SharesCreateWithoutMovieInput, SharesUncheckedCreateWithoutMovieInput> | SharesCreateWithoutMovieInput[] | SharesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutMovieInput | SharesCreateOrConnectWithoutMovieInput[]
    createMany?: SharesCreateManyMovieInputEnvelope
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type MovieRatingsUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieRatingsCreateWithoutMovieInput, MovieRatingsUncheckedCreateWithoutMovieInput> | MovieRatingsCreateWithoutMovieInput[] | MovieRatingsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieRatingsCreateOrConnectWithoutMovieInput | MovieRatingsCreateOrConnectWithoutMovieInput[]
    upsert?: MovieRatingsUpsertWithWhereUniqueWithoutMovieInput | MovieRatingsUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieRatingsCreateManyMovieInputEnvelope
    set?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    disconnect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    delete?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    connect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    update?: MovieRatingsUpdateWithWhereUniqueWithoutMovieInput | MovieRatingsUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieRatingsUpdateManyWithWhereWithoutMovieInput | MovieRatingsUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieRatingsScalarWhereInput | MovieRatingsScalarWhereInput[]
  }

  export type MovieCommentsUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieCommentsCreateWithoutMovieInput, MovieCommentsUncheckedCreateWithoutMovieInput> | MovieCommentsCreateWithoutMovieInput[] | MovieCommentsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieCommentsCreateOrConnectWithoutMovieInput | MovieCommentsCreateOrConnectWithoutMovieInput[]
    upsert?: MovieCommentsUpsertWithWhereUniqueWithoutMovieInput | MovieCommentsUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieCommentsCreateManyMovieInputEnvelope
    set?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    disconnect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    delete?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    connect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    update?: MovieCommentsUpdateWithWhereUniqueWithoutMovieInput | MovieCommentsUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieCommentsUpdateManyWithWhereWithoutMovieInput | MovieCommentsUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieCommentsScalarWhereInput | MovieCommentsScalarWhereInput[]
  }

  export type MovieNotesUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieNotesCreateWithoutMovieInput, MovieNotesUncheckedCreateWithoutMovieInput> | MovieNotesCreateWithoutMovieInput[] | MovieNotesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieNotesCreateOrConnectWithoutMovieInput | MovieNotesCreateOrConnectWithoutMovieInput[]
    upsert?: MovieNotesUpsertWithWhereUniqueWithoutMovieInput | MovieNotesUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieNotesCreateManyMovieInputEnvelope
    set?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    disconnect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    delete?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    connect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    update?: MovieNotesUpdateWithWhereUniqueWithoutMovieInput | MovieNotesUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieNotesUpdateManyWithWhereWithoutMovieInput | MovieNotesUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieNotesScalarWhereInput | MovieNotesScalarWhereInput[]
  }

  export type SchedulingUpdateManyWithoutMovieNestedInput = {
    create?: XOR<SchedulingCreateWithoutMovieInput, SchedulingUncheckedCreateWithoutMovieInput> | SchedulingCreateWithoutMovieInput[] | SchedulingUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutMovieInput | SchedulingCreateOrConnectWithoutMovieInput[]
    upsert?: SchedulingUpsertWithWhereUniqueWithoutMovieInput | SchedulingUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: SchedulingCreateManyMovieInputEnvelope
    set?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    disconnect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    delete?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    update?: SchedulingUpdateWithWhereUniqueWithoutMovieInput | SchedulingUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: SchedulingUpdateManyWithWhereWithoutMovieInput | SchedulingUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: SchedulingScalarWhereInput | SchedulingScalarWhereInput[]
  }

  export type MovieCategoryRelationsUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieCategoryRelationsCreateWithoutMovieInput, MovieCategoryRelationsUncheckedCreateWithoutMovieInput> | MovieCategoryRelationsCreateWithoutMovieInput[] | MovieCategoryRelationsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieCategoryRelationsCreateOrConnectWithoutMovieInput | MovieCategoryRelationsCreateOrConnectWithoutMovieInput[]
    upsert?: MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieInput | MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieCategoryRelationsCreateManyMovieInputEnvelope
    set?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    disconnect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    delete?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    connect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    update?: MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieInput | MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieCategoryRelationsUpdateManyWithWhereWithoutMovieInput | MovieCategoryRelationsUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieCategoryRelationsScalarWhereInput | MovieCategoryRelationsScalarWhereInput[]
  }

  export type SharesUpdateManyWithoutMovieNestedInput = {
    create?: XOR<SharesCreateWithoutMovieInput, SharesUncheckedCreateWithoutMovieInput> | SharesCreateWithoutMovieInput[] | SharesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutMovieInput | SharesCreateOrConnectWithoutMovieInput[]
    upsert?: SharesUpsertWithWhereUniqueWithoutMovieInput | SharesUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: SharesCreateManyMovieInputEnvelope
    set?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    disconnect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    delete?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    update?: SharesUpdateWithWhereUniqueWithoutMovieInput | SharesUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: SharesUpdateManyWithWhereWithoutMovieInput | SharesUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: SharesScalarWhereInput | SharesScalarWhereInput[]
  }

  export type MovieRatingsUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieRatingsCreateWithoutMovieInput, MovieRatingsUncheckedCreateWithoutMovieInput> | MovieRatingsCreateWithoutMovieInput[] | MovieRatingsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieRatingsCreateOrConnectWithoutMovieInput | MovieRatingsCreateOrConnectWithoutMovieInput[]
    upsert?: MovieRatingsUpsertWithWhereUniqueWithoutMovieInput | MovieRatingsUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieRatingsCreateManyMovieInputEnvelope
    set?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    disconnect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    delete?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    connect?: MovieRatingsWhereUniqueInput | MovieRatingsWhereUniqueInput[]
    update?: MovieRatingsUpdateWithWhereUniqueWithoutMovieInput | MovieRatingsUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieRatingsUpdateManyWithWhereWithoutMovieInput | MovieRatingsUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieRatingsScalarWhereInput | MovieRatingsScalarWhereInput[]
  }

  export type MovieCommentsUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieCommentsCreateWithoutMovieInput, MovieCommentsUncheckedCreateWithoutMovieInput> | MovieCommentsCreateWithoutMovieInput[] | MovieCommentsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieCommentsCreateOrConnectWithoutMovieInput | MovieCommentsCreateOrConnectWithoutMovieInput[]
    upsert?: MovieCommentsUpsertWithWhereUniqueWithoutMovieInput | MovieCommentsUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieCommentsCreateManyMovieInputEnvelope
    set?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    disconnect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    delete?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    connect?: MovieCommentsWhereUniqueInput | MovieCommentsWhereUniqueInput[]
    update?: MovieCommentsUpdateWithWhereUniqueWithoutMovieInput | MovieCommentsUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieCommentsUpdateManyWithWhereWithoutMovieInput | MovieCommentsUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieCommentsScalarWhereInput | MovieCommentsScalarWhereInput[]
  }

  export type MovieNotesUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieNotesCreateWithoutMovieInput, MovieNotesUncheckedCreateWithoutMovieInput> | MovieNotesCreateWithoutMovieInput[] | MovieNotesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieNotesCreateOrConnectWithoutMovieInput | MovieNotesCreateOrConnectWithoutMovieInput[]
    upsert?: MovieNotesUpsertWithWhereUniqueWithoutMovieInput | MovieNotesUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieNotesCreateManyMovieInputEnvelope
    set?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    disconnect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    delete?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    connect?: MovieNotesWhereUniqueInput | MovieNotesWhereUniqueInput[]
    update?: MovieNotesUpdateWithWhereUniqueWithoutMovieInput | MovieNotesUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieNotesUpdateManyWithWhereWithoutMovieInput | MovieNotesUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieNotesScalarWhereInput | MovieNotesScalarWhereInput[]
  }

  export type SchedulingUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<SchedulingCreateWithoutMovieInput, SchedulingUncheckedCreateWithoutMovieInput> | SchedulingCreateWithoutMovieInput[] | SchedulingUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutMovieInput | SchedulingCreateOrConnectWithoutMovieInput[]
    upsert?: SchedulingUpsertWithWhereUniqueWithoutMovieInput | SchedulingUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: SchedulingCreateManyMovieInputEnvelope
    set?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    disconnect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    delete?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    update?: SchedulingUpdateWithWhereUniqueWithoutMovieInput | SchedulingUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: SchedulingUpdateManyWithWhereWithoutMovieInput | SchedulingUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: SchedulingScalarWhereInput | SchedulingScalarWhereInput[]
  }

  export type MovieCategoryRelationsUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<MovieCategoryRelationsCreateWithoutMovieInput, MovieCategoryRelationsUncheckedCreateWithoutMovieInput> | MovieCategoryRelationsCreateWithoutMovieInput[] | MovieCategoryRelationsUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: MovieCategoryRelationsCreateOrConnectWithoutMovieInput | MovieCategoryRelationsCreateOrConnectWithoutMovieInput[]
    upsert?: MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieInput | MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: MovieCategoryRelationsCreateManyMovieInputEnvelope
    set?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    disconnect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    delete?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    connect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    update?: MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieInput | MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: MovieCategoryRelationsUpdateManyWithWhereWithoutMovieInput | MovieCategoryRelationsUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: MovieCategoryRelationsScalarWhereInput | MovieCategoryRelationsScalarWhereInput[]
  }

  export type SharesUncheckedUpdateManyWithoutMovieNestedInput = {
    create?: XOR<SharesCreateWithoutMovieInput, SharesUncheckedCreateWithoutMovieInput> | SharesCreateWithoutMovieInput[] | SharesUncheckedCreateWithoutMovieInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutMovieInput | SharesCreateOrConnectWithoutMovieInput[]
    upsert?: SharesUpsertWithWhereUniqueWithoutMovieInput | SharesUpsertWithWhereUniqueWithoutMovieInput[]
    createMany?: SharesCreateManyMovieInputEnvelope
    set?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    disconnect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    delete?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    update?: SharesUpdateWithWhereUniqueWithoutMovieInput | SharesUpdateWithWhereUniqueWithoutMovieInput[]
    updateMany?: SharesUpdateManyWithWhereWithoutMovieInput | SharesUpdateManyWithWhereWithoutMovieInput[]
    deleteMany?: SharesScalarWhereInput | SharesScalarWhereInput[]
  }

  export type SeriesRatingsCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SeriesRatingsCreateWithoutSeriesInput, SeriesRatingsUncheckedCreateWithoutSeriesInput> | SeriesRatingsCreateWithoutSeriesInput[] | SeriesRatingsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesRatingsCreateOrConnectWithoutSeriesInput | SeriesRatingsCreateOrConnectWithoutSeriesInput[]
    createMany?: SeriesRatingsCreateManySeriesInputEnvelope
    connect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
  }

  export type SeriesCommentsCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SeriesCommentsCreateWithoutSeriesInput, SeriesCommentsUncheckedCreateWithoutSeriesInput> | SeriesCommentsCreateWithoutSeriesInput[] | SeriesCommentsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesCommentsCreateOrConnectWithoutSeriesInput | SeriesCommentsCreateOrConnectWithoutSeriesInput[]
    createMany?: SeriesCommentsCreateManySeriesInputEnvelope
    connect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
  }

  export type SeriesNotesCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SeriesNotesCreateWithoutSeriesInput, SeriesNotesUncheckedCreateWithoutSeriesInput> | SeriesNotesCreateWithoutSeriesInput[] | SeriesNotesUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesNotesCreateOrConnectWithoutSeriesInput | SeriesNotesCreateOrConnectWithoutSeriesInput[]
    createMany?: SeriesNotesCreateManySeriesInputEnvelope
    connect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
  }

  export type SchedulingCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SchedulingCreateWithoutSeriesInput, SchedulingUncheckedCreateWithoutSeriesInput> | SchedulingCreateWithoutSeriesInput[] | SchedulingUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutSeriesInput | SchedulingCreateOrConnectWithoutSeriesInput[]
    createMany?: SchedulingCreateManySeriesInputEnvelope
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
  }

  export type SeriesCategoryRelationsCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SeriesCategoryRelationsCreateWithoutSeriesInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput> | SeriesCategoryRelationsCreateWithoutSeriesInput[] | SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput | SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput[]
    createMany?: SeriesCategoryRelationsCreateManySeriesInputEnvelope
    connect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
  }

  export type SharesCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SharesCreateWithoutSeriesInput, SharesUncheckedCreateWithoutSeriesInput> | SharesCreateWithoutSeriesInput[] | SharesUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutSeriesInput | SharesCreateOrConnectWithoutSeriesInput[]
    createMany?: SharesCreateManySeriesInputEnvelope
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
  }

  export type SeriesRatingsUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SeriesRatingsCreateWithoutSeriesInput, SeriesRatingsUncheckedCreateWithoutSeriesInput> | SeriesRatingsCreateWithoutSeriesInput[] | SeriesRatingsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesRatingsCreateOrConnectWithoutSeriesInput | SeriesRatingsCreateOrConnectWithoutSeriesInput[]
    createMany?: SeriesRatingsCreateManySeriesInputEnvelope
    connect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
  }

  export type SeriesCommentsUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SeriesCommentsCreateWithoutSeriesInput, SeriesCommentsUncheckedCreateWithoutSeriesInput> | SeriesCommentsCreateWithoutSeriesInput[] | SeriesCommentsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesCommentsCreateOrConnectWithoutSeriesInput | SeriesCommentsCreateOrConnectWithoutSeriesInput[]
    createMany?: SeriesCommentsCreateManySeriesInputEnvelope
    connect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
  }

  export type SeriesNotesUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SeriesNotesCreateWithoutSeriesInput, SeriesNotesUncheckedCreateWithoutSeriesInput> | SeriesNotesCreateWithoutSeriesInput[] | SeriesNotesUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesNotesCreateOrConnectWithoutSeriesInput | SeriesNotesCreateOrConnectWithoutSeriesInput[]
    createMany?: SeriesNotesCreateManySeriesInputEnvelope
    connect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
  }

  export type SchedulingUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SchedulingCreateWithoutSeriesInput, SchedulingUncheckedCreateWithoutSeriesInput> | SchedulingCreateWithoutSeriesInput[] | SchedulingUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutSeriesInput | SchedulingCreateOrConnectWithoutSeriesInput[]
    createMany?: SchedulingCreateManySeriesInputEnvelope
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
  }

  export type SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SeriesCategoryRelationsCreateWithoutSeriesInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput> | SeriesCategoryRelationsCreateWithoutSeriesInput[] | SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput | SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput[]
    createMany?: SeriesCategoryRelationsCreateManySeriesInputEnvelope
    connect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
  }

  export type SharesUncheckedCreateNestedManyWithoutSeriesInput = {
    create?: XOR<SharesCreateWithoutSeriesInput, SharesUncheckedCreateWithoutSeriesInput> | SharesCreateWithoutSeriesInput[] | SharesUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutSeriesInput | SharesCreateOrConnectWithoutSeriesInput[]
    createMany?: SharesCreateManySeriesInputEnvelope
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
  }

  export type SeriesRatingsUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SeriesRatingsCreateWithoutSeriesInput, SeriesRatingsUncheckedCreateWithoutSeriesInput> | SeriesRatingsCreateWithoutSeriesInput[] | SeriesRatingsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesRatingsCreateOrConnectWithoutSeriesInput | SeriesRatingsCreateOrConnectWithoutSeriesInput[]
    upsert?: SeriesRatingsUpsertWithWhereUniqueWithoutSeriesInput | SeriesRatingsUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SeriesRatingsCreateManySeriesInputEnvelope
    set?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    disconnect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    delete?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    connect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    update?: SeriesRatingsUpdateWithWhereUniqueWithoutSeriesInput | SeriesRatingsUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SeriesRatingsUpdateManyWithWhereWithoutSeriesInput | SeriesRatingsUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SeriesRatingsScalarWhereInput | SeriesRatingsScalarWhereInput[]
  }

  export type SeriesCommentsUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SeriesCommentsCreateWithoutSeriesInput, SeriesCommentsUncheckedCreateWithoutSeriesInput> | SeriesCommentsCreateWithoutSeriesInput[] | SeriesCommentsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesCommentsCreateOrConnectWithoutSeriesInput | SeriesCommentsCreateOrConnectWithoutSeriesInput[]
    upsert?: SeriesCommentsUpsertWithWhereUniqueWithoutSeriesInput | SeriesCommentsUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SeriesCommentsCreateManySeriesInputEnvelope
    set?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    disconnect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    delete?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    connect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    update?: SeriesCommentsUpdateWithWhereUniqueWithoutSeriesInput | SeriesCommentsUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SeriesCommentsUpdateManyWithWhereWithoutSeriesInput | SeriesCommentsUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SeriesCommentsScalarWhereInput | SeriesCommentsScalarWhereInput[]
  }

  export type SeriesNotesUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SeriesNotesCreateWithoutSeriesInput, SeriesNotesUncheckedCreateWithoutSeriesInput> | SeriesNotesCreateWithoutSeriesInput[] | SeriesNotesUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesNotesCreateOrConnectWithoutSeriesInput | SeriesNotesCreateOrConnectWithoutSeriesInput[]
    upsert?: SeriesNotesUpsertWithWhereUniqueWithoutSeriesInput | SeriesNotesUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SeriesNotesCreateManySeriesInputEnvelope
    set?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    disconnect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    delete?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    connect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    update?: SeriesNotesUpdateWithWhereUniqueWithoutSeriesInput | SeriesNotesUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SeriesNotesUpdateManyWithWhereWithoutSeriesInput | SeriesNotesUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SeriesNotesScalarWhereInput | SeriesNotesScalarWhereInput[]
  }

  export type SchedulingUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SchedulingCreateWithoutSeriesInput, SchedulingUncheckedCreateWithoutSeriesInput> | SchedulingCreateWithoutSeriesInput[] | SchedulingUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutSeriesInput | SchedulingCreateOrConnectWithoutSeriesInput[]
    upsert?: SchedulingUpsertWithWhereUniqueWithoutSeriesInput | SchedulingUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SchedulingCreateManySeriesInputEnvelope
    set?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    disconnect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    delete?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    update?: SchedulingUpdateWithWhereUniqueWithoutSeriesInput | SchedulingUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SchedulingUpdateManyWithWhereWithoutSeriesInput | SchedulingUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SchedulingScalarWhereInput | SchedulingScalarWhereInput[]
  }

  export type SeriesCategoryRelationsUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SeriesCategoryRelationsCreateWithoutSeriesInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput> | SeriesCategoryRelationsCreateWithoutSeriesInput[] | SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput | SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput[]
    upsert?: SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesInput | SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SeriesCategoryRelationsCreateManySeriesInputEnvelope
    set?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    disconnect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    delete?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    connect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    update?: SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesInput | SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesInput | SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SeriesCategoryRelationsScalarWhereInput | SeriesCategoryRelationsScalarWhereInput[]
  }

  export type SharesUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SharesCreateWithoutSeriesInput, SharesUncheckedCreateWithoutSeriesInput> | SharesCreateWithoutSeriesInput[] | SharesUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutSeriesInput | SharesCreateOrConnectWithoutSeriesInput[]
    upsert?: SharesUpsertWithWhereUniqueWithoutSeriesInput | SharesUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SharesCreateManySeriesInputEnvelope
    set?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    disconnect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    delete?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    update?: SharesUpdateWithWhereUniqueWithoutSeriesInput | SharesUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SharesUpdateManyWithWhereWithoutSeriesInput | SharesUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SharesScalarWhereInput | SharesScalarWhereInput[]
  }

  export type SeriesRatingsUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SeriesRatingsCreateWithoutSeriesInput, SeriesRatingsUncheckedCreateWithoutSeriesInput> | SeriesRatingsCreateWithoutSeriesInput[] | SeriesRatingsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesRatingsCreateOrConnectWithoutSeriesInput | SeriesRatingsCreateOrConnectWithoutSeriesInput[]
    upsert?: SeriesRatingsUpsertWithWhereUniqueWithoutSeriesInput | SeriesRatingsUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SeriesRatingsCreateManySeriesInputEnvelope
    set?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    disconnect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    delete?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    connect?: SeriesRatingsWhereUniqueInput | SeriesRatingsWhereUniqueInput[]
    update?: SeriesRatingsUpdateWithWhereUniqueWithoutSeriesInput | SeriesRatingsUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SeriesRatingsUpdateManyWithWhereWithoutSeriesInput | SeriesRatingsUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SeriesRatingsScalarWhereInput | SeriesRatingsScalarWhereInput[]
  }

  export type SeriesCommentsUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SeriesCommentsCreateWithoutSeriesInput, SeriesCommentsUncheckedCreateWithoutSeriesInput> | SeriesCommentsCreateWithoutSeriesInput[] | SeriesCommentsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesCommentsCreateOrConnectWithoutSeriesInput | SeriesCommentsCreateOrConnectWithoutSeriesInput[]
    upsert?: SeriesCommentsUpsertWithWhereUniqueWithoutSeriesInput | SeriesCommentsUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SeriesCommentsCreateManySeriesInputEnvelope
    set?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    disconnect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    delete?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    connect?: SeriesCommentsWhereUniqueInput | SeriesCommentsWhereUniqueInput[]
    update?: SeriesCommentsUpdateWithWhereUniqueWithoutSeriesInput | SeriesCommentsUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SeriesCommentsUpdateManyWithWhereWithoutSeriesInput | SeriesCommentsUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SeriesCommentsScalarWhereInput | SeriesCommentsScalarWhereInput[]
  }

  export type SeriesNotesUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SeriesNotesCreateWithoutSeriesInput, SeriesNotesUncheckedCreateWithoutSeriesInput> | SeriesNotesCreateWithoutSeriesInput[] | SeriesNotesUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesNotesCreateOrConnectWithoutSeriesInput | SeriesNotesCreateOrConnectWithoutSeriesInput[]
    upsert?: SeriesNotesUpsertWithWhereUniqueWithoutSeriesInput | SeriesNotesUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SeriesNotesCreateManySeriesInputEnvelope
    set?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    disconnect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    delete?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    connect?: SeriesNotesWhereUniqueInput | SeriesNotesWhereUniqueInput[]
    update?: SeriesNotesUpdateWithWhereUniqueWithoutSeriesInput | SeriesNotesUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SeriesNotesUpdateManyWithWhereWithoutSeriesInput | SeriesNotesUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SeriesNotesScalarWhereInput | SeriesNotesScalarWhereInput[]
  }

  export type SchedulingUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SchedulingCreateWithoutSeriesInput, SchedulingUncheckedCreateWithoutSeriesInput> | SchedulingCreateWithoutSeriesInput[] | SchedulingUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SchedulingCreateOrConnectWithoutSeriesInput | SchedulingCreateOrConnectWithoutSeriesInput[]
    upsert?: SchedulingUpsertWithWhereUniqueWithoutSeriesInput | SchedulingUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SchedulingCreateManySeriesInputEnvelope
    set?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    disconnect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    delete?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    connect?: SchedulingWhereUniqueInput | SchedulingWhereUniqueInput[]
    update?: SchedulingUpdateWithWhereUniqueWithoutSeriesInput | SchedulingUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SchedulingUpdateManyWithWhereWithoutSeriesInput | SchedulingUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SchedulingScalarWhereInput | SchedulingScalarWhereInput[]
  }

  export type SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SeriesCategoryRelationsCreateWithoutSeriesInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput> | SeriesCategoryRelationsCreateWithoutSeriesInput[] | SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput | SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput[]
    upsert?: SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesInput | SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SeriesCategoryRelationsCreateManySeriesInputEnvelope
    set?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    disconnect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    delete?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    connect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    update?: SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesInput | SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesInput | SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SeriesCategoryRelationsScalarWhereInput | SeriesCategoryRelationsScalarWhereInput[]
  }

  export type SharesUncheckedUpdateManyWithoutSeriesNestedInput = {
    create?: XOR<SharesCreateWithoutSeriesInput, SharesUncheckedCreateWithoutSeriesInput> | SharesCreateWithoutSeriesInput[] | SharesUncheckedCreateWithoutSeriesInput[]
    connectOrCreate?: SharesCreateOrConnectWithoutSeriesInput | SharesCreateOrConnectWithoutSeriesInput[]
    upsert?: SharesUpsertWithWhereUniqueWithoutSeriesInput | SharesUpsertWithWhereUniqueWithoutSeriesInput[]
    createMany?: SharesCreateManySeriesInputEnvelope
    set?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    disconnect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    delete?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    connect?: SharesWhereUniqueInput | SharesWhereUniqueInput[]
    update?: SharesUpdateWithWhereUniqueWithoutSeriesInput | SharesUpdateWithWhereUniqueWithoutSeriesInput[]
    updateMany?: SharesUpdateManyWithWhereWithoutSeriesInput | SharesUpdateManyWithWhereWithoutSeriesInput[]
    deleteMany?: SharesScalarWhereInput | SharesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutMovieRatingsInput = {
    create?: XOR<UsersCreateWithoutMovieRatingsInput, UsersUncheckedCreateWithoutMovieRatingsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMovieRatingsInput
    connect?: UsersWhereUniqueInput
  }

  export type MoviesCreateNestedOneWithoutMovieRatingsInput = {
    create?: XOR<MoviesCreateWithoutMovieRatingsInput, MoviesUncheckedCreateWithoutMovieRatingsInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutMovieRatingsInput
    connect?: MoviesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutMovieRatingsNestedInput = {
    create?: XOR<UsersCreateWithoutMovieRatingsInput, UsersUncheckedCreateWithoutMovieRatingsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMovieRatingsInput
    upsert?: UsersUpsertWithoutMovieRatingsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMovieRatingsInput, UsersUpdateWithoutMovieRatingsInput>, UsersUncheckedUpdateWithoutMovieRatingsInput>
  }

  export type MoviesUpdateOneRequiredWithoutMovieRatingsNestedInput = {
    create?: XOR<MoviesCreateWithoutMovieRatingsInput, MoviesUncheckedCreateWithoutMovieRatingsInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutMovieRatingsInput
    upsert?: MoviesUpsertWithoutMovieRatingsInput
    connect?: MoviesWhereUniqueInput
    update?: XOR<XOR<MoviesUpdateToOneWithWhereWithoutMovieRatingsInput, MoviesUpdateWithoutMovieRatingsInput>, MoviesUncheckedUpdateWithoutMovieRatingsInput>
  }

  export type UsersCreateNestedOneWithoutSeriesRatingsInput = {
    create?: XOR<UsersCreateWithoutSeriesRatingsInput, UsersUncheckedCreateWithoutSeriesRatingsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSeriesRatingsInput
    connect?: UsersWhereUniqueInput
  }

  export type SeriesCreateNestedOneWithoutSeriesRatingsInput = {
    create?: XOR<SeriesCreateWithoutSeriesRatingsInput, SeriesUncheckedCreateWithoutSeriesRatingsInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSeriesRatingsInput
    connect?: SeriesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutSeriesRatingsNestedInput = {
    create?: XOR<UsersCreateWithoutSeriesRatingsInput, UsersUncheckedCreateWithoutSeriesRatingsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSeriesRatingsInput
    upsert?: UsersUpsertWithoutSeriesRatingsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSeriesRatingsInput, UsersUpdateWithoutSeriesRatingsInput>, UsersUncheckedUpdateWithoutSeriesRatingsInput>
  }

  export type SeriesUpdateOneRequiredWithoutSeriesRatingsNestedInput = {
    create?: XOR<SeriesCreateWithoutSeriesRatingsInput, SeriesUncheckedCreateWithoutSeriesRatingsInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSeriesRatingsInput
    upsert?: SeriesUpsertWithoutSeriesRatingsInput
    connect?: SeriesWhereUniqueInput
    update?: XOR<XOR<SeriesUpdateToOneWithWhereWithoutSeriesRatingsInput, SeriesUpdateWithoutSeriesRatingsInput>, SeriesUncheckedUpdateWithoutSeriesRatingsInput>
  }

  export type UsersCreateNestedOneWithoutMovieCommentsInput = {
    create?: XOR<UsersCreateWithoutMovieCommentsInput, UsersUncheckedCreateWithoutMovieCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMovieCommentsInput
    connect?: UsersWhereUniqueInput
  }

  export type MoviesCreateNestedOneWithoutMovieCommentsInput = {
    create?: XOR<MoviesCreateWithoutMovieCommentsInput, MoviesUncheckedCreateWithoutMovieCommentsInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutMovieCommentsInput
    connect?: MoviesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutMovieCommentsNestedInput = {
    create?: XOR<UsersCreateWithoutMovieCommentsInput, UsersUncheckedCreateWithoutMovieCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMovieCommentsInput
    upsert?: UsersUpsertWithoutMovieCommentsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMovieCommentsInput, UsersUpdateWithoutMovieCommentsInput>, UsersUncheckedUpdateWithoutMovieCommentsInput>
  }

  export type MoviesUpdateOneRequiredWithoutMovieCommentsNestedInput = {
    create?: XOR<MoviesCreateWithoutMovieCommentsInput, MoviesUncheckedCreateWithoutMovieCommentsInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutMovieCommentsInput
    upsert?: MoviesUpsertWithoutMovieCommentsInput
    connect?: MoviesWhereUniqueInput
    update?: XOR<XOR<MoviesUpdateToOneWithWhereWithoutMovieCommentsInput, MoviesUpdateWithoutMovieCommentsInput>, MoviesUncheckedUpdateWithoutMovieCommentsInput>
  }

  export type UsersCreateNestedOneWithoutSeriesCommentsInput = {
    create?: XOR<UsersCreateWithoutSeriesCommentsInput, UsersUncheckedCreateWithoutSeriesCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSeriesCommentsInput
    connect?: UsersWhereUniqueInput
  }

  export type SeriesCreateNestedOneWithoutSeriesCommentsInput = {
    create?: XOR<SeriesCreateWithoutSeriesCommentsInput, SeriesUncheckedCreateWithoutSeriesCommentsInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSeriesCommentsInput
    connect?: SeriesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutSeriesCommentsNestedInput = {
    create?: XOR<UsersCreateWithoutSeriesCommentsInput, UsersUncheckedCreateWithoutSeriesCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSeriesCommentsInput
    upsert?: UsersUpsertWithoutSeriesCommentsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSeriesCommentsInput, UsersUpdateWithoutSeriesCommentsInput>, UsersUncheckedUpdateWithoutSeriesCommentsInput>
  }

  export type SeriesUpdateOneRequiredWithoutSeriesCommentsNestedInput = {
    create?: XOR<SeriesCreateWithoutSeriesCommentsInput, SeriesUncheckedCreateWithoutSeriesCommentsInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSeriesCommentsInput
    upsert?: SeriesUpsertWithoutSeriesCommentsInput
    connect?: SeriesWhereUniqueInput
    update?: XOR<XOR<SeriesUpdateToOneWithWhereWithoutSeriesCommentsInput, SeriesUpdateWithoutSeriesCommentsInput>, SeriesUncheckedUpdateWithoutSeriesCommentsInput>
  }

  export type UsersCreateNestedOneWithoutMovieNotesInput = {
    create?: XOR<UsersCreateWithoutMovieNotesInput, UsersUncheckedCreateWithoutMovieNotesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMovieNotesInput
    connect?: UsersWhereUniqueInput
  }

  export type MoviesCreateNestedOneWithoutMovieNotesInput = {
    create?: XOR<MoviesCreateWithoutMovieNotesInput, MoviesUncheckedCreateWithoutMovieNotesInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutMovieNotesInput
    connect?: MoviesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutMovieNotesNestedInput = {
    create?: XOR<UsersCreateWithoutMovieNotesInput, UsersUncheckedCreateWithoutMovieNotesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutMovieNotesInput
    upsert?: UsersUpsertWithoutMovieNotesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutMovieNotesInput, UsersUpdateWithoutMovieNotesInput>, UsersUncheckedUpdateWithoutMovieNotesInput>
  }

  export type MoviesUpdateOneRequiredWithoutMovieNotesNestedInput = {
    create?: XOR<MoviesCreateWithoutMovieNotesInput, MoviesUncheckedCreateWithoutMovieNotesInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutMovieNotesInput
    upsert?: MoviesUpsertWithoutMovieNotesInput
    connect?: MoviesWhereUniqueInput
    update?: XOR<XOR<MoviesUpdateToOneWithWhereWithoutMovieNotesInput, MoviesUpdateWithoutMovieNotesInput>, MoviesUncheckedUpdateWithoutMovieNotesInput>
  }

  export type UsersCreateNestedOneWithoutSeriesNotesInput = {
    create?: XOR<UsersCreateWithoutSeriesNotesInput, UsersUncheckedCreateWithoutSeriesNotesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSeriesNotesInput
    connect?: UsersWhereUniqueInput
  }

  export type SeriesCreateNestedOneWithoutSeriesNotesInput = {
    create?: XOR<SeriesCreateWithoutSeriesNotesInput, SeriesUncheckedCreateWithoutSeriesNotesInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSeriesNotesInput
    connect?: SeriesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutSeriesNotesNestedInput = {
    create?: XOR<UsersCreateWithoutSeriesNotesInput, UsersUncheckedCreateWithoutSeriesNotesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSeriesNotesInput
    upsert?: UsersUpsertWithoutSeriesNotesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSeriesNotesInput, UsersUpdateWithoutSeriesNotesInput>, UsersUncheckedUpdateWithoutSeriesNotesInput>
  }

  export type SeriesUpdateOneRequiredWithoutSeriesNotesNestedInput = {
    create?: XOR<SeriesCreateWithoutSeriesNotesInput, SeriesUncheckedCreateWithoutSeriesNotesInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSeriesNotesInput
    upsert?: SeriesUpsertWithoutSeriesNotesInput
    connect?: SeriesWhereUniqueInput
    update?: XOR<XOR<SeriesUpdateToOneWithWhereWithoutSeriesNotesInput, SeriesUpdateWithoutSeriesNotesInput>, SeriesUncheckedUpdateWithoutSeriesNotesInput>
  }

  export type UsersCreateNestedOneWithoutSchedulingInput = {
    create?: XOR<UsersCreateWithoutSchedulingInput, UsersUncheckedCreateWithoutSchedulingInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSchedulingInput
    connect?: UsersWhereUniqueInput
  }

  export type MoviesCreateNestedOneWithoutSchedulingInput = {
    create?: XOR<MoviesCreateWithoutSchedulingInput, MoviesUncheckedCreateWithoutSchedulingInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutSchedulingInput
    connect?: MoviesWhereUniqueInput
  }

  export type SeriesCreateNestedOneWithoutSchedulingInput = {
    create?: XOR<SeriesCreateWithoutSchedulingInput, SeriesUncheckedCreateWithoutSchedulingInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSchedulingInput
    connect?: SeriesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutSchedulingNestedInput = {
    create?: XOR<UsersCreateWithoutSchedulingInput, UsersUncheckedCreateWithoutSchedulingInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSchedulingInput
    upsert?: UsersUpsertWithoutSchedulingInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSchedulingInput, UsersUpdateWithoutSchedulingInput>, UsersUncheckedUpdateWithoutSchedulingInput>
  }

  export type MoviesUpdateOneWithoutSchedulingNestedInput = {
    create?: XOR<MoviesCreateWithoutSchedulingInput, MoviesUncheckedCreateWithoutSchedulingInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutSchedulingInput
    upsert?: MoviesUpsertWithoutSchedulingInput
    disconnect?: MoviesWhereInput | boolean
    delete?: MoviesWhereInput | boolean
    connect?: MoviesWhereUniqueInput
    update?: XOR<XOR<MoviesUpdateToOneWithWhereWithoutSchedulingInput, MoviesUpdateWithoutSchedulingInput>, MoviesUncheckedUpdateWithoutSchedulingInput>
  }

  export type SeriesUpdateOneWithoutSchedulingNestedInput = {
    create?: XOR<SeriesCreateWithoutSchedulingInput, SeriesUncheckedCreateWithoutSchedulingInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSchedulingInput
    upsert?: SeriesUpsertWithoutSchedulingInput
    disconnect?: SeriesWhereInput | boolean
    delete?: SeriesWhereInput | boolean
    connect?: SeriesWhereUniqueInput
    update?: XOR<XOR<SeriesUpdateToOneWithWhereWithoutSchedulingInput, SeriesUpdateWithoutSchedulingInput>, SeriesUncheckedUpdateWithoutSchedulingInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersCreateNestedOneWithoutSharesSentInput = {
    create?: XOR<UsersCreateWithoutSharesSentInput, UsersUncheckedCreateWithoutSharesSentInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSharesSentInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutSharesReceivedInput = {
    create?: XOR<UsersCreateWithoutSharesReceivedInput, UsersUncheckedCreateWithoutSharesReceivedInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSharesReceivedInput
    connect?: UsersWhereUniqueInput
  }

  export type MoviesCreateNestedOneWithoutSharesInput = {
    create?: XOR<MoviesCreateWithoutSharesInput, MoviesUncheckedCreateWithoutSharesInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutSharesInput
    connect?: MoviesWhereUniqueInput
  }

  export type SeriesCreateNestedOneWithoutSharesInput = {
    create?: XOR<SeriesCreateWithoutSharesInput, SeriesUncheckedCreateWithoutSharesInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSharesInput
    connect?: SeriesWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutSharesSentNestedInput = {
    create?: XOR<UsersCreateWithoutSharesSentInput, UsersUncheckedCreateWithoutSharesSentInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSharesSentInput
    upsert?: UsersUpsertWithoutSharesSentInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSharesSentInput, UsersUpdateWithoutSharesSentInput>, UsersUncheckedUpdateWithoutSharesSentInput>
  }

  export type UsersUpdateOneRequiredWithoutSharesReceivedNestedInput = {
    create?: XOR<UsersCreateWithoutSharesReceivedInput, UsersUncheckedCreateWithoutSharesReceivedInput>
    connectOrCreate?: UsersCreateOrConnectWithoutSharesReceivedInput
    upsert?: UsersUpsertWithoutSharesReceivedInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutSharesReceivedInput, UsersUpdateWithoutSharesReceivedInput>, UsersUncheckedUpdateWithoutSharesReceivedInput>
  }

  export type MoviesUpdateOneWithoutSharesNestedInput = {
    create?: XOR<MoviesCreateWithoutSharesInput, MoviesUncheckedCreateWithoutSharesInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutSharesInput
    upsert?: MoviesUpsertWithoutSharesInput
    disconnect?: MoviesWhereInput | boolean
    delete?: MoviesWhereInput | boolean
    connect?: MoviesWhereUniqueInput
    update?: XOR<XOR<MoviesUpdateToOneWithWhereWithoutSharesInput, MoviesUpdateWithoutSharesInput>, MoviesUncheckedUpdateWithoutSharesInput>
  }

  export type SeriesUpdateOneWithoutSharesNestedInput = {
    create?: XOR<SeriesCreateWithoutSharesInput, SeriesUncheckedCreateWithoutSharesInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSharesInput
    upsert?: SeriesUpsertWithoutSharesInput
    disconnect?: SeriesWhereInput | boolean
    delete?: SeriesWhereInput | boolean
    connect?: SeriesWhereUniqueInput
    update?: XOR<XOR<SeriesUpdateToOneWithWhereWithoutSharesInput, SeriesUpdateWithoutSharesInput>, SeriesUncheckedUpdateWithoutSharesInput>
  }

  export type MovieCategoryRelationsCreateNestedManyWithoutMovieCategoryInput = {
    create?: XOR<MovieCategoryRelationsCreateWithoutMovieCategoryInput, MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput> | MovieCategoryRelationsCreateWithoutMovieCategoryInput[] | MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput[]
    connectOrCreate?: MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput | MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput[]
    createMany?: MovieCategoryRelationsCreateManyMovieCategoryInputEnvelope
    connect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
  }

  export type MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieCategoryInput = {
    create?: XOR<MovieCategoryRelationsCreateWithoutMovieCategoryInput, MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput> | MovieCategoryRelationsCreateWithoutMovieCategoryInput[] | MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput[]
    connectOrCreate?: MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput | MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput[]
    createMany?: MovieCategoryRelationsCreateManyMovieCategoryInputEnvelope
    connect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
  }

  export type MovieCategoryRelationsUpdateManyWithoutMovieCategoryNestedInput = {
    create?: XOR<MovieCategoryRelationsCreateWithoutMovieCategoryInput, MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput> | MovieCategoryRelationsCreateWithoutMovieCategoryInput[] | MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput[]
    connectOrCreate?: MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput | MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput[]
    upsert?: MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieCategoryInput | MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieCategoryInput[]
    createMany?: MovieCategoryRelationsCreateManyMovieCategoryInputEnvelope
    set?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    disconnect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    delete?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    connect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    update?: MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieCategoryInput | MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieCategoryInput[]
    updateMany?: MovieCategoryRelationsUpdateManyWithWhereWithoutMovieCategoryInput | MovieCategoryRelationsUpdateManyWithWhereWithoutMovieCategoryInput[]
    deleteMany?: MovieCategoryRelationsScalarWhereInput | MovieCategoryRelationsScalarWhereInput[]
  }

  export type MovieCategoryRelationsUncheckedUpdateManyWithoutMovieCategoryNestedInput = {
    create?: XOR<MovieCategoryRelationsCreateWithoutMovieCategoryInput, MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput> | MovieCategoryRelationsCreateWithoutMovieCategoryInput[] | MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput[]
    connectOrCreate?: MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput | MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput[]
    upsert?: MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieCategoryInput | MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieCategoryInput[]
    createMany?: MovieCategoryRelationsCreateManyMovieCategoryInputEnvelope
    set?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    disconnect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    delete?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    connect?: MovieCategoryRelationsWhereUniqueInput | MovieCategoryRelationsWhereUniqueInput[]
    update?: MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieCategoryInput | MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieCategoryInput[]
    updateMany?: MovieCategoryRelationsUpdateManyWithWhereWithoutMovieCategoryInput | MovieCategoryRelationsUpdateManyWithWhereWithoutMovieCategoryInput[]
    deleteMany?: MovieCategoryRelationsScalarWhereInput | MovieCategoryRelationsScalarWhereInput[]
  }

  export type SeriesCategoryRelationsCreateNestedManyWithoutSeriesCategoryInput = {
    create?: XOR<SeriesCategoryRelationsCreateWithoutSeriesCategoryInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput> | SeriesCategoryRelationsCreateWithoutSeriesCategoryInput[] | SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput[]
    connectOrCreate?: SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput | SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput[]
    createMany?: SeriesCategoryRelationsCreateManySeriesCategoryInputEnvelope
    connect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
  }

  export type SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesCategoryInput = {
    create?: XOR<SeriesCategoryRelationsCreateWithoutSeriesCategoryInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput> | SeriesCategoryRelationsCreateWithoutSeriesCategoryInput[] | SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput[]
    connectOrCreate?: SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput | SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput[]
    createMany?: SeriesCategoryRelationsCreateManySeriesCategoryInputEnvelope
    connect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
  }

  export type SeriesCategoryRelationsUpdateManyWithoutSeriesCategoryNestedInput = {
    create?: XOR<SeriesCategoryRelationsCreateWithoutSeriesCategoryInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput> | SeriesCategoryRelationsCreateWithoutSeriesCategoryInput[] | SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput[]
    connectOrCreate?: SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput | SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput[]
    upsert?: SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesCategoryInput | SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesCategoryInput[]
    createMany?: SeriesCategoryRelationsCreateManySeriesCategoryInputEnvelope
    set?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    disconnect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    delete?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    connect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    update?: SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesCategoryInput | SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesCategoryInput[]
    updateMany?: SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesCategoryInput | SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesCategoryInput[]
    deleteMany?: SeriesCategoryRelationsScalarWhereInput | SeriesCategoryRelationsScalarWhereInput[]
  }

  export type SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesCategoryNestedInput = {
    create?: XOR<SeriesCategoryRelationsCreateWithoutSeriesCategoryInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput> | SeriesCategoryRelationsCreateWithoutSeriesCategoryInput[] | SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput[]
    connectOrCreate?: SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput | SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput[]
    upsert?: SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesCategoryInput | SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesCategoryInput[]
    createMany?: SeriesCategoryRelationsCreateManySeriesCategoryInputEnvelope
    set?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    disconnect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    delete?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    connect?: SeriesCategoryRelationsWhereUniqueInput | SeriesCategoryRelationsWhereUniqueInput[]
    update?: SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesCategoryInput | SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesCategoryInput[]
    updateMany?: SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesCategoryInput | SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesCategoryInput[]
    deleteMany?: SeriesCategoryRelationsScalarWhereInput | SeriesCategoryRelationsScalarWhereInput[]
  }

  export type MoviesCreateNestedOneWithoutMovieCategoryRelationsInput = {
    create?: XOR<MoviesCreateWithoutMovieCategoryRelationsInput, MoviesUncheckedCreateWithoutMovieCategoryRelationsInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutMovieCategoryRelationsInput
    connect?: MoviesWhereUniqueInput
  }

  export type MovieCategoriesCreateNestedOneWithoutMovieCategoryRelationsInput = {
    create?: XOR<MovieCategoriesCreateWithoutMovieCategoryRelationsInput, MovieCategoriesUncheckedCreateWithoutMovieCategoryRelationsInput>
    connectOrCreate?: MovieCategoriesCreateOrConnectWithoutMovieCategoryRelationsInput
    connect?: MovieCategoriesWhereUniqueInput
  }

  export type MoviesUpdateOneRequiredWithoutMovieCategoryRelationsNestedInput = {
    create?: XOR<MoviesCreateWithoutMovieCategoryRelationsInput, MoviesUncheckedCreateWithoutMovieCategoryRelationsInput>
    connectOrCreate?: MoviesCreateOrConnectWithoutMovieCategoryRelationsInput
    upsert?: MoviesUpsertWithoutMovieCategoryRelationsInput
    connect?: MoviesWhereUniqueInput
    update?: XOR<XOR<MoviesUpdateToOneWithWhereWithoutMovieCategoryRelationsInput, MoviesUpdateWithoutMovieCategoryRelationsInput>, MoviesUncheckedUpdateWithoutMovieCategoryRelationsInput>
  }

  export type MovieCategoriesUpdateOneRequiredWithoutMovieCategoryRelationsNestedInput = {
    create?: XOR<MovieCategoriesCreateWithoutMovieCategoryRelationsInput, MovieCategoriesUncheckedCreateWithoutMovieCategoryRelationsInput>
    connectOrCreate?: MovieCategoriesCreateOrConnectWithoutMovieCategoryRelationsInput
    upsert?: MovieCategoriesUpsertWithoutMovieCategoryRelationsInput
    connect?: MovieCategoriesWhereUniqueInput
    update?: XOR<XOR<MovieCategoriesUpdateToOneWithWhereWithoutMovieCategoryRelationsInput, MovieCategoriesUpdateWithoutMovieCategoryRelationsInput>, MovieCategoriesUncheckedUpdateWithoutMovieCategoryRelationsInput>
  }

  export type SeriesCreateNestedOneWithoutSeriesCategoryRelationsInput = {
    create?: XOR<SeriesCreateWithoutSeriesCategoryRelationsInput, SeriesUncheckedCreateWithoutSeriesCategoryRelationsInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSeriesCategoryRelationsInput
    connect?: SeriesWhereUniqueInput
  }

  export type SeriesCategoriesCreateNestedOneWithoutSeriesCategoryRelationsInput = {
    create?: XOR<SeriesCategoriesCreateWithoutSeriesCategoryRelationsInput, SeriesCategoriesUncheckedCreateWithoutSeriesCategoryRelationsInput>
    connectOrCreate?: SeriesCategoriesCreateOrConnectWithoutSeriesCategoryRelationsInput
    connect?: SeriesCategoriesWhereUniqueInput
  }

  export type SeriesUpdateOneRequiredWithoutSeriesCategoryRelationsNestedInput = {
    create?: XOR<SeriesCreateWithoutSeriesCategoryRelationsInput, SeriesUncheckedCreateWithoutSeriesCategoryRelationsInput>
    connectOrCreate?: SeriesCreateOrConnectWithoutSeriesCategoryRelationsInput
    upsert?: SeriesUpsertWithoutSeriesCategoryRelationsInput
    connect?: SeriesWhereUniqueInput
    update?: XOR<XOR<SeriesUpdateToOneWithWhereWithoutSeriesCategoryRelationsInput, SeriesUpdateWithoutSeriesCategoryRelationsInput>, SeriesUncheckedUpdateWithoutSeriesCategoryRelationsInput>
  }

  export type SeriesCategoriesUpdateOneRequiredWithoutSeriesCategoryRelationsNestedInput = {
    create?: XOR<SeriesCategoriesCreateWithoutSeriesCategoryRelationsInput, SeriesCategoriesUncheckedCreateWithoutSeriesCategoryRelationsInput>
    connectOrCreate?: SeriesCategoriesCreateOrConnectWithoutSeriesCategoryRelationsInput
    upsert?: SeriesCategoriesUpsertWithoutSeriesCategoryRelationsInput
    connect?: SeriesCategoriesWhereUniqueInput
    update?: XOR<XOR<SeriesCategoriesUpdateToOneWithWhereWithoutSeriesCategoryRelationsInput, SeriesCategoriesUpdateWithoutSeriesCategoryRelationsInput>, SeriesCategoriesUncheckedUpdateWithoutSeriesCategoryRelationsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MovieCommentsCreateWithoutUserInput = {
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Movie: MoviesCreateNestedOneWithoutMovieCommentsInput
  }

  export type MovieCommentsUncheckedCreateWithoutUserInput = {
    MovieCommentId?: number
    MovieId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCommentsCreateOrConnectWithoutUserInput = {
    where: MovieCommentsWhereUniqueInput
    create: XOR<MovieCommentsCreateWithoutUserInput, MovieCommentsUncheckedCreateWithoutUserInput>
  }

  export type MovieCommentsCreateManyUserInputEnvelope = {
    data: MovieCommentsCreateManyUserInput | MovieCommentsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SeriesCommentsCreateWithoutUserInput = {
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Series: SeriesCreateNestedOneWithoutSeriesCommentsInput
  }

  export type SeriesCommentsUncheckedCreateWithoutUserInput = {
    SeriesCommentId?: number
    SeriesId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCommentsCreateOrConnectWithoutUserInput = {
    where: SeriesCommentsWhereUniqueInput
    create: XOR<SeriesCommentsCreateWithoutUserInput, SeriesCommentsUncheckedCreateWithoutUserInput>
  }

  export type SeriesCommentsCreateManyUserInputEnvelope = {
    data: SeriesCommentsCreateManyUserInput | SeriesCommentsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MovieRatingsCreateWithoutUserInput = {
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Movie: MoviesCreateNestedOneWithoutMovieRatingsInput
  }

  export type MovieRatingsUncheckedCreateWithoutUserInput = {
    MovieRatingId?: number
    MovieId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieRatingsCreateOrConnectWithoutUserInput = {
    where: MovieRatingsWhereUniqueInput
    create: XOR<MovieRatingsCreateWithoutUserInput, MovieRatingsUncheckedCreateWithoutUserInput>
  }

  export type MovieRatingsCreateManyUserInputEnvelope = {
    data: MovieRatingsCreateManyUserInput | MovieRatingsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SeriesRatingsCreateWithoutUserInput = {
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Series: SeriesCreateNestedOneWithoutSeriesRatingsInput
  }

  export type SeriesRatingsUncheckedCreateWithoutUserInput = {
    SeriesRatingId?: number
    SeriesId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesRatingsCreateOrConnectWithoutUserInput = {
    where: SeriesRatingsWhereUniqueInput
    create: XOR<SeriesRatingsCreateWithoutUserInput, SeriesRatingsUncheckedCreateWithoutUserInput>
  }

  export type SeriesRatingsCreateManyUserInputEnvelope = {
    data: SeriesRatingsCreateManyUserInput | SeriesRatingsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MovieNotesCreateWithoutUserInput = {
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Movie: MoviesCreateNestedOneWithoutMovieNotesInput
  }

  export type MovieNotesUncheckedCreateWithoutUserInput = {
    NoteId?: number
    MovieId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieNotesCreateOrConnectWithoutUserInput = {
    where: MovieNotesWhereUniqueInput
    create: XOR<MovieNotesCreateWithoutUserInput, MovieNotesUncheckedCreateWithoutUserInput>
  }

  export type MovieNotesCreateManyUserInputEnvelope = {
    data: MovieNotesCreateManyUserInput | MovieNotesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SeriesNotesCreateWithoutUserInput = {
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Series: SeriesCreateNestedOneWithoutSeriesNotesInput
  }

  export type SeriesNotesUncheckedCreateWithoutUserInput = {
    NoteId?: number
    SeriesId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesNotesCreateOrConnectWithoutUserInput = {
    where: SeriesNotesWhereUniqueInput
    create: XOR<SeriesNotesCreateWithoutUserInput, SeriesNotesUncheckedCreateWithoutUserInput>
  }

  export type SeriesNotesCreateManyUserInputEnvelope = {
    data: SeriesNotesCreateManyUserInput | SeriesNotesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SchedulingCreateWithoutUserInput = {
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Movie?: MoviesCreateNestedOneWithoutSchedulingInput
    Series?: SeriesCreateNestedOneWithoutSchedulingInput
  }

  export type SchedulingUncheckedCreateWithoutUserInput = {
    EventId?: number
    MovieId?: number | null
    SeriesId?: number | null
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SchedulingCreateOrConnectWithoutUserInput = {
    where: SchedulingWhereUniqueInput
    create: XOR<SchedulingCreateWithoutUserInput, SchedulingUncheckedCreateWithoutUserInput>
  }

  export type SchedulingCreateManyUserInputEnvelope = {
    data: SchedulingCreateManyUserInput | SchedulingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SharesCreateWithoutSenderUserInput = {
    CreatedAt?: Date | string
    RecipientUser: UsersCreateNestedOneWithoutSharesReceivedInput
    Movie?: MoviesCreateNestedOneWithoutSharesInput
    Series?: SeriesCreateNestedOneWithoutSharesInput
  }

  export type SharesUncheckedCreateWithoutSenderUserInput = {
    ShareId?: number
    RecipientUserId: number
    MovieId?: number | null
    SeriesId?: number | null
    CreatedAt?: Date | string
  }

  export type SharesCreateOrConnectWithoutSenderUserInput = {
    where: SharesWhereUniqueInput
    create: XOR<SharesCreateWithoutSenderUserInput, SharesUncheckedCreateWithoutSenderUserInput>
  }

  export type SharesCreateManySenderUserInputEnvelope = {
    data: SharesCreateManySenderUserInput | SharesCreateManySenderUserInput[]
    skipDuplicates?: boolean
  }

  export type SharesCreateWithoutRecipientUserInput = {
    CreatedAt?: Date | string
    SenderUser: UsersCreateNestedOneWithoutSharesSentInput
    Movie?: MoviesCreateNestedOneWithoutSharesInput
    Series?: SeriesCreateNestedOneWithoutSharesInput
  }

  export type SharesUncheckedCreateWithoutRecipientUserInput = {
    ShareId?: number
    SenderUserId: number
    MovieId?: number | null
    SeriesId?: number | null
    CreatedAt?: Date | string
  }

  export type SharesCreateOrConnectWithoutRecipientUserInput = {
    where: SharesWhereUniqueInput
    create: XOR<SharesCreateWithoutRecipientUserInput, SharesUncheckedCreateWithoutRecipientUserInput>
  }

  export type SharesCreateManyRecipientUserInputEnvelope = {
    data: SharesCreateManyRecipientUserInput | SharesCreateManyRecipientUserInput[]
    skipDuplicates?: boolean
  }

  export type MovieCommentsUpsertWithWhereUniqueWithoutUserInput = {
    where: MovieCommentsWhereUniqueInput
    update: XOR<MovieCommentsUpdateWithoutUserInput, MovieCommentsUncheckedUpdateWithoutUserInput>
    create: XOR<MovieCommentsCreateWithoutUserInput, MovieCommentsUncheckedCreateWithoutUserInput>
  }

  export type MovieCommentsUpdateWithWhereUniqueWithoutUserInput = {
    where: MovieCommentsWhereUniqueInput
    data: XOR<MovieCommentsUpdateWithoutUserInput, MovieCommentsUncheckedUpdateWithoutUserInput>
  }

  export type MovieCommentsUpdateManyWithWhereWithoutUserInput = {
    where: MovieCommentsScalarWhereInput
    data: XOR<MovieCommentsUpdateManyMutationInput, MovieCommentsUncheckedUpdateManyWithoutUserInput>
  }

  export type MovieCommentsScalarWhereInput = {
    AND?: MovieCommentsScalarWhereInput | MovieCommentsScalarWhereInput[]
    OR?: MovieCommentsScalarWhereInput[]
    NOT?: MovieCommentsScalarWhereInput | MovieCommentsScalarWhereInput[]
    MovieCommentId?: IntFilter<"MovieComments"> | number
    UserId?: IntFilter<"MovieComments"> | number
    MovieId?: IntFilter<"MovieComments"> | number
    CommentText?: StringFilter<"MovieComments"> | string
    CreatedAt?: DateTimeFilter<"MovieComments"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieComments"> | Date | string
  }

  export type SeriesCommentsUpsertWithWhereUniqueWithoutUserInput = {
    where: SeriesCommentsWhereUniqueInput
    update: XOR<SeriesCommentsUpdateWithoutUserInput, SeriesCommentsUncheckedUpdateWithoutUserInput>
    create: XOR<SeriesCommentsCreateWithoutUserInput, SeriesCommentsUncheckedCreateWithoutUserInput>
  }

  export type SeriesCommentsUpdateWithWhereUniqueWithoutUserInput = {
    where: SeriesCommentsWhereUniqueInput
    data: XOR<SeriesCommentsUpdateWithoutUserInput, SeriesCommentsUncheckedUpdateWithoutUserInput>
  }

  export type SeriesCommentsUpdateManyWithWhereWithoutUserInput = {
    where: SeriesCommentsScalarWhereInput
    data: XOR<SeriesCommentsUpdateManyMutationInput, SeriesCommentsUncheckedUpdateManyWithoutUserInput>
  }

  export type SeriesCommentsScalarWhereInput = {
    AND?: SeriesCommentsScalarWhereInput | SeriesCommentsScalarWhereInput[]
    OR?: SeriesCommentsScalarWhereInput[]
    NOT?: SeriesCommentsScalarWhereInput | SeriesCommentsScalarWhereInput[]
    SeriesCommentId?: IntFilter<"SeriesComments"> | number
    UserId?: IntFilter<"SeriesComments"> | number
    SeriesId?: IntFilter<"SeriesComments"> | number
    CommentText?: StringFilter<"SeriesComments"> | string
    CreatedAt?: DateTimeFilter<"SeriesComments"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesComments"> | Date | string
  }

  export type MovieRatingsUpsertWithWhereUniqueWithoutUserInput = {
    where: MovieRatingsWhereUniqueInput
    update: XOR<MovieRatingsUpdateWithoutUserInput, MovieRatingsUncheckedUpdateWithoutUserInput>
    create: XOR<MovieRatingsCreateWithoutUserInput, MovieRatingsUncheckedCreateWithoutUserInput>
  }

  export type MovieRatingsUpdateWithWhereUniqueWithoutUserInput = {
    where: MovieRatingsWhereUniqueInput
    data: XOR<MovieRatingsUpdateWithoutUserInput, MovieRatingsUncheckedUpdateWithoutUserInput>
  }

  export type MovieRatingsUpdateManyWithWhereWithoutUserInput = {
    where: MovieRatingsScalarWhereInput
    data: XOR<MovieRatingsUpdateManyMutationInput, MovieRatingsUncheckedUpdateManyWithoutUserInput>
  }

  export type MovieRatingsScalarWhereInput = {
    AND?: MovieRatingsScalarWhereInput | MovieRatingsScalarWhereInput[]
    OR?: MovieRatingsScalarWhereInput[]
    NOT?: MovieRatingsScalarWhereInput | MovieRatingsScalarWhereInput[]
    MovieRatingId?: IntFilter<"MovieRatings"> | number
    UserId?: IntFilter<"MovieRatings"> | number
    MovieId?: IntFilter<"MovieRatings"> | number
    Rating?: IntFilter<"MovieRatings"> | number
    CreatedAt?: DateTimeFilter<"MovieRatings"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieRatings"> | Date | string
  }

  export type SeriesRatingsUpsertWithWhereUniqueWithoutUserInput = {
    where: SeriesRatingsWhereUniqueInput
    update: XOR<SeriesRatingsUpdateWithoutUserInput, SeriesRatingsUncheckedUpdateWithoutUserInput>
    create: XOR<SeriesRatingsCreateWithoutUserInput, SeriesRatingsUncheckedCreateWithoutUserInput>
  }

  export type SeriesRatingsUpdateWithWhereUniqueWithoutUserInput = {
    where: SeriesRatingsWhereUniqueInput
    data: XOR<SeriesRatingsUpdateWithoutUserInput, SeriesRatingsUncheckedUpdateWithoutUserInput>
  }

  export type SeriesRatingsUpdateManyWithWhereWithoutUserInput = {
    where: SeriesRatingsScalarWhereInput
    data: XOR<SeriesRatingsUpdateManyMutationInput, SeriesRatingsUncheckedUpdateManyWithoutUserInput>
  }

  export type SeriesRatingsScalarWhereInput = {
    AND?: SeriesRatingsScalarWhereInput | SeriesRatingsScalarWhereInput[]
    OR?: SeriesRatingsScalarWhereInput[]
    NOT?: SeriesRatingsScalarWhereInput | SeriesRatingsScalarWhereInput[]
    SeriesRatingId?: IntFilter<"SeriesRatings"> | number
    UserId?: IntFilter<"SeriesRatings"> | number
    SeriesId?: IntFilter<"SeriesRatings"> | number
    Rating?: IntFilter<"SeriesRatings"> | number
    CreatedAt?: DateTimeFilter<"SeriesRatings"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesRatings"> | Date | string
  }

  export type MovieNotesUpsertWithWhereUniqueWithoutUserInput = {
    where: MovieNotesWhereUniqueInput
    update: XOR<MovieNotesUpdateWithoutUserInput, MovieNotesUncheckedUpdateWithoutUserInput>
    create: XOR<MovieNotesCreateWithoutUserInput, MovieNotesUncheckedCreateWithoutUserInput>
  }

  export type MovieNotesUpdateWithWhereUniqueWithoutUserInput = {
    where: MovieNotesWhereUniqueInput
    data: XOR<MovieNotesUpdateWithoutUserInput, MovieNotesUncheckedUpdateWithoutUserInput>
  }

  export type MovieNotesUpdateManyWithWhereWithoutUserInput = {
    where: MovieNotesScalarWhereInput
    data: XOR<MovieNotesUpdateManyMutationInput, MovieNotesUncheckedUpdateManyWithoutUserInput>
  }

  export type MovieNotesScalarWhereInput = {
    AND?: MovieNotesScalarWhereInput | MovieNotesScalarWhereInput[]
    OR?: MovieNotesScalarWhereInput[]
    NOT?: MovieNotesScalarWhereInput | MovieNotesScalarWhereInput[]
    NoteId?: IntFilter<"MovieNotes"> | number
    UserId?: IntFilter<"MovieNotes"> | number
    MovieId?: IntFilter<"MovieNotes"> | number
    NoteText?: StringFilter<"MovieNotes"> | string
    CreatedAt?: DateTimeFilter<"MovieNotes"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieNotes"> | Date | string
  }

  export type SeriesNotesUpsertWithWhereUniqueWithoutUserInput = {
    where: SeriesNotesWhereUniqueInput
    update: XOR<SeriesNotesUpdateWithoutUserInput, SeriesNotesUncheckedUpdateWithoutUserInput>
    create: XOR<SeriesNotesCreateWithoutUserInput, SeriesNotesUncheckedCreateWithoutUserInput>
  }

  export type SeriesNotesUpdateWithWhereUniqueWithoutUserInput = {
    where: SeriesNotesWhereUniqueInput
    data: XOR<SeriesNotesUpdateWithoutUserInput, SeriesNotesUncheckedUpdateWithoutUserInput>
  }

  export type SeriesNotesUpdateManyWithWhereWithoutUserInput = {
    where: SeriesNotesScalarWhereInput
    data: XOR<SeriesNotesUpdateManyMutationInput, SeriesNotesUncheckedUpdateManyWithoutUserInput>
  }

  export type SeriesNotesScalarWhereInput = {
    AND?: SeriesNotesScalarWhereInput | SeriesNotesScalarWhereInput[]
    OR?: SeriesNotesScalarWhereInput[]
    NOT?: SeriesNotesScalarWhereInput | SeriesNotesScalarWhereInput[]
    NoteId?: IntFilter<"SeriesNotes"> | number
    UserId?: IntFilter<"SeriesNotes"> | number
    SeriesId?: IntFilter<"SeriesNotes"> | number
    NoteText?: StringFilter<"SeriesNotes"> | string
    CreatedAt?: DateTimeFilter<"SeriesNotes"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesNotes"> | Date | string
  }

  export type SchedulingUpsertWithWhereUniqueWithoutUserInput = {
    where: SchedulingWhereUniqueInput
    update: XOR<SchedulingUpdateWithoutUserInput, SchedulingUncheckedUpdateWithoutUserInput>
    create: XOR<SchedulingCreateWithoutUserInput, SchedulingUncheckedCreateWithoutUserInput>
  }

  export type SchedulingUpdateWithWhereUniqueWithoutUserInput = {
    where: SchedulingWhereUniqueInput
    data: XOR<SchedulingUpdateWithoutUserInput, SchedulingUncheckedUpdateWithoutUserInput>
  }

  export type SchedulingUpdateManyWithWhereWithoutUserInput = {
    where: SchedulingScalarWhereInput
    data: XOR<SchedulingUpdateManyMutationInput, SchedulingUncheckedUpdateManyWithoutUserInput>
  }

  export type SchedulingScalarWhereInput = {
    AND?: SchedulingScalarWhereInput | SchedulingScalarWhereInput[]
    OR?: SchedulingScalarWhereInput[]
    NOT?: SchedulingScalarWhereInput | SchedulingScalarWhereInput[]
    EventId?: IntFilter<"Scheduling"> | number
    UserId?: IntFilter<"Scheduling"> | number
    MovieId?: IntNullableFilter<"Scheduling"> | number | null
    SeriesId?: IntNullableFilter<"Scheduling"> | number | null
    EventDate?: DateTimeFilter<"Scheduling"> | Date | string
    Note?: StringNullableFilter<"Scheduling"> | string | null
    CreatedAt?: DateTimeFilter<"Scheduling"> | Date | string
    UpdatedAt?: DateTimeFilter<"Scheduling"> | Date | string
  }

  export type SharesUpsertWithWhereUniqueWithoutSenderUserInput = {
    where: SharesWhereUniqueInput
    update: XOR<SharesUpdateWithoutSenderUserInput, SharesUncheckedUpdateWithoutSenderUserInput>
    create: XOR<SharesCreateWithoutSenderUserInput, SharesUncheckedCreateWithoutSenderUserInput>
  }

  export type SharesUpdateWithWhereUniqueWithoutSenderUserInput = {
    where: SharesWhereUniqueInput
    data: XOR<SharesUpdateWithoutSenderUserInput, SharesUncheckedUpdateWithoutSenderUserInput>
  }

  export type SharesUpdateManyWithWhereWithoutSenderUserInput = {
    where: SharesScalarWhereInput
    data: XOR<SharesUpdateManyMutationInput, SharesUncheckedUpdateManyWithoutSenderUserInput>
  }

  export type SharesScalarWhereInput = {
    AND?: SharesScalarWhereInput | SharesScalarWhereInput[]
    OR?: SharesScalarWhereInput[]
    NOT?: SharesScalarWhereInput | SharesScalarWhereInput[]
    ShareId?: IntFilter<"Shares"> | number
    SenderUserId?: IntFilter<"Shares"> | number
    RecipientUserId?: IntFilter<"Shares"> | number
    MovieId?: IntNullableFilter<"Shares"> | number | null
    SeriesId?: IntNullableFilter<"Shares"> | number | null
    CreatedAt?: DateTimeFilter<"Shares"> | Date | string
  }

  export type SharesUpsertWithWhereUniqueWithoutRecipientUserInput = {
    where: SharesWhereUniqueInput
    update: XOR<SharesUpdateWithoutRecipientUserInput, SharesUncheckedUpdateWithoutRecipientUserInput>
    create: XOR<SharesCreateWithoutRecipientUserInput, SharesUncheckedCreateWithoutRecipientUserInput>
  }

  export type SharesUpdateWithWhereUniqueWithoutRecipientUserInput = {
    where: SharesWhereUniqueInput
    data: XOR<SharesUpdateWithoutRecipientUserInput, SharesUncheckedUpdateWithoutRecipientUserInput>
  }

  export type SharesUpdateManyWithWhereWithoutRecipientUserInput = {
    where: SharesScalarWhereInput
    data: XOR<SharesUpdateManyMutationInput, SharesUncheckedUpdateManyWithoutRecipientUserInput>
  }

  export type MovieRatingsCreateWithoutMovieInput = {
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutMovieRatingsInput
  }

  export type MovieRatingsUncheckedCreateWithoutMovieInput = {
    MovieRatingId?: number
    UserId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieRatingsCreateOrConnectWithoutMovieInput = {
    where: MovieRatingsWhereUniqueInput
    create: XOR<MovieRatingsCreateWithoutMovieInput, MovieRatingsUncheckedCreateWithoutMovieInput>
  }

  export type MovieRatingsCreateManyMovieInputEnvelope = {
    data: MovieRatingsCreateManyMovieInput | MovieRatingsCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type MovieCommentsCreateWithoutMovieInput = {
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutMovieCommentsInput
  }

  export type MovieCommentsUncheckedCreateWithoutMovieInput = {
    MovieCommentId?: number
    UserId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCommentsCreateOrConnectWithoutMovieInput = {
    where: MovieCommentsWhereUniqueInput
    create: XOR<MovieCommentsCreateWithoutMovieInput, MovieCommentsUncheckedCreateWithoutMovieInput>
  }

  export type MovieCommentsCreateManyMovieInputEnvelope = {
    data: MovieCommentsCreateManyMovieInput | MovieCommentsCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type MovieNotesCreateWithoutMovieInput = {
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutMovieNotesInput
  }

  export type MovieNotesUncheckedCreateWithoutMovieInput = {
    NoteId?: number
    UserId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieNotesCreateOrConnectWithoutMovieInput = {
    where: MovieNotesWhereUniqueInput
    create: XOR<MovieNotesCreateWithoutMovieInput, MovieNotesUncheckedCreateWithoutMovieInput>
  }

  export type MovieNotesCreateManyMovieInputEnvelope = {
    data: MovieNotesCreateManyMovieInput | MovieNotesCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type SchedulingCreateWithoutMovieInput = {
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSchedulingInput
    Series?: SeriesCreateNestedOneWithoutSchedulingInput
  }

  export type SchedulingUncheckedCreateWithoutMovieInput = {
    EventId?: number
    UserId: number
    SeriesId?: number | null
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SchedulingCreateOrConnectWithoutMovieInput = {
    where: SchedulingWhereUniqueInput
    create: XOR<SchedulingCreateWithoutMovieInput, SchedulingUncheckedCreateWithoutMovieInput>
  }

  export type SchedulingCreateManyMovieInputEnvelope = {
    data: SchedulingCreateManyMovieInput | SchedulingCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type MovieCategoryRelationsCreateWithoutMovieInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieCategory: MovieCategoriesCreateNestedOneWithoutMovieCategoryRelationsInput
  }

  export type MovieCategoryRelationsUncheckedCreateWithoutMovieInput = {
    MovieCategoryRelationId?: number
    MovieCategoryId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoryRelationsCreateOrConnectWithoutMovieInput = {
    where: MovieCategoryRelationsWhereUniqueInput
    create: XOR<MovieCategoryRelationsCreateWithoutMovieInput, MovieCategoryRelationsUncheckedCreateWithoutMovieInput>
  }

  export type MovieCategoryRelationsCreateManyMovieInputEnvelope = {
    data: MovieCategoryRelationsCreateManyMovieInput | MovieCategoryRelationsCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type SharesCreateWithoutMovieInput = {
    CreatedAt?: Date | string
    SenderUser: UsersCreateNestedOneWithoutSharesSentInput
    RecipientUser: UsersCreateNestedOneWithoutSharesReceivedInput
    Series?: SeriesCreateNestedOneWithoutSharesInput
  }

  export type SharesUncheckedCreateWithoutMovieInput = {
    ShareId?: number
    SenderUserId: number
    RecipientUserId: number
    SeriesId?: number | null
    CreatedAt?: Date | string
  }

  export type SharesCreateOrConnectWithoutMovieInput = {
    where: SharesWhereUniqueInput
    create: XOR<SharesCreateWithoutMovieInput, SharesUncheckedCreateWithoutMovieInput>
  }

  export type SharesCreateManyMovieInputEnvelope = {
    data: SharesCreateManyMovieInput | SharesCreateManyMovieInput[]
    skipDuplicates?: boolean
  }

  export type MovieRatingsUpsertWithWhereUniqueWithoutMovieInput = {
    where: MovieRatingsWhereUniqueInput
    update: XOR<MovieRatingsUpdateWithoutMovieInput, MovieRatingsUncheckedUpdateWithoutMovieInput>
    create: XOR<MovieRatingsCreateWithoutMovieInput, MovieRatingsUncheckedCreateWithoutMovieInput>
  }

  export type MovieRatingsUpdateWithWhereUniqueWithoutMovieInput = {
    where: MovieRatingsWhereUniqueInput
    data: XOR<MovieRatingsUpdateWithoutMovieInput, MovieRatingsUncheckedUpdateWithoutMovieInput>
  }

  export type MovieRatingsUpdateManyWithWhereWithoutMovieInput = {
    where: MovieRatingsScalarWhereInput
    data: XOR<MovieRatingsUpdateManyMutationInput, MovieRatingsUncheckedUpdateManyWithoutMovieInput>
  }

  export type MovieCommentsUpsertWithWhereUniqueWithoutMovieInput = {
    where: MovieCommentsWhereUniqueInput
    update: XOR<MovieCommentsUpdateWithoutMovieInput, MovieCommentsUncheckedUpdateWithoutMovieInput>
    create: XOR<MovieCommentsCreateWithoutMovieInput, MovieCommentsUncheckedCreateWithoutMovieInput>
  }

  export type MovieCommentsUpdateWithWhereUniqueWithoutMovieInput = {
    where: MovieCommentsWhereUniqueInput
    data: XOR<MovieCommentsUpdateWithoutMovieInput, MovieCommentsUncheckedUpdateWithoutMovieInput>
  }

  export type MovieCommentsUpdateManyWithWhereWithoutMovieInput = {
    where: MovieCommentsScalarWhereInput
    data: XOR<MovieCommentsUpdateManyMutationInput, MovieCommentsUncheckedUpdateManyWithoutMovieInput>
  }

  export type MovieNotesUpsertWithWhereUniqueWithoutMovieInput = {
    where: MovieNotesWhereUniqueInput
    update: XOR<MovieNotesUpdateWithoutMovieInput, MovieNotesUncheckedUpdateWithoutMovieInput>
    create: XOR<MovieNotesCreateWithoutMovieInput, MovieNotesUncheckedCreateWithoutMovieInput>
  }

  export type MovieNotesUpdateWithWhereUniqueWithoutMovieInput = {
    where: MovieNotesWhereUniqueInput
    data: XOR<MovieNotesUpdateWithoutMovieInput, MovieNotesUncheckedUpdateWithoutMovieInput>
  }

  export type MovieNotesUpdateManyWithWhereWithoutMovieInput = {
    where: MovieNotesScalarWhereInput
    data: XOR<MovieNotesUpdateManyMutationInput, MovieNotesUncheckedUpdateManyWithoutMovieInput>
  }

  export type SchedulingUpsertWithWhereUniqueWithoutMovieInput = {
    where: SchedulingWhereUniqueInput
    update: XOR<SchedulingUpdateWithoutMovieInput, SchedulingUncheckedUpdateWithoutMovieInput>
    create: XOR<SchedulingCreateWithoutMovieInput, SchedulingUncheckedCreateWithoutMovieInput>
  }

  export type SchedulingUpdateWithWhereUniqueWithoutMovieInput = {
    where: SchedulingWhereUniqueInput
    data: XOR<SchedulingUpdateWithoutMovieInput, SchedulingUncheckedUpdateWithoutMovieInput>
  }

  export type SchedulingUpdateManyWithWhereWithoutMovieInput = {
    where: SchedulingScalarWhereInput
    data: XOR<SchedulingUpdateManyMutationInput, SchedulingUncheckedUpdateManyWithoutMovieInput>
  }

  export type MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieInput = {
    where: MovieCategoryRelationsWhereUniqueInput
    update: XOR<MovieCategoryRelationsUpdateWithoutMovieInput, MovieCategoryRelationsUncheckedUpdateWithoutMovieInput>
    create: XOR<MovieCategoryRelationsCreateWithoutMovieInput, MovieCategoryRelationsUncheckedCreateWithoutMovieInput>
  }

  export type MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieInput = {
    where: MovieCategoryRelationsWhereUniqueInput
    data: XOR<MovieCategoryRelationsUpdateWithoutMovieInput, MovieCategoryRelationsUncheckedUpdateWithoutMovieInput>
  }

  export type MovieCategoryRelationsUpdateManyWithWhereWithoutMovieInput = {
    where: MovieCategoryRelationsScalarWhereInput
    data: XOR<MovieCategoryRelationsUpdateManyMutationInput, MovieCategoryRelationsUncheckedUpdateManyWithoutMovieInput>
  }

  export type MovieCategoryRelationsScalarWhereInput = {
    AND?: MovieCategoryRelationsScalarWhereInput | MovieCategoryRelationsScalarWhereInput[]
    OR?: MovieCategoryRelationsScalarWhereInput[]
    NOT?: MovieCategoryRelationsScalarWhereInput | MovieCategoryRelationsScalarWhereInput[]
    MovieCategoryRelationId?: IntFilter<"MovieCategoryRelations"> | number
    MovieId?: IntFilter<"MovieCategoryRelations"> | number
    MovieCategoryId?: IntFilter<"MovieCategoryRelations"> | number
    CreatedAt?: DateTimeFilter<"MovieCategoryRelations"> | Date | string
    UpdatedAt?: DateTimeFilter<"MovieCategoryRelations"> | Date | string
  }

  export type SharesUpsertWithWhereUniqueWithoutMovieInput = {
    where: SharesWhereUniqueInput
    update: XOR<SharesUpdateWithoutMovieInput, SharesUncheckedUpdateWithoutMovieInput>
    create: XOR<SharesCreateWithoutMovieInput, SharesUncheckedCreateWithoutMovieInput>
  }

  export type SharesUpdateWithWhereUniqueWithoutMovieInput = {
    where: SharesWhereUniqueInput
    data: XOR<SharesUpdateWithoutMovieInput, SharesUncheckedUpdateWithoutMovieInput>
  }

  export type SharesUpdateManyWithWhereWithoutMovieInput = {
    where: SharesScalarWhereInput
    data: XOR<SharesUpdateManyMutationInput, SharesUncheckedUpdateManyWithoutMovieInput>
  }

  export type SeriesRatingsCreateWithoutSeriesInput = {
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSeriesRatingsInput
  }

  export type SeriesRatingsUncheckedCreateWithoutSeriesInput = {
    SeriesRatingId?: number
    UserId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesRatingsCreateOrConnectWithoutSeriesInput = {
    where: SeriesRatingsWhereUniqueInput
    create: XOR<SeriesRatingsCreateWithoutSeriesInput, SeriesRatingsUncheckedCreateWithoutSeriesInput>
  }

  export type SeriesRatingsCreateManySeriesInputEnvelope = {
    data: SeriesRatingsCreateManySeriesInput | SeriesRatingsCreateManySeriesInput[]
    skipDuplicates?: boolean
  }

  export type SeriesCommentsCreateWithoutSeriesInput = {
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSeriesCommentsInput
  }

  export type SeriesCommentsUncheckedCreateWithoutSeriesInput = {
    SeriesCommentId?: number
    UserId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCommentsCreateOrConnectWithoutSeriesInput = {
    where: SeriesCommentsWhereUniqueInput
    create: XOR<SeriesCommentsCreateWithoutSeriesInput, SeriesCommentsUncheckedCreateWithoutSeriesInput>
  }

  export type SeriesCommentsCreateManySeriesInputEnvelope = {
    data: SeriesCommentsCreateManySeriesInput | SeriesCommentsCreateManySeriesInput[]
    skipDuplicates?: boolean
  }

  export type SeriesNotesCreateWithoutSeriesInput = {
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSeriesNotesInput
  }

  export type SeriesNotesUncheckedCreateWithoutSeriesInput = {
    NoteId?: number
    UserId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesNotesCreateOrConnectWithoutSeriesInput = {
    where: SeriesNotesWhereUniqueInput
    create: XOR<SeriesNotesCreateWithoutSeriesInput, SeriesNotesUncheckedCreateWithoutSeriesInput>
  }

  export type SeriesNotesCreateManySeriesInputEnvelope = {
    data: SeriesNotesCreateManySeriesInput | SeriesNotesCreateManySeriesInput[]
    skipDuplicates?: boolean
  }

  export type SchedulingCreateWithoutSeriesInput = {
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    User: UsersCreateNestedOneWithoutSchedulingInput
    Movie?: MoviesCreateNestedOneWithoutSchedulingInput
  }

  export type SchedulingUncheckedCreateWithoutSeriesInput = {
    EventId?: number
    UserId: number
    MovieId?: number | null
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SchedulingCreateOrConnectWithoutSeriesInput = {
    where: SchedulingWhereUniqueInput
    create: XOR<SchedulingCreateWithoutSeriesInput, SchedulingUncheckedCreateWithoutSeriesInput>
  }

  export type SchedulingCreateManySeriesInputEnvelope = {
    data: SchedulingCreateManySeriesInput | SchedulingCreateManySeriesInput[]
    skipDuplicates?: boolean
  }

  export type SeriesCategoryRelationsCreateWithoutSeriesInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesCategory: SeriesCategoriesCreateNestedOneWithoutSeriesCategoryRelationsInput
  }

  export type SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput = {
    SeriesCategoryRelationId?: number
    SeriesCategoryId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoryRelationsCreateOrConnectWithoutSeriesInput = {
    where: SeriesCategoryRelationsWhereUniqueInput
    create: XOR<SeriesCategoryRelationsCreateWithoutSeriesInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput>
  }

  export type SeriesCategoryRelationsCreateManySeriesInputEnvelope = {
    data: SeriesCategoryRelationsCreateManySeriesInput | SeriesCategoryRelationsCreateManySeriesInput[]
    skipDuplicates?: boolean
  }

  export type SharesCreateWithoutSeriesInput = {
    CreatedAt?: Date | string
    SenderUser: UsersCreateNestedOneWithoutSharesSentInput
    RecipientUser: UsersCreateNestedOneWithoutSharesReceivedInput
    Movie?: MoviesCreateNestedOneWithoutSharesInput
  }

  export type SharesUncheckedCreateWithoutSeriesInput = {
    ShareId?: number
    SenderUserId: number
    RecipientUserId: number
    MovieId?: number | null
    CreatedAt?: Date | string
  }

  export type SharesCreateOrConnectWithoutSeriesInput = {
    where: SharesWhereUniqueInput
    create: XOR<SharesCreateWithoutSeriesInput, SharesUncheckedCreateWithoutSeriesInput>
  }

  export type SharesCreateManySeriesInputEnvelope = {
    data: SharesCreateManySeriesInput | SharesCreateManySeriesInput[]
    skipDuplicates?: boolean
  }

  export type SeriesRatingsUpsertWithWhereUniqueWithoutSeriesInput = {
    where: SeriesRatingsWhereUniqueInput
    update: XOR<SeriesRatingsUpdateWithoutSeriesInput, SeriesRatingsUncheckedUpdateWithoutSeriesInput>
    create: XOR<SeriesRatingsCreateWithoutSeriesInput, SeriesRatingsUncheckedCreateWithoutSeriesInput>
  }

  export type SeriesRatingsUpdateWithWhereUniqueWithoutSeriesInput = {
    where: SeriesRatingsWhereUniqueInput
    data: XOR<SeriesRatingsUpdateWithoutSeriesInput, SeriesRatingsUncheckedUpdateWithoutSeriesInput>
  }

  export type SeriesRatingsUpdateManyWithWhereWithoutSeriesInput = {
    where: SeriesRatingsScalarWhereInput
    data: XOR<SeriesRatingsUpdateManyMutationInput, SeriesRatingsUncheckedUpdateManyWithoutSeriesInput>
  }

  export type SeriesCommentsUpsertWithWhereUniqueWithoutSeriesInput = {
    where: SeriesCommentsWhereUniqueInput
    update: XOR<SeriesCommentsUpdateWithoutSeriesInput, SeriesCommentsUncheckedUpdateWithoutSeriesInput>
    create: XOR<SeriesCommentsCreateWithoutSeriesInput, SeriesCommentsUncheckedCreateWithoutSeriesInput>
  }

  export type SeriesCommentsUpdateWithWhereUniqueWithoutSeriesInput = {
    where: SeriesCommentsWhereUniqueInput
    data: XOR<SeriesCommentsUpdateWithoutSeriesInput, SeriesCommentsUncheckedUpdateWithoutSeriesInput>
  }

  export type SeriesCommentsUpdateManyWithWhereWithoutSeriesInput = {
    where: SeriesCommentsScalarWhereInput
    data: XOR<SeriesCommentsUpdateManyMutationInput, SeriesCommentsUncheckedUpdateManyWithoutSeriesInput>
  }

  export type SeriesNotesUpsertWithWhereUniqueWithoutSeriesInput = {
    where: SeriesNotesWhereUniqueInput
    update: XOR<SeriesNotesUpdateWithoutSeriesInput, SeriesNotesUncheckedUpdateWithoutSeriesInput>
    create: XOR<SeriesNotesCreateWithoutSeriesInput, SeriesNotesUncheckedCreateWithoutSeriesInput>
  }

  export type SeriesNotesUpdateWithWhereUniqueWithoutSeriesInput = {
    where: SeriesNotesWhereUniqueInput
    data: XOR<SeriesNotesUpdateWithoutSeriesInput, SeriesNotesUncheckedUpdateWithoutSeriesInput>
  }

  export type SeriesNotesUpdateManyWithWhereWithoutSeriesInput = {
    where: SeriesNotesScalarWhereInput
    data: XOR<SeriesNotesUpdateManyMutationInput, SeriesNotesUncheckedUpdateManyWithoutSeriesInput>
  }

  export type SchedulingUpsertWithWhereUniqueWithoutSeriesInput = {
    where: SchedulingWhereUniqueInput
    update: XOR<SchedulingUpdateWithoutSeriesInput, SchedulingUncheckedUpdateWithoutSeriesInput>
    create: XOR<SchedulingCreateWithoutSeriesInput, SchedulingUncheckedCreateWithoutSeriesInput>
  }

  export type SchedulingUpdateWithWhereUniqueWithoutSeriesInput = {
    where: SchedulingWhereUniqueInput
    data: XOR<SchedulingUpdateWithoutSeriesInput, SchedulingUncheckedUpdateWithoutSeriesInput>
  }

  export type SchedulingUpdateManyWithWhereWithoutSeriesInput = {
    where: SchedulingScalarWhereInput
    data: XOR<SchedulingUpdateManyMutationInput, SchedulingUncheckedUpdateManyWithoutSeriesInput>
  }

  export type SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesInput = {
    where: SeriesCategoryRelationsWhereUniqueInput
    update: XOR<SeriesCategoryRelationsUpdateWithoutSeriesInput, SeriesCategoryRelationsUncheckedUpdateWithoutSeriesInput>
    create: XOR<SeriesCategoryRelationsCreateWithoutSeriesInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesInput>
  }

  export type SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesInput = {
    where: SeriesCategoryRelationsWhereUniqueInput
    data: XOR<SeriesCategoryRelationsUpdateWithoutSeriesInput, SeriesCategoryRelationsUncheckedUpdateWithoutSeriesInput>
  }

  export type SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesInput = {
    where: SeriesCategoryRelationsScalarWhereInput
    data: XOR<SeriesCategoryRelationsUpdateManyMutationInput, SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesInput>
  }

  export type SeriesCategoryRelationsScalarWhereInput = {
    AND?: SeriesCategoryRelationsScalarWhereInput | SeriesCategoryRelationsScalarWhereInput[]
    OR?: SeriesCategoryRelationsScalarWhereInput[]
    NOT?: SeriesCategoryRelationsScalarWhereInput | SeriesCategoryRelationsScalarWhereInput[]
    SeriesCategoryRelationId?: IntFilter<"SeriesCategoryRelations"> | number
    SeriesId?: IntFilter<"SeriesCategoryRelations"> | number
    SeriesCategoryId?: IntFilter<"SeriesCategoryRelations"> | number
    CreatedAt?: DateTimeFilter<"SeriesCategoryRelations"> | Date | string
    UpdatedAt?: DateTimeFilter<"SeriesCategoryRelations"> | Date | string
  }

  export type SharesUpsertWithWhereUniqueWithoutSeriesInput = {
    where: SharesWhereUniqueInput
    update: XOR<SharesUpdateWithoutSeriesInput, SharesUncheckedUpdateWithoutSeriesInput>
    create: XOR<SharesCreateWithoutSeriesInput, SharesUncheckedCreateWithoutSeriesInput>
  }

  export type SharesUpdateWithWhereUniqueWithoutSeriesInput = {
    where: SharesWhereUniqueInput
    data: XOR<SharesUpdateWithoutSeriesInput, SharesUncheckedUpdateWithoutSeriesInput>
  }

  export type SharesUpdateManyWithWhereWithoutSeriesInput = {
    where: SharesScalarWhereInput
    data: XOR<SharesUpdateManyMutationInput, SharesUncheckedUpdateManyWithoutSeriesInput>
  }

  export type UsersCreateWithoutMovieRatingsInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateWithoutMovieRatingsInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersCreateOrConnectWithoutMovieRatingsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMovieRatingsInput, UsersUncheckedCreateWithoutMovieRatingsInput>
  }

  export type MoviesCreateWithoutMovieRatingsInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsCreateNestedManyWithoutMovieInput
    Shares?: SharesCreateNestedManyWithoutMovieInput
  }

  export type MoviesUncheckedCreateWithoutMovieRatingsInput = {
    MovieId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieInput
    Shares?: SharesUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MoviesCreateOrConnectWithoutMovieRatingsInput = {
    where: MoviesWhereUniqueInput
    create: XOR<MoviesCreateWithoutMovieRatingsInput, MoviesUncheckedCreateWithoutMovieRatingsInput>
  }

  export type UsersUpsertWithoutMovieRatingsInput = {
    update: XOR<UsersUpdateWithoutMovieRatingsInput, UsersUncheckedUpdateWithoutMovieRatingsInput>
    create: XOR<UsersCreateWithoutMovieRatingsInput, UsersUncheckedCreateWithoutMovieRatingsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMovieRatingsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMovieRatingsInput, UsersUncheckedUpdateWithoutMovieRatingsInput>
  }

  export type UsersUpdateWithoutMovieRatingsInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutMovieRatingsInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type MoviesUpsertWithoutMovieRatingsInput = {
    update: XOR<MoviesUpdateWithoutMovieRatingsInput, MoviesUncheckedUpdateWithoutMovieRatingsInput>
    create: XOR<MoviesCreateWithoutMovieRatingsInput, MoviesUncheckedCreateWithoutMovieRatingsInput>
    where?: MoviesWhereInput
  }

  export type MoviesUpdateToOneWithWhereWithoutMovieRatingsInput = {
    where?: MoviesWhereInput
    data: XOR<MoviesUpdateWithoutMovieRatingsInput, MoviesUncheckedUpdateWithoutMovieRatingsInput>
  }

  export type MoviesUpdateWithoutMovieRatingsInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUpdateManyWithoutMovieNestedInput
    Shares?: SharesUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateWithoutMovieRatingsInput = {
    MovieId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedUpdateManyWithoutMovieNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type UsersCreateWithoutSeriesRatingsInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateWithoutSeriesRatingsInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersCreateOrConnectWithoutSeriesRatingsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSeriesRatingsInput, UsersUncheckedCreateWithoutSeriesRatingsInput>
  }

  export type SeriesCreateWithoutSeriesRatingsInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsCreateNestedManyWithoutSeriesInput
    Shares?: SharesCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutSeriesRatingsInput = {
    SeriesId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesInput
    Shares?: SharesUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutSeriesRatingsInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutSeriesRatingsInput, SeriesUncheckedCreateWithoutSeriesRatingsInput>
  }

  export type UsersUpsertWithoutSeriesRatingsInput = {
    update: XOR<UsersUpdateWithoutSeriesRatingsInput, UsersUncheckedUpdateWithoutSeriesRatingsInput>
    create: XOR<UsersCreateWithoutSeriesRatingsInput, UsersUncheckedCreateWithoutSeriesRatingsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSeriesRatingsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSeriesRatingsInput, UsersUncheckedUpdateWithoutSeriesRatingsInput>
  }

  export type UsersUpdateWithoutSeriesRatingsInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSeriesRatingsInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type SeriesUpsertWithoutSeriesRatingsInput = {
    update: XOR<SeriesUpdateWithoutSeriesRatingsInput, SeriesUncheckedUpdateWithoutSeriesRatingsInput>
    create: XOR<SeriesCreateWithoutSeriesRatingsInput, SeriesUncheckedCreateWithoutSeriesRatingsInput>
    where?: SeriesWhereInput
  }

  export type SeriesUpdateToOneWithWhereWithoutSeriesRatingsInput = {
    where?: SeriesWhereInput
    data: XOR<SeriesUpdateWithoutSeriesRatingsInput, SeriesUncheckedUpdateWithoutSeriesRatingsInput>
  }

  export type SeriesUpdateWithoutSeriesRatingsInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesComments?: SeriesCommentsUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutSeriesRatingsInput = {
    SeriesId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type UsersCreateWithoutMovieCommentsInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateWithoutMovieCommentsInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersCreateOrConnectWithoutMovieCommentsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMovieCommentsInput, UsersUncheckedCreateWithoutMovieCommentsInput>
  }

  export type MoviesCreateWithoutMovieCommentsInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsCreateNestedManyWithoutMovieInput
    Shares?: SharesCreateNestedManyWithoutMovieInput
  }

  export type MoviesUncheckedCreateWithoutMovieCommentsInput = {
    MovieId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieInput
    Shares?: SharesUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MoviesCreateOrConnectWithoutMovieCommentsInput = {
    where: MoviesWhereUniqueInput
    create: XOR<MoviesCreateWithoutMovieCommentsInput, MoviesUncheckedCreateWithoutMovieCommentsInput>
  }

  export type UsersUpsertWithoutMovieCommentsInput = {
    update: XOR<UsersUpdateWithoutMovieCommentsInput, UsersUncheckedUpdateWithoutMovieCommentsInput>
    create: XOR<UsersCreateWithoutMovieCommentsInput, UsersUncheckedCreateWithoutMovieCommentsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMovieCommentsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMovieCommentsInput, UsersUncheckedUpdateWithoutMovieCommentsInput>
  }

  export type UsersUpdateWithoutMovieCommentsInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutMovieCommentsInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type MoviesUpsertWithoutMovieCommentsInput = {
    update: XOR<MoviesUpdateWithoutMovieCommentsInput, MoviesUncheckedUpdateWithoutMovieCommentsInput>
    create: XOR<MoviesCreateWithoutMovieCommentsInput, MoviesUncheckedCreateWithoutMovieCommentsInput>
    where?: MoviesWhereInput
  }

  export type MoviesUpdateToOneWithWhereWithoutMovieCommentsInput = {
    where?: MoviesWhereInput
    data: XOR<MoviesUpdateWithoutMovieCommentsInput, MoviesUncheckedUpdateWithoutMovieCommentsInput>
  }

  export type MoviesUpdateWithoutMovieCommentsInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUpdateManyWithoutMovieNestedInput
    Shares?: SharesUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateWithoutMovieCommentsInput = {
    MovieId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedUpdateManyWithoutMovieNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type UsersCreateWithoutSeriesCommentsInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateWithoutSeriesCommentsInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersCreateOrConnectWithoutSeriesCommentsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSeriesCommentsInput, UsersUncheckedCreateWithoutSeriesCommentsInput>
  }

  export type SeriesCreateWithoutSeriesCommentsInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsCreateNestedManyWithoutSeriesInput
    Shares?: SharesCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutSeriesCommentsInput = {
    SeriesId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesInput
    Shares?: SharesUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutSeriesCommentsInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutSeriesCommentsInput, SeriesUncheckedCreateWithoutSeriesCommentsInput>
  }

  export type UsersUpsertWithoutSeriesCommentsInput = {
    update: XOR<UsersUpdateWithoutSeriesCommentsInput, UsersUncheckedUpdateWithoutSeriesCommentsInput>
    create: XOR<UsersCreateWithoutSeriesCommentsInput, UsersUncheckedCreateWithoutSeriesCommentsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSeriesCommentsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSeriesCommentsInput, UsersUncheckedUpdateWithoutSeriesCommentsInput>
  }

  export type UsersUpdateWithoutSeriesCommentsInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSeriesCommentsInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type SeriesUpsertWithoutSeriesCommentsInput = {
    update: XOR<SeriesUpdateWithoutSeriesCommentsInput, SeriesUncheckedUpdateWithoutSeriesCommentsInput>
    create: XOR<SeriesCreateWithoutSeriesCommentsInput, SeriesUncheckedCreateWithoutSeriesCommentsInput>
    where?: SeriesWhereInput
  }

  export type SeriesUpdateToOneWithWhereWithoutSeriesCommentsInput = {
    where?: SeriesWhereInput
    data: XOR<SeriesUpdateWithoutSeriesCommentsInput, SeriesUncheckedUpdateWithoutSeriesCommentsInput>
  }

  export type SeriesUpdateWithoutSeriesCommentsInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutSeriesCommentsInput = {
    SeriesId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type UsersCreateWithoutMovieNotesInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateWithoutMovieNotesInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersCreateOrConnectWithoutMovieNotesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutMovieNotesInput, UsersUncheckedCreateWithoutMovieNotesInput>
  }

  export type MoviesCreateWithoutMovieNotesInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsCreateNestedManyWithoutMovieInput
    Shares?: SharesCreateNestedManyWithoutMovieInput
  }

  export type MoviesUncheckedCreateWithoutMovieNotesInput = {
    MovieId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieInput
    Shares?: SharesUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MoviesCreateOrConnectWithoutMovieNotesInput = {
    where: MoviesWhereUniqueInput
    create: XOR<MoviesCreateWithoutMovieNotesInput, MoviesUncheckedCreateWithoutMovieNotesInput>
  }

  export type UsersUpsertWithoutMovieNotesInput = {
    update: XOR<UsersUpdateWithoutMovieNotesInput, UsersUncheckedUpdateWithoutMovieNotesInput>
    create: XOR<UsersCreateWithoutMovieNotesInput, UsersUncheckedCreateWithoutMovieNotesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutMovieNotesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutMovieNotesInput, UsersUncheckedUpdateWithoutMovieNotesInput>
  }

  export type UsersUpdateWithoutMovieNotesInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutMovieNotesInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type MoviesUpsertWithoutMovieNotesInput = {
    update: XOR<MoviesUpdateWithoutMovieNotesInput, MoviesUncheckedUpdateWithoutMovieNotesInput>
    create: XOR<MoviesCreateWithoutMovieNotesInput, MoviesUncheckedCreateWithoutMovieNotesInput>
    where?: MoviesWhereInput
  }

  export type MoviesUpdateToOneWithWhereWithoutMovieNotesInput = {
    where?: MoviesWhereInput
    data: XOR<MoviesUpdateWithoutMovieNotesInput, MoviesUncheckedUpdateWithoutMovieNotesInput>
  }

  export type MoviesUpdateWithoutMovieNotesInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUpdateManyWithoutMovieNestedInput
    Shares?: SharesUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateWithoutMovieNotesInput = {
    MovieId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedUpdateManyWithoutMovieNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type UsersCreateWithoutSeriesNotesInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateWithoutSeriesNotesInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersCreateOrConnectWithoutSeriesNotesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSeriesNotesInput, UsersUncheckedCreateWithoutSeriesNotesInput>
  }

  export type SeriesCreateWithoutSeriesNotesInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsCreateNestedManyWithoutSeriesInput
    Shares?: SharesCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutSeriesNotesInput = {
    SeriesId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesInput
    Shares?: SharesUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutSeriesNotesInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutSeriesNotesInput, SeriesUncheckedCreateWithoutSeriesNotesInput>
  }

  export type UsersUpsertWithoutSeriesNotesInput = {
    update: XOR<UsersUpdateWithoutSeriesNotesInput, UsersUncheckedUpdateWithoutSeriesNotesInput>
    create: XOR<UsersCreateWithoutSeriesNotesInput, UsersUncheckedCreateWithoutSeriesNotesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSeriesNotesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSeriesNotesInput, UsersUncheckedUpdateWithoutSeriesNotesInput>
  }

  export type UsersUpdateWithoutSeriesNotesInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSeriesNotesInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type SeriesUpsertWithoutSeriesNotesInput = {
    update: XOR<SeriesUpdateWithoutSeriesNotesInput, SeriesUncheckedUpdateWithoutSeriesNotesInput>
    create: XOR<SeriesCreateWithoutSeriesNotesInput, SeriesUncheckedCreateWithoutSeriesNotesInput>
    where?: SeriesWhereInput
  }

  export type SeriesUpdateToOneWithWhereWithoutSeriesNotesInput = {
    where?: SeriesWhereInput
    data: XOR<SeriesUpdateWithoutSeriesNotesInput, SeriesUncheckedUpdateWithoutSeriesNotesInput>
  }

  export type SeriesUpdateWithoutSeriesNotesInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutSeriesNotesInput = {
    SeriesId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type UsersCreateWithoutSchedulingInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateWithoutSchedulingInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersCreateOrConnectWithoutSchedulingInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSchedulingInput, UsersUncheckedCreateWithoutSchedulingInput>
  }

  export type MoviesCreateWithoutSchedulingInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsCreateNestedManyWithoutMovieInput
    Shares?: SharesCreateNestedManyWithoutMovieInput
  }

  export type MoviesUncheckedCreateWithoutSchedulingInput = {
    MovieId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieInput
    Shares?: SharesUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MoviesCreateOrConnectWithoutSchedulingInput = {
    where: MoviesWhereUniqueInput
    create: XOR<MoviesCreateWithoutSchedulingInput, MoviesUncheckedCreateWithoutSchedulingInput>
  }

  export type SeriesCreateWithoutSchedulingInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsCreateNestedManyWithoutSeriesInput
    Shares?: SharesCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutSchedulingInput = {
    SeriesId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesInput
    Shares?: SharesUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutSchedulingInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutSchedulingInput, SeriesUncheckedCreateWithoutSchedulingInput>
  }

  export type UsersUpsertWithoutSchedulingInput = {
    update: XOR<UsersUpdateWithoutSchedulingInput, UsersUncheckedUpdateWithoutSchedulingInput>
    create: XOR<UsersCreateWithoutSchedulingInput, UsersUncheckedCreateWithoutSchedulingInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSchedulingInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSchedulingInput, UsersUncheckedUpdateWithoutSchedulingInput>
  }

  export type UsersUpdateWithoutSchedulingInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSchedulingInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type MoviesUpsertWithoutSchedulingInput = {
    update: XOR<MoviesUpdateWithoutSchedulingInput, MoviesUncheckedUpdateWithoutSchedulingInput>
    create: XOR<MoviesCreateWithoutSchedulingInput, MoviesUncheckedCreateWithoutSchedulingInput>
    where?: MoviesWhereInput
  }

  export type MoviesUpdateToOneWithWhereWithoutSchedulingInput = {
    where?: MoviesWhereInput
    data: XOR<MoviesUpdateWithoutSchedulingInput, MoviesUncheckedUpdateWithoutSchedulingInput>
  }

  export type MoviesUpdateWithoutSchedulingInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUpdateManyWithoutMovieNestedInput
    Shares?: SharesUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateWithoutSchedulingInput = {
    MovieId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedUpdateManyWithoutMovieNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type SeriesUpsertWithoutSchedulingInput = {
    update: XOR<SeriesUpdateWithoutSchedulingInput, SeriesUncheckedUpdateWithoutSchedulingInput>
    create: XOR<SeriesCreateWithoutSchedulingInput, SeriesUncheckedCreateWithoutSchedulingInput>
    where?: SeriesWhereInput
  }

  export type SeriesUpdateToOneWithWhereWithoutSchedulingInput = {
    where?: SeriesWhereInput
    data: XOR<SeriesUpdateWithoutSchedulingInput, SeriesUncheckedUpdateWithoutSchedulingInput>
  }

  export type SeriesUpdateWithoutSchedulingInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutSchedulingInput = {
    SeriesId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type UsersCreateWithoutSharesSentInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesReceived?: SharesCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersUncheckedCreateWithoutSharesSentInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesReceived?: SharesUncheckedCreateNestedManyWithoutRecipientUserInput
  }

  export type UsersCreateOrConnectWithoutSharesSentInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSharesSentInput, UsersUncheckedCreateWithoutSharesSentInput>
  }

  export type UsersCreateWithoutSharesReceivedInput = {
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingCreateNestedManyWithoutUserInput
    SharesSent?: SharesCreateNestedManyWithoutSenderUserInput
  }

  export type UsersUncheckedCreateWithoutSharesReceivedInput = {
    UserId?: number
    Name: string
    Email: string
    Password: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutUserInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutUserInput
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutUserInput
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutUserInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutUserInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutUserInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutUserInput
    SharesSent?: SharesUncheckedCreateNestedManyWithoutSenderUserInput
  }

  export type UsersCreateOrConnectWithoutSharesReceivedInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutSharesReceivedInput, UsersUncheckedCreateWithoutSharesReceivedInput>
  }

  export type MoviesCreateWithoutSharesInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsCreateNestedManyWithoutMovieInput
  }

  export type MoviesUncheckedCreateWithoutSharesInput = {
    MovieId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutMovieInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MoviesCreateOrConnectWithoutSharesInput = {
    where: MoviesWhereUniqueInput
    create: XOR<MoviesCreateWithoutSharesInput, MoviesUncheckedCreateWithoutSharesInput>
  }

  export type SeriesCreateWithoutSharesInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutSharesInput = {
    SeriesId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutSeriesInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutSharesInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutSharesInput, SeriesUncheckedCreateWithoutSharesInput>
  }

  export type UsersUpsertWithoutSharesSentInput = {
    update: XOR<UsersUpdateWithoutSharesSentInput, UsersUncheckedUpdateWithoutSharesSentInput>
    create: XOR<UsersCreateWithoutSharesSentInput, UsersUncheckedCreateWithoutSharesSentInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSharesSentInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSharesSentInput, UsersUncheckedUpdateWithoutSharesSentInput>
  }

  export type UsersUpdateWithoutSharesSentInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesReceived?: SharesUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSharesSentInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesReceived?: SharesUncheckedUpdateManyWithoutRecipientUserNestedInput
  }

  export type UsersUpsertWithoutSharesReceivedInput = {
    update: XOR<UsersUpdateWithoutSharesReceivedInput, UsersUncheckedUpdateWithoutSharesReceivedInput>
    create: XOR<UsersCreateWithoutSharesReceivedInput, UsersUncheckedCreateWithoutSharesReceivedInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutSharesReceivedInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutSharesReceivedInput, UsersUncheckedUpdateWithoutSharesReceivedInput>
  }

  export type UsersUpdateWithoutSharesReceivedInput = {
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUpdateManyWithoutSenderUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutSharesReceivedInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    Email?: StringFieldUpdateOperationsInput | string
    Password?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutUserNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutUserNestedInput
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutUserNestedInput
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutUserNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutUserNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutUserNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutUserNestedInput
    SharesSent?: SharesUncheckedUpdateManyWithoutSenderUserNestedInput
  }

  export type MoviesUpsertWithoutSharesInput = {
    update: XOR<MoviesUpdateWithoutSharesInput, MoviesUncheckedUpdateWithoutSharesInput>
    create: XOR<MoviesCreateWithoutSharesInput, MoviesUncheckedCreateWithoutSharesInput>
    where?: MoviesWhereInput
  }

  export type MoviesUpdateToOneWithWhereWithoutSharesInput = {
    where?: MoviesWhereInput
    data: XOR<MoviesUpdateWithoutSharesInput, MoviesUncheckedUpdateWithoutSharesInput>
  }

  export type MoviesUpdateWithoutSharesInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateWithoutSharesInput = {
    MovieId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutMovieNestedInput
    MovieCategoryRelations?: MovieCategoryRelationsUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type SeriesUpsertWithoutSharesInput = {
    update: XOR<SeriesUpdateWithoutSharesInput, SeriesUncheckedUpdateWithoutSharesInput>
    create: XOR<SeriesCreateWithoutSharesInput, SeriesUncheckedCreateWithoutSharesInput>
    where?: SeriesWhereInput
  }

  export type SeriesUpdateToOneWithWhereWithoutSharesInput = {
    where?: SeriesWhereInput
    data: XOR<SeriesUpdateWithoutSharesInput, SeriesUncheckedUpdateWithoutSharesInput>
  }

  export type SeriesUpdateWithoutSharesInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutSharesInput = {
    SeriesId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesCategoryRelations?: SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type MovieCategoryRelationsCreateWithoutMovieCategoryInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Movie: MoviesCreateNestedOneWithoutMovieCategoryRelationsInput
  }

  export type MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput = {
    MovieCategoryRelationId?: number
    MovieId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoryRelationsCreateOrConnectWithoutMovieCategoryInput = {
    where: MovieCategoryRelationsWhereUniqueInput
    create: XOR<MovieCategoryRelationsCreateWithoutMovieCategoryInput, MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput>
  }

  export type MovieCategoryRelationsCreateManyMovieCategoryInputEnvelope = {
    data: MovieCategoryRelationsCreateManyMovieCategoryInput | MovieCategoryRelationsCreateManyMovieCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MovieCategoryRelationsUpsertWithWhereUniqueWithoutMovieCategoryInput = {
    where: MovieCategoryRelationsWhereUniqueInput
    update: XOR<MovieCategoryRelationsUpdateWithoutMovieCategoryInput, MovieCategoryRelationsUncheckedUpdateWithoutMovieCategoryInput>
    create: XOR<MovieCategoryRelationsCreateWithoutMovieCategoryInput, MovieCategoryRelationsUncheckedCreateWithoutMovieCategoryInput>
  }

  export type MovieCategoryRelationsUpdateWithWhereUniqueWithoutMovieCategoryInput = {
    where: MovieCategoryRelationsWhereUniqueInput
    data: XOR<MovieCategoryRelationsUpdateWithoutMovieCategoryInput, MovieCategoryRelationsUncheckedUpdateWithoutMovieCategoryInput>
  }

  export type MovieCategoryRelationsUpdateManyWithWhereWithoutMovieCategoryInput = {
    where: MovieCategoryRelationsScalarWhereInput
    data: XOR<MovieCategoryRelationsUpdateManyMutationInput, MovieCategoryRelationsUncheckedUpdateManyWithoutMovieCategoryInput>
  }

  export type SeriesCategoryRelationsCreateWithoutSeriesCategoryInput = {
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    Series: SeriesCreateNestedOneWithoutSeriesCategoryRelationsInput
  }

  export type SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput = {
    SeriesCategoryRelationId?: number
    SeriesId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoryRelationsCreateOrConnectWithoutSeriesCategoryInput = {
    where: SeriesCategoryRelationsWhereUniqueInput
    create: XOR<SeriesCategoryRelationsCreateWithoutSeriesCategoryInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput>
  }

  export type SeriesCategoryRelationsCreateManySeriesCategoryInputEnvelope = {
    data: SeriesCategoryRelationsCreateManySeriesCategoryInput | SeriesCategoryRelationsCreateManySeriesCategoryInput[]
    skipDuplicates?: boolean
  }

  export type SeriesCategoryRelationsUpsertWithWhereUniqueWithoutSeriesCategoryInput = {
    where: SeriesCategoryRelationsWhereUniqueInput
    update: XOR<SeriesCategoryRelationsUpdateWithoutSeriesCategoryInput, SeriesCategoryRelationsUncheckedUpdateWithoutSeriesCategoryInput>
    create: XOR<SeriesCategoryRelationsCreateWithoutSeriesCategoryInput, SeriesCategoryRelationsUncheckedCreateWithoutSeriesCategoryInput>
  }

  export type SeriesCategoryRelationsUpdateWithWhereUniqueWithoutSeriesCategoryInput = {
    where: SeriesCategoryRelationsWhereUniqueInput
    data: XOR<SeriesCategoryRelationsUpdateWithoutSeriesCategoryInput, SeriesCategoryRelationsUncheckedUpdateWithoutSeriesCategoryInput>
  }

  export type SeriesCategoryRelationsUpdateManyWithWhereWithoutSeriesCategoryInput = {
    where: SeriesCategoryRelationsScalarWhereInput
    data: XOR<SeriesCategoryRelationsUpdateManyMutationInput, SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesCategoryInput>
  }

  export type MoviesCreateWithoutMovieCategoryRelationsInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingCreateNestedManyWithoutMovieInput
    Shares?: SharesCreateNestedManyWithoutMovieInput
  }

  export type MoviesUncheckedCreateWithoutMovieCategoryRelationsInput = {
    MovieId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    MovieRatings?: MovieRatingsUncheckedCreateNestedManyWithoutMovieInput
    MovieComments?: MovieCommentsUncheckedCreateNestedManyWithoutMovieInput
    MovieNotes?: MovieNotesUncheckedCreateNestedManyWithoutMovieInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutMovieInput
    Shares?: SharesUncheckedCreateNestedManyWithoutMovieInput
  }

  export type MoviesCreateOrConnectWithoutMovieCategoryRelationsInput = {
    where: MoviesWhereUniqueInput
    create: XOR<MoviesCreateWithoutMovieCategoryRelationsInput, MoviesUncheckedCreateWithoutMovieCategoryRelationsInput>
  }

  export type MovieCategoriesCreateWithoutMovieCategoryRelationsInput = {
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoriesUncheckedCreateWithoutMovieCategoryRelationsInput = {
    MovieCategoryId?: number
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoriesCreateOrConnectWithoutMovieCategoryRelationsInput = {
    where: MovieCategoriesWhereUniqueInput
    create: XOR<MovieCategoriesCreateWithoutMovieCategoryRelationsInput, MovieCategoriesUncheckedCreateWithoutMovieCategoryRelationsInput>
  }

  export type MoviesUpsertWithoutMovieCategoryRelationsInput = {
    update: XOR<MoviesUpdateWithoutMovieCategoryRelationsInput, MoviesUncheckedUpdateWithoutMovieCategoryRelationsInput>
    create: XOR<MoviesCreateWithoutMovieCategoryRelationsInput, MoviesUncheckedCreateWithoutMovieCategoryRelationsInput>
    where?: MoviesWhereInput
  }

  export type MoviesUpdateToOneWithWhereWithoutMovieCategoryRelationsInput = {
    where?: MoviesWhereInput
    data: XOR<MoviesUpdateWithoutMovieCategoryRelationsInput, MoviesUncheckedUpdateWithoutMovieCategoryRelationsInput>
  }

  export type MoviesUpdateWithoutMovieCategoryRelationsInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUpdateManyWithoutMovieNestedInput
    Shares?: SharesUpdateManyWithoutMovieNestedInput
  }

  export type MoviesUncheckedUpdateWithoutMovieCategoryRelationsInput = {
    MovieId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieRatings?: MovieRatingsUncheckedUpdateManyWithoutMovieNestedInput
    MovieComments?: MovieCommentsUncheckedUpdateManyWithoutMovieNestedInput
    MovieNotes?: MovieNotesUncheckedUpdateManyWithoutMovieNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutMovieNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutMovieNestedInput
  }

  export type MovieCategoriesUpsertWithoutMovieCategoryRelationsInput = {
    update: XOR<MovieCategoriesUpdateWithoutMovieCategoryRelationsInput, MovieCategoriesUncheckedUpdateWithoutMovieCategoryRelationsInput>
    create: XOR<MovieCategoriesCreateWithoutMovieCategoryRelationsInput, MovieCategoriesUncheckedCreateWithoutMovieCategoryRelationsInput>
    where?: MovieCategoriesWhereInput
  }

  export type MovieCategoriesUpdateToOneWithWhereWithoutMovieCategoryRelationsInput = {
    where?: MovieCategoriesWhereInput
    data: XOR<MovieCategoriesUpdateWithoutMovieCategoryRelationsInput, MovieCategoriesUncheckedUpdateWithoutMovieCategoryRelationsInput>
  }

  export type MovieCategoriesUpdateWithoutMovieCategoryRelationsInput = {
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoriesUncheckedUpdateWithoutMovieCategoryRelationsInput = {
    MovieCategoryId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCreateWithoutSeriesCategoryRelationsInput = {
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingCreateNestedManyWithoutSeriesInput
    Shares?: SharesCreateNestedManyWithoutSeriesInput
  }

  export type SeriesUncheckedCreateWithoutSeriesCategoryRelationsInput = {
    SeriesId?: number
    Title: string
    Genre: string
    ReleaseDate: Date | string
    Description?: string | null
    SeasonsCount: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
    SeriesRatings?: SeriesRatingsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesComments?: SeriesCommentsUncheckedCreateNestedManyWithoutSeriesInput
    SeriesNotes?: SeriesNotesUncheckedCreateNestedManyWithoutSeriesInput
    Scheduling?: SchedulingUncheckedCreateNestedManyWithoutSeriesInput
    Shares?: SharesUncheckedCreateNestedManyWithoutSeriesInput
  }

  export type SeriesCreateOrConnectWithoutSeriesCategoryRelationsInput = {
    where: SeriesWhereUniqueInput
    create: XOR<SeriesCreateWithoutSeriesCategoryRelationsInput, SeriesUncheckedCreateWithoutSeriesCategoryRelationsInput>
  }

  export type SeriesCategoriesCreateWithoutSeriesCategoryRelationsInput = {
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoriesUncheckedCreateWithoutSeriesCategoryRelationsInput = {
    SeriesCategoryId?: number
    Name: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoriesCreateOrConnectWithoutSeriesCategoryRelationsInput = {
    where: SeriesCategoriesWhereUniqueInput
    create: XOR<SeriesCategoriesCreateWithoutSeriesCategoryRelationsInput, SeriesCategoriesUncheckedCreateWithoutSeriesCategoryRelationsInput>
  }

  export type SeriesUpsertWithoutSeriesCategoryRelationsInput = {
    update: XOR<SeriesUpdateWithoutSeriesCategoryRelationsInput, SeriesUncheckedUpdateWithoutSeriesCategoryRelationsInput>
    create: XOR<SeriesCreateWithoutSeriesCategoryRelationsInput, SeriesUncheckedCreateWithoutSeriesCategoryRelationsInput>
    where?: SeriesWhereInput
  }

  export type SeriesUpdateToOneWithWhereWithoutSeriesCategoryRelationsInput = {
    where?: SeriesWhereInput
    data: XOR<SeriesUpdateWithoutSeriesCategoryRelationsInput, SeriesUncheckedUpdateWithoutSeriesCategoryRelationsInput>
  }

  export type SeriesUpdateWithoutSeriesCategoryRelationsInput = {
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesUncheckedUpdateWithoutSeriesCategoryRelationsInput = {
    SeriesId?: IntFieldUpdateOperationsInput | number
    Title?: StringFieldUpdateOperationsInput | string
    Genre?: StringFieldUpdateOperationsInput | string
    ReleaseDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Description?: NullableStringFieldUpdateOperationsInput | string | null
    SeasonsCount?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesRatings?: SeriesRatingsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesComments?: SeriesCommentsUncheckedUpdateManyWithoutSeriesNestedInput
    SeriesNotes?: SeriesNotesUncheckedUpdateManyWithoutSeriesNestedInput
    Scheduling?: SchedulingUncheckedUpdateManyWithoutSeriesNestedInput
    Shares?: SharesUncheckedUpdateManyWithoutSeriesNestedInput
  }

  export type SeriesCategoriesUpsertWithoutSeriesCategoryRelationsInput = {
    update: XOR<SeriesCategoriesUpdateWithoutSeriesCategoryRelationsInput, SeriesCategoriesUncheckedUpdateWithoutSeriesCategoryRelationsInput>
    create: XOR<SeriesCategoriesCreateWithoutSeriesCategoryRelationsInput, SeriesCategoriesUncheckedCreateWithoutSeriesCategoryRelationsInput>
    where?: SeriesCategoriesWhereInput
  }

  export type SeriesCategoriesUpdateToOneWithWhereWithoutSeriesCategoryRelationsInput = {
    where?: SeriesCategoriesWhereInput
    data: XOR<SeriesCategoriesUpdateWithoutSeriesCategoryRelationsInput, SeriesCategoriesUncheckedUpdateWithoutSeriesCategoryRelationsInput>
  }

  export type SeriesCategoriesUpdateWithoutSeriesCategoryRelationsInput = {
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoriesUncheckedUpdateWithoutSeriesCategoryRelationsInput = {
    SeriesCategoryId?: IntFieldUpdateOperationsInput | number
    Name?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCommentsCreateManyUserInput = {
    MovieCommentId?: number
    MovieId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCommentsCreateManyUserInput = {
    SeriesCommentId?: number
    SeriesId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieRatingsCreateManyUserInput = {
    MovieRatingId?: number
    MovieId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesRatingsCreateManyUserInput = {
    SeriesRatingId?: number
    SeriesId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieNotesCreateManyUserInput = {
    NoteId?: number
    MovieId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesNotesCreateManyUserInput = {
    NoteId?: number
    SeriesId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SchedulingCreateManyUserInput = {
    EventId?: number
    MovieId?: number | null
    SeriesId?: number | null
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SharesCreateManySenderUserInput = {
    ShareId?: number
    RecipientUserId: number
    MovieId?: number | null
    SeriesId?: number | null
    CreatedAt?: Date | string
  }

  export type SharesCreateManyRecipientUserInput = {
    ShareId?: number
    SenderUserId: number
    MovieId?: number | null
    SeriesId?: number | null
    CreatedAt?: Date | string
  }

  export type MovieCommentsUpdateWithoutUserInput = {
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movie?: MoviesUpdateOneRequiredWithoutMovieCommentsNestedInput
  }

  export type MovieCommentsUncheckedUpdateWithoutUserInput = {
    MovieCommentId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCommentsUncheckedUpdateManyWithoutUserInput = {
    MovieCommentId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCommentsUpdateWithoutUserInput = {
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Series?: SeriesUpdateOneRequiredWithoutSeriesCommentsNestedInput
  }

  export type SeriesCommentsUncheckedUpdateWithoutUserInput = {
    SeriesCommentId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCommentsUncheckedUpdateManyWithoutUserInput = {
    SeriesCommentId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieRatingsUpdateWithoutUserInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movie?: MoviesUpdateOneRequiredWithoutMovieRatingsNestedInput
  }

  export type MovieRatingsUncheckedUpdateWithoutUserInput = {
    MovieRatingId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieRatingsUncheckedUpdateManyWithoutUserInput = {
    MovieRatingId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesRatingsUpdateWithoutUserInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Series?: SeriesUpdateOneRequiredWithoutSeriesRatingsNestedInput
  }

  export type SeriesRatingsUncheckedUpdateWithoutUserInput = {
    SeriesRatingId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesRatingsUncheckedUpdateManyWithoutUserInput = {
    SeriesRatingId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieNotesUpdateWithoutUserInput = {
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movie?: MoviesUpdateOneRequiredWithoutMovieNotesNestedInput
  }

  export type MovieNotesUncheckedUpdateWithoutUserInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieNotesUncheckedUpdateManyWithoutUserInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesNotesUpdateWithoutUserInput = {
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Series?: SeriesUpdateOneRequiredWithoutSeriesNotesNestedInput
  }

  export type SeriesNotesUncheckedUpdateWithoutUserInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesNotesUncheckedUpdateManyWithoutUserInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingUpdateWithoutUserInput = {
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movie?: MoviesUpdateOneWithoutSchedulingNestedInput
    Series?: SeriesUpdateOneWithoutSchedulingNestedInput
  }

  export type SchedulingUncheckedUpdateWithoutUserInput = {
    EventId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingUncheckedUpdateManyWithoutUserInput = {
    EventId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUpdateWithoutSenderUserInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    RecipientUser?: UsersUpdateOneRequiredWithoutSharesReceivedNestedInput
    Movie?: MoviesUpdateOneWithoutSharesNestedInput
    Series?: SeriesUpdateOneWithoutSharesNestedInput
  }

  export type SharesUncheckedUpdateWithoutSenderUserInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    RecipientUserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUncheckedUpdateManyWithoutSenderUserInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    RecipientUserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUpdateWithoutRecipientUserInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SenderUser?: UsersUpdateOneRequiredWithoutSharesSentNestedInput
    Movie?: MoviesUpdateOneWithoutSharesNestedInput
    Series?: SeriesUpdateOneWithoutSharesNestedInput
  }

  export type SharesUncheckedUpdateWithoutRecipientUserInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    SenderUserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUncheckedUpdateManyWithoutRecipientUserInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    SenderUserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieRatingsCreateManyMovieInput = {
    MovieRatingId?: number
    UserId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCommentsCreateManyMovieInput = {
    MovieCommentId?: number
    UserId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieNotesCreateManyMovieInput = {
    NoteId?: number
    UserId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SchedulingCreateManyMovieInput = {
    EventId?: number
    UserId: number
    SeriesId?: number | null
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoryRelationsCreateManyMovieInput = {
    MovieCategoryRelationId?: number
    MovieCategoryId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SharesCreateManyMovieInput = {
    ShareId?: number
    SenderUserId: number
    RecipientUserId: number
    SeriesId?: number | null
    CreatedAt?: Date | string
  }

  export type MovieRatingsUpdateWithoutMovieInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutMovieRatingsNestedInput
  }

  export type MovieRatingsUncheckedUpdateWithoutMovieInput = {
    MovieRatingId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieRatingsUncheckedUpdateManyWithoutMovieInput = {
    MovieRatingId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCommentsUpdateWithoutMovieInput = {
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutMovieCommentsNestedInput
  }

  export type MovieCommentsUncheckedUpdateWithoutMovieInput = {
    MovieCommentId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCommentsUncheckedUpdateManyWithoutMovieInput = {
    MovieCommentId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieNotesUpdateWithoutMovieInput = {
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutMovieNotesNestedInput
  }

  export type MovieNotesUncheckedUpdateWithoutMovieInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieNotesUncheckedUpdateManyWithoutMovieInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingUpdateWithoutMovieInput = {
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSchedulingNestedInput
    Series?: SeriesUpdateOneWithoutSchedulingNestedInput
  }

  export type SchedulingUncheckedUpdateWithoutMovieInput = {
    EventId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingUncheckedUpdateManyWithoutMovieInput = {
    EventId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoryRelationsUpdateWithoutMovieInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MovieCategory?: MovieCategoriesUpdateOneRequiredWithoutMovieCategoryRelationsNestedInput
  }

  export type MovieCategoryRelationsUncheckedUpdateWithoutMovieInput = {
    MovieCategoryRelationId?: IntFieldUpdateOperationsInput | number
    MovieCategoryId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoryRelationsUncheckedUpdateManyWithoutMovieInput = {
    MovieCategoryRelationId?: IntFieldUpdateOperationsInput | number
    MovieCategoryId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUpdateWithoutMovieInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SenderUser?: UsersUpdateOneRequiredWithoutSharesSentNestedInput
    RecipientUser?: UsersUpdateOneRequiredWithoutSharesReceivedNestedInput
    Series?: SeriesUpdateOneWithoutSharesNestedInput
  }

  export type SharesUncheckedUpdateWithoutMovieInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    SenderUserId?: IntFieldUpdateOperationsInput | number
    RecipientUserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUncheckedUpdateManyWithoutMovieInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    SenderUserId?: IntFieldUpdateOperationsInput | number
    RecipientUserId?: IntFieldUpdateOperationsInput | number
    SeriesId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesRatingsCreateManySeriesInput = {
    SeriesRatingId?: number
    UserId: number
    Rating: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCommentsCreateManySeriesInput = {
    SeriesCommentId?: number
    UserId: number
    CommentText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesNotesCreateManySeriesInput = {
    NoteId?: number
    UserId: number
    NoteText: string
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SchedulingCreateManySeriesInput = {
    EventId?: number
    UserId: number
    MovieId?: number | null
    EventDate: Date | string
    Note?: string | null
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoryRelationsCreateManySeriesInput = {
    SeriesCategoryRelationId?: number
    SeriesCategoryId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SharesCreateManySeriesInput = {
    ShareId?: number
    SenderUserId: number
    RecipientUserId: number
    MovieId?: number | null
    CreatedAt?: Date | string
  }

  export type SeriesRatingsUpdateWithoutSeriesInput = {
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSeriesRatingsNestedInput
  }

  export type SeriesRatingsUncheckedUpdateWithoutSeriesInput = {
    SeriesRatingId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesRatingsUncheckedUpdateManyWithoutSeriesInput = {
    SeriesRatingId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    Rating?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCommentsUpdateWithoutSeriesInput = {
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSeriesCommentsNestedInput
  }

  export type SeriesCommentsUncheckedUpdateWithoutSeriesInput = {
    SeriesCommentId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCommentsUncheckedUpdateManyWithoutSeriesInput = {
    SeriesCommentId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    CommentText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesNotesUpdateWithoutSeriesInput = {
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSeriesNotesNestedInput
  }

  export type SeriesNotesUncheckedUpdateWithoutSeriesInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesNotesUncheckedUpdateManyWithoutSeriesInput = {
    NoteId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    NoteText?: StringFieldUpdateOperationsInput | string
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingUpdateWithoutSeriesInput = {
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UsersUpdateOneRequiredWithoutSchedulingNestedInput
    Movie?: MoviesUpdateOneWithoutSchedulingNestedInput
  }

  export type SchedulingUncheckedUpdateWithoutSeriesInput = {
    EventId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchedulingUncheckedUpdateManyWithoutSeriesInput = {
    EventId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    EventDate?: DateTimeFieldUpdateOperationsInput | Date | string
    Note?: NullableStringFieldUpdateOperationsInput | string | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoryRelationsUpdateWithoutSeriesInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SeriesCategory?: SeriesCategoriesUpdateOneRequiredWithoutSeriesCategoryRelationsNestedInput
  }

  export type SeriesCategoryRelationsUncheckedUpdateWithoutSeriesInput = {
    SeriesCategoryRelationId?: IntFieldUpdateOperationsInput | number
    SeriesCategoryId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesInput = {
    SeriesCategoryRelationId?: IntFieldUpdateOperationsInput | number
    SeriesCategoryId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUpdateWithoutSeriesInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SenderUser?: UsersUpdateOneRequiredWithoutSharesSentNestedInput
    RecipientUser?: UsersUpdateOneRequiredWithoutSharesReceivedNestedInput
    Movie?: MoviesUpdateOneWithoutSharesNestedInput
  }

  export type SharesUncheckedUpdateWithoutSeriesInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    SenderUserId?: IntFieldUpdateOperationsInput | number
    RecipientUserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharesUncheckedUpdateManyWithoutSeriesInput = {
    ShareId?: IntFieldUpdateOperationsInput | number
    SenderUserId?: IntFieldUpdateOperationsInput | number
    RecipientUserId?: IntFieldUpdateOperationsInput | number
    MovieId?: NullableIntFieldUpdateOperationsInput | number | null
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoryRelationsCreateManyMovieCategoryInput = {
    MovieCategoryRelationId?: number
    MovieId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type MovieCategoryRelationsUpdateWithoutMovieCategoryInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Movie?: MoviesUpdateOneRequiredWithoutMovieCategoryRelationsNestedInput
  }

  export type MovieCategoryRelationsUncheckedUpdateWithoutMovieCategoryInput = {
    MovieCategoryRelationId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieCategoryRelationsUncheckedUpdateManyWithoutMovieCategoryInput = {
    MovieCategoryRelationId?: IntFieldUpdateOperationsInput | number
    MovieId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoryRelationsCreateManySeriesCategoryInput = {
    SeriesCategoryRelationId?: number
    SeriesId: number
    CreatedAt?: Date | string
    UpdatedAt?: Date | string
  }

  export type SeriesCategoryRelationsUpdateWithoutSeriesCategoryInput = {
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Series?: SeriesUpdateOneRequiredWithoutSeriesCategoryRelationsNestedInput
  }

  export type SeriesCategoryRelationsUncheckedUpdateWithoutSeriesCategoryInput = {
    SeriesCategoryRelationId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SeriesCategoryRelationsUncheckedUpdateManyWithoutSeriesCategoryInput = {
    SeriesCategoryRelationId?: IntFieldUpdateOperationsInput | number
    SeriesId?: IntFieldUpdateOperationsInput | number
    CreatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UpdatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MoviesCountOutputTypeDefaultArgs instead
     */
    export type MoviesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MoviesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeriesCountOutputTypeDefaultArgs instead
     */
    export type SeriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieCategoriesCountOutputTypeDefaultArgs instead
     */
    export type MovieCategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieCategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeriesCategoriesCountOutputTypeDefaultArgs instead
     */
    export type SeriesCategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeriesCategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MoviesDefaultArgs instead
     */
    export type MoviesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MoviesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeriesDefaultArgs instead
     */
    export type SeriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieRatingsDefaultArgs instead
     */
    export type MovieRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieRatingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeriesRatingsDefaultArgs instead
     */
    export type SeriesRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeriesRatingsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieCommentsDefaultArgs instead
     */
    export type MovieCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieCommentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeriesCommentsDefaultArgs instead
     */
    export type SeriesCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeriesCommentsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieNotesDefaultArgs instead
     */
    export type MovieNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieNotesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeriesNotesDefaultArgs instead
     */
    export type SeriesNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeriesNotesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchedulingDefaultArgs instead
     */
    export type SchedulingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchedulingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SharesDefaultArgs instead
     */
    export type SharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SharesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieCategoriesDefaultArgs instead
     */
    export type MovieCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieCategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeriesCategoriesDefaultArgs instead
     */
    export type SeriesCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeriesCategoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MovieCategoryRelationsDefaultArgs instead
     */
    export type MovieCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MovieCategoryRelationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SeriesCategoryRelationsDefaultArgs instead
     */
    export type SeriesCategoryRelationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SeriesCategoryRelationsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}